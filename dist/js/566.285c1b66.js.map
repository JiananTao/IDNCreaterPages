{"version":3,"file":"js/566.285c1b66.js","mappings":"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","sources":["webpack://IDNCreaterPages/./node_modules/lodash-es/clone.js","webpack://IDNCreaterPages/./node_modules/dagre-d3-es/src/graphlib/json.js","webpack://IDNCreaterPages/./node_modules/mermaid/dist/index-5219d011.js"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, g as insertEdge, h as positionEdgeLabel } from \"./edges-2e77835f.js\";\nimport { l as log, k as evaluate, g as getConfig } from \"./commonDb-573409be.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { c as createText } from \"./createText-1f5f8f92.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancenstorId) => {\n  log.trace(\"In isDecendant\", ancenstorId, \" \", id, \" = \", descendants[ancenstorId].includes(id));\n  if (descendants[ancenstorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Decendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in decendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Decendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = JSON.parse(JSON.stringify(edge));\n      const edge2 = JSON.parse(JSON.stringify(edge));\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(getConfig().flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + node.x + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  label.attr(\n    \"transform\",\n    \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2 - node.padding / 3 + (evaluate(getConfig().flowchart.htmlLabels) ? 5 : 3)) + \")\"\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = (_elem, graph, diagramtype, parentCluster) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  graph.nodes().forEach(function(v) {\n    const node = graph.node(v);\n    if (parentCluster !== void 0) {\n      const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n      log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n      graph.setNode(parentCluster.id, data);\n      if (!graph.parent(v)) {\n        log.trace(\"Setting parent\", v, parentCluster.id);\n        graph.setParent(v, parentCluster.id, data);\n      }\n    }\n    log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n    if (node && node.clusterNode) {\n      log.info(\"Cluster identified\", v, node.width, graph.node(v));\n      const o = recursiveRender(nodes, node.graph, diagramtype, graph.node(v));\n      const newEl = o.elem;\n      updateNodeBounds(node, newEl);\n      node.diff = o.diff || 0;\n      log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n      setNodeElem(newEl, node);\n      log.warn(\"Recursive render complete \", newEl, node);\n    } else {\n      if (graph.children(v).length > 0) {\n        log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n        log.info(findNonClusterChild(node.id, graph));\n        clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n      } else {\n        log.info(\"Node - the non recursive path\", v, node.id, node);\n        insertNode(nodes, graph.node(v), dir);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translateing: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramtype, graph);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = (elem, graph, markers, diagramtype, id) => {\n  insertMarkers(elem, markers, diagramtype, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", graphlibJson.write(graph));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", graphlibJson.write(graph));\n  recursiveRender(elem, graph, diagramtype);\n};\nexport {\n  render as r\n};\n//# sourceMappingURL=index-5219d011.js.map\n"],"names":["CLONE_SYMBOLS_FLAG","clone","value","write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","graph","v","nodeValue","node","parent","e","edgeValue","edge","w","name","clusterDb","descendants","parents","clear$1","isDescendant","id","ancenstorId","l","includes","edgeInCluster","clusterId","copy","newGraph","rootId","children","push","forEach","length","data","setNode","setParent","data2","setEdge","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","adjustClustersAndEdges","depth","clusterData","d1","d2","JSON","stringify","removeEdge","specialId","domId","labelStyle","labelText","label","padding","shape","style","edge1","parse","edge2","arrowTypeEnd","fromCluster","toCluster","extractor","hasChildren","graphSettings","dir","rankdir","clusterGraph","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","sorter","result","Object","assign","sorted","sortNodesByHierarchy","rect","shapeSvg","insert","attr","class","rect2","useHtmlLabels","flowchart","htmlLabels","text","labelType","c","appendChild","bbox","getBBox","div","dv","getBoundingClientRect","width","height","halfPadding","diff","rx","ry","x","y","rectBox","intersect","point","i","noteGroup","roundedWithTitle","classes","innerRect","append","divider","shapes","clusterElems","insertCluster","elem","clear","recursiveRender","_elem","diagramtype","parentCluster","clusters","edgePaths","edgeLabels","o","newEl","u","s","p","paths","n","type","render","markers"],"sourceRoot":""}