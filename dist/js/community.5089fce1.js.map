{"version":3,"file":"js/community.5089fce1.js","mappings":"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","sources":["webpack://IDNCreaterPages/./public/availableNovels/111.txt","webpack://IDNCreaterPages/./src/views/CommunityView.vue","webpack://IDNCreaterPages/./firebaseConfig.js","webpack://IDNCreaterPages/./node_modules/@firebase/storage/dist/index.esm2017.js","webpack://IDNCreaterPages/./src/components/tutorials/CommunityTutorial.vue","webpack://IDNCreaterPages/./src/components/tutorials/CommunityTutorial.vue?af68","webpack://IDNCreaterPages/./src/views/CommunityView.vue?b2b4","webpack://IDNCreaterPages/./public/availableNovels/ sync \\.txt$","webpack://IDNCreaterPages/./node_modules/firebase/app/dist/esm/index.esm.js"],"sourcesContent":["export default \"Story Title: 111\\n[0] [ ] In a distant land, there was a country named Azeria with a majestic city called Altamia. [1]\\n\\n[1] [distant] In this distant era, various creatures thrived on this land, and a myriad of fantastical races coexisted in harmony. [2]\\n\\n[2] [creatures] There were humans, elves, dwarves, and other beings, each with their unique culture and skills, together creating a diverse world. [3]\\n\\n[1] [land] This land was known as \\\"Sarian,\\\" a place filled with mystery and adventure, attracting countless explorers. [4]\\n\\n[4] [adventurers] The adventurers made many like-minded friends and left numerous legendary tales on this land. [5]\\n\\n[5] [legendary] These legendary stories have been passed down to this day, becoming a topic of conversation among people and inspiring future generations to pursue their adventurous dreams. [6]\\n\\n[1] [country] Azeria was a powerful nation, with rulers who upheld fairness and justice, providing a happy life for the people. [7]\\n\\n[1] [city] Altamia, the capital of Azeria, was a paradise for adventurers and a hub for culture and commerce. [8]\\n\\n[8] [culture] In Altamia, adventurers could learn various knowledge and skills to prepare themselves for their journeys. [9]\\n\\n[2] [fantastical] In this fantastical world, magic and skills coexisted, and explorers made many new friends while pursuing their dreams. [10]\\n\\n[3] [humans] In the city of Altamia, humans lived peacefully alongside other races, all working together for the city's prosperity. [11]\\n\\n[11] [coexistence] This peaceful coexistence created an atmosphere of vitality and creativity in Altamia. [12]\\n\\n[12] [vitality] The bustling city of Altamia held various events daily, such as athletic competitions, concerts, and markets. [13]\\n\\n[3] [elves] The elves were famous for their elegant appearance and advanced magical abilities, playing important roles within the city of Altamia. [14]\\n\\n[14] [magic] Magic played a crucial role in Altamia's development, providing a powerful driving force for the city's growth. [15]\\n\\n[3] [dwarves] Dwarves excelled in forging and engineering, constructing many magnificent buildings and intricate devices in Altamia. [16]\\n\\n[16] [architecture] These buildings and devices became iconic landmarks in Altamia, attracting countless tourists for sightseeing. [17]\\n\\n[4] [Sarian] On the continent of Sarian, numerous unknown secrets awaited brave adventurers to discover. [18]\\n\\n[18] [secrets] These secrets included ancient ruins hidden in dense forests, mines buried within mountains, and treasures submerged at the bottom of lakes. [19]\\n\\n[5] [stories] These legendary tales were not only an inspiration for adventurers but also the spiritual pillar for everyone living on the continent of Sarian. [20]\\n\\n[20] [spiritual pillar] When people faced difficulties and setbacks, these stories encouraged them to face challenges bravely and keep moving forward. [21]\\n[21] [challenges] As people overcame these challenges, they became stronger and more united, sharing their experiences and wisdom with others. [22]\\n\\n[22] [stronger] The bonds between the diverse races and creatures grew stronger, fostering a sense of unity and shared purpose throughout the continent of Sarian. [23]\\n\\n[23] [unity] With unity came progress, as people from different backgrounds collaborated to create new inventions and develop their society. [24]\\n\\n[24] [inventions] These inventions revolutionized the way people lived, making life more comfortable and convenient for everyone on Sarian. [25]\\n\\n[25] [comfortable] As living conditions improved, the people of Sarian turned their focus to exploring the world around them and seeking greater knowledge. [26]\\n\\n[26] [knowledge] This thirst for knowledge led to the establishment of great libraries and academies, where people could learn and grow together. [27]\\n\\n[27] [libraries] These libraries housed vast collections of books and scrolls, covering a wide range of topics from history to magic, and from engineering to the arts. [28]\\n\\n[28] [history] The history of Sarian was filled with stories of heroes and heroines, of battles and alliances, and of the rise and fall of civilizations. [29]\\n\\n[29] [heroes] Among these heroes were legendary adventurers who had left their mark on the world, inspiring future generations to follow in their footsteps. [30]\\n\\n[30] [adventurers] Aspiring adventurers formed parties and set out on exciting journeys across the land, facing perilous trials and uncovering hidden secrets. [31]\\n\\n[31] [journeys] Each journey was unique, as adventurers encountered strange creatures, discovered ancient relics, and solved intricate puzzles to unlock the mysteries of Sarian. [32]\\n\\n[32] [mysteries] As these mysteries were gradually revealed, the people of Sarian gained a deeper understanding of their world and its rich history, leading them to appreciate the importance of cooperation and unity. [33]\\n\\n[33] [cooperation] Through cooperation, the people of Sarian built a harmonious society that thrived on the values of friendship, compassion, and mutual respect. [34]\\n\\n[34] [friendship] Friendships forged on the road of adventure became lifelong bonds, connecting people from all walks of life and transcending the boundaries of race and culture. [35]\\n\\n[35] [bonds] These bonds enriched the lives of everyone on Sarian, weaving a tapestry of shared experiences and stories that would be passed down through generations, forever shaping the legacy of this fantastical land. [36]\\n\\n[36] [tapestry] As the tapestry of shared experiences grew, so too did the world of Sarian, with new lands and regions being discovered by intrepid explorers. [37]\\n\\n[37] [new lands] These new lands brought with them unique challenges and opportunities, as well as the chance to encounter previously unknown races and creatures. [38]\\n\\n[38] [unknown races] Among the unknown races were the enigmatic Aquarians, who lived in harmony with the sea and had the ability to control water. [39]\\n\\n[39] [Aquarians] The Aquarians, with their incredible maritime knowledge, helped establish new trade routes, connecting distant lands and enriching the lives of all inhabitants of Sarian. [40]\\n\\n[40] [trade routes] The flourishing trade brought not only prosperity, but also an exchange of ideas, customs, and knowledge that further enriched the diverse cultures of Sarian. [41]\\n\\n[41] [exchange] This exchange of ideas led to the development of new magical techniques, groundbreaking technological advancements, and innovative artistic expressions. [42]\\n\\n[42] [magical techniques] Among these magical techniques was the ability to manipulate the elements, allowing people to control fire, earth, air, and water in ways never before imagined. [43]\\n\\n[43] [elements] Harnessing the power of the elements led to significant improvements in agriculture, industry, and transportation, as well as in the ways people protected themselves from natural disasters. [44]\\n\\n[44] [agriculture] With improved agriculture, the people of Sarian were able to cultivate a diverse range of crops, ensuring a steady food supply and paving the way for population growth. [45]\\n\\n[45] [population growth] As the population grew, so too did the demand for entertainment, leading to the rise of talented bards, playwrights, and performers who regaled audiences with tales of heroism and adventure. [46]\\n\\n[46] [entertainment] The shared enjoyment of entertainment further strengthened the bonds between people, as they laughed, cried, and marveled together at the stories unfolding before their eyes. [47]\\n\\n[47] [bonds] The strengthening of these bonds led to the formation of powerful alliances between the various races, ensuring that the people of Sarian could stand together in the face of adversity. [48]\\n\\n[48] [alliances] United in their determination to protect their homeland, the people of Sarian faced numerous challenges, from natural disasters to the rise of dark forces that threatened to engulf the world. [49]\\n\\n[49] [dark forces] These dark forces, led by a powerful sorcerer bent on conquering the world, brought destruction and chaos wherever they went, causing untold suffering and forcing the people of Sarian to take up arms in defense of their way of life. [50]\\n\\n[50] [sorcerer] To defeat the sorcerer and his minions, the heroes of Sarian had to embark on a perilous quest to discover ancient artifacts, unlock the secrets of lost magic, and forge new alliances with powerful allies. [51]\\n\\n[51] [ancient artifacts] The search for these ancient artifacts took the heroes to the far corners of Sarian, through treacherous dungeons, haunted forests, and even to the depths of the ocean, where they encountered wonders and dangers beyond their wildest imagination. [52]\\n\\n[52] [allies] Along the way, the heroes forged alliances with beings such as the wise and enigmatic dragons, who possessed vast knowledge and incredible power, and the valiant centaurs, renowned for their skill in battle. [53]\\n\\n[53] [dragons] With the aid of the dragons, the heroes were able to learn powerful new spells and unlock the potential of the ancient artifacts they had discovered, greatly enhancing their abilities in their fight against the sorcerer. [54]\\n\\n[54] [centaurs] The centaurs, with their unparalleled archery skills and unwavering loyalty, bolstered the heroes' forces, providing much-needed support on the battlefield. [55]\\n\\n[55] [battlefield] The final battle between the forces of good and the sorcerer's dark minions took place on a vast plain, with the fate of Sarian hanging in the balance. [56]\\n\\n[56] [fate] As the two sides clashed, the heroes unleashed the full power of the ancient artifacts, casting a brilliant light that pierced through the darkness and weakened the sorcerer's control over his minions. [57]\\n\\n[57] [light] With the tide of battle turning in their favor, the heroes fought valiantly, their newfound powers and steadfast allies giving them the strength to defeat the sorcerer and banish the dark forces from the land. [58]\\n\\n[58] [defeat] In the aftermath of the great battle, the people of Sarian came together to rebuild their world, using the knowledge, skills, and resources they had gained through their many adventures to create a brighter future for all. [59]\\n\\n[59] [rebuild] As they rebuilt their cities, towns, and villages, the people of Sarian also forged new friendships and strengthened their bonds, ensuring that their world would be more united and resilient than ever before. [60]\\n\\n[60] [friendships] The tales of heroism, sacrifice, and camaraderie that emerged from this epic struggle became an integral part of the ever-expanding tapestry of Sarian's history, inspiring future generations to embark on their own adventures and continue the legacy of the heroes who had come before them. [61]\\n\\n[61] [legacy] And so, the cycle of adventure, discovery, and growth continued, as the people of Sarian faced new challenges, uncovered new secrets, and forged new alliances, forever shaping the destiny of their magical world. [62]\\n\\n[3] [creatures] In this world, there were tales of a powerful artifact known as the Earthlock, said to have the ability to control the very ground beneath one's feet. [63]\\n\\n[3] [unique culture] Among the diverse cultures, there were those who had dedicated themselves to studying ancient magic, including the secrets of the Earthlock. [64]\\n\\n[3] [skills] Some skilled adventurers were rumored to possess the knowledge and abilities necessary to locate and wield the Earthlock, with the potential to reshape the world. [65]\\n\\n[63] [control] Those who could control the Earthlock had the power to prevent natural disasters or cause them, depending on their intentions. [66]\\n\\n[63] [ground] In order to utilize the Earthlock's power, one had to be deeply connected to the earth and possess an innate understanding of its energies. [67]\\n\\n[63] [beneath] The Earthlock was said to be hidden deep beneath the surface of Sarian, in a long-forgotten cavern protected by ancient magic. [68]\\n\\n[64] [studying] The scholars who studied the ancient magic of the Earthlock spent their lives deciphering cryptic texts and uncovering the secrets of the past. [69]\\n\\n[64] [ancient magic] The ancient magic related to the Earthlock involved manipulating the energies of the earth to achieve various effects, such as causing tremors or stabilizing tectonic plates. [70]\\n\\n[64] [secrets] Many of the secrets of the Earthlock had been lost to time, with only fragments of knowledge remaining in ancient texts and the memories of the oldest beings of Sarian. [71]\\n\\n[65] [locate] To locate the Earthlock, one would need to follow a series of cryptic clues and ancient maps, hidden in the most remote and dangerous corners of the world. [72]\\n\\n[65] [wield] Wielding the Earthlock required not only knowledge and skill, but also a strong sense of responsibility and a deep understanding of the potential consequences of its power. [73]\\n\\n[65] [reshape] With the power to reshape the world, the Earthlock had the potential to be used for great good or terrible evil, depending on the intentions of the one who controlled it. [74]\\n\\n[67] [connected] Alex, feeling a deep connection to the earth, believed he was destined to find the Earthlock and use its power for the greater good. [75]\\n\\n[67] [energies] In his journey, Alex learned to harness the energies of the earth, using them to enhance his abilities and overcome various challenges. [76]\\n\\n[67] [understanding] Alex's understanding of the earth's energies grew stronger as he studied ancient texts and sought the wisdom of experienced mentors. [77]\\n\\n[68] [cavern] The cavern housing the Earthlock was said to be a place of immense natural beauty, with crystalline formations reflecting the magical energies within. [78]\\n\\n[68] [protected] The protective magic surrounding the Earthlock's cavern included powerful wards that would repel intruders, as well as illusions to conceal its true location. [79]\\n\\n[68] [ancient] The ancient civilization that had hidden the Earthlock away had left behind cryptic warnings about the power of the artifact and the dangers of its misuse. [80]\\n\\n[69] [texts] The texts that Alex studied during his journey were written in a variety of languages and scripts, some of which had been all but forgotten over time. [81]\\n\\n[69] [secrets] As Alex unraveled the secrets of the Earthlock, he began to understand the true nature of the artifact and the responsibility that came with wielding it. [82]\\n\\n[69] [past] The history of the Earthlock was shrouded in mystery, with legends of great heroes and terrible villains who had once sought its power for their own ends. [83]\\n\\n[71] [knowledge] Alex discovered that the knowledge of the Earthlock was fragmented, with different pieces of information scattered among various races and cultures throughout Sarian. [84]\\n\\n[71] [ancient texts] Some of the ancient texts that contained information about the Earthlock were kept in hidden libraries, guarded by ancient orders sworn to protect their secrets. [85]\\n\\n[71] [memories] In his search for the Earthlock, Alex encountered powerful beings who had lived for centuries, their memories holding the key to unlocking the artifact's true potential. [86]\\n\\n\\n\";","<template>\n  <div class=\"community\"> \n    <CommunityTutorial></CommunityTutorial>\n    <header class=\"header\" v-if=\"store.btnToggle\">\n      <h1 class=\"h1\">Mulit-Author Interactive Novel Reader</h1>\n    </header>\n    <header class=\"header\">\n      <h2>Popular Novels</h2>\n      <button class=\"button\" @click=\"importFile()\">Submit</button>\n      <input type=\"file\" id=\"file-input\" style=\"display: none\" @change=\"onFileInputChange\">\n    </header>\n    <br />\n    <div class=\"novels-container\">\n\n      <div class=\"novel-item\" v-for=\"(novel, index) in this.novelStore.novels\" :key=\"novel.title\">\n        <div>\n          <router-link :to=\"{\n            name: 'reader',\n            query: { startReading: true },\n          }\" @click.prevent=\"readNovel(index)\">\n            <img :src=\"novel.cover\" :alt=\"novel.title\" class=\"novel-cover\" />\n          </router-link>\n        </div>\n        <h3>{{ novel.title }}</h3>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useNovelStore } from \"../stores/novelStore\";\nimport { useStore } from \"../stores/store\";\nimport { app } from \"../../firebaseConfig\";\nimport { getStorage, ref } from \"firebase/storage\";\nimport { uploadBytesResumable, getDownloadURL } from 'firebase/storage';\nimport { useUserStore } from '../stores/userStore'; \nimport CommunityTutorial from '../components/tutorials/CommunityTutorial.vue';\nexport default {\n  components: {\n    CommunityTutorial,\n},\n  setup() {\n    const novelStore = useNovelStore();\n    const store = useStore();\n    const user = useUserStore(); \n\n    const storage = getStorage(app);\n    const storageRef = ref(storage);\n    const imagesRef = ref(storageRef, 'Novels');\n    const fileName = 'Azeria.txt';\n    const spaceRef = ref(imagesRef, fileName);\n    const path = spaceRef.fullPath;\n    const name = spaceRef.name;\n    console.log(path, name);\n\n    return { user, store, novelStore };\n  },\n  data() {\n    const textFilesContext = require.context(\n      \"../../public/availableNovels/\",\n      true,\n      /\\.txt$/\n    );\n    const textFiles = textFilesContext.keys().map(textFilesContext);\n    return {\n      textFiles,\n    };\n  },\n  mounted() {\n    this.textFiles.forEach((textFileContent, index) => {\n      this.novelStore.setNovelContent(index, textFileContent);\n    });\n  },\n  methods: {\n    async uploadFileToFirebase(file) {\n      const storage = getStorage(app);\n      const storageRef = ref(storage, `Novels/${file.name}`);\n      const token = this.user.userInfo.token;\n      const uploadTask = uploadBytesResumable(storageRef, file, {\n        // 包含身份验证令牌的自定义元数据\n        customMetadata: {\n          'firebaseAuth': token,\n        }\n      });\n      uploadTask.on('state_changed',\n        (snapshot) => {\n          // Observe state change events such as progress, pause, and resume\n          // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log('Upload is ' + progress + '% done');\n          switch (snapshot.state) {\n            case 'paused':\n              console.log('Upload is paused');\n              break;\n            case 'running':\n              console.log('Upload is running');\n              break;\n            default:\n              break;\n          }\n        },\n        (error) => {\n          // Handle unsuccessful uploads\n          console.error('Upload failed:', error);\n          alert(\"上传到服务器失败，请检查是否在登录状态\")\n        },\n        async () => {\n          // Handle successful uploads on complete\n          const downloadURL = await getDownloadURL(storageRef);\n          console.log('File available at', downloadURL);\n          // Call a function to handle the file URL, e.g., save it in your database\n          // handleFileURL(downloadURL);\n        }\n      );\n    },\n\n    async readNovel(index) {\n      const novelContent = this.novelStore.novels[index].content;\n      const text = typeof novelContent === 'string' ? novelContent : novelContent.default;\n      console.log(text);\n      await this.novelStore.setCurrentNovel(text);\n      this.$router.push({\n        name: \"reader\",\n        query: {\n          startReading: true,\n        },\n      });\n    },\n\n    importFile() {\n      document.getElementById(\"file-input\").click();\n    },\n    onFileInputChange(event) {\n      const file = event.target.files[0];\n      this.uploadFileToFirebase(file); // 添加此行以上传文件到 Firebase Storage\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const text = event.target.result;\n        this.parseNovelText(text);\n      };\n      reader.readAsText(file);\n    },\n\n    parseNovelText(text) {\n      const lines = text.trim().split('\\n');\n      let title = '';\n      //let author = '';\n      //let content = '';\n      //let l = 0;\n      this.store.btnToggle = !this.store.btnToggle;\n      if (lines[0].startsWith('Story Title: ')) {\n        title = lines[0].slice(13);\n        this.novelStore.novels.push({\n          \"title\": title,\n          \"cover\": \"/availableNovels/111-cover.png\",\n          \"content\": text\n        })\n      } else {\n        alert(\"请导入此网站所使用格式的文本文件\")\n      }\n\n\n    }\n  },\n};\n</script>\n\n<style>\n.community {\n  text-align: left;\n}\n\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n}\n\n.novels-container {\n  margin-left: 5em;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: left;\n  gap: 16px;\n}\n\n.novel-item>div {\n  display: inline-block;\n  text-align: center;\n}\n\n.novel-cover {\n  width: 100px;\n  height: auto;\n}\n</style>\n","import { initializeApp } from \"firebase/app\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCVEr6ULFvAwmAmV3UMlu80kkY6BQ2ifDc\",\n  authDomain: \"idncreater.firebaseapp.com\",\n  projectId: \"idncreater\",\n  storageBucket: \"idncreater.appspot.com\",\n  messagingSenderId: \"760391243578\",\n  appId: \"1:760391243578:web:b2f6ed0bfba9f6c3952203\",\n  measurementId: \"G-R5JC1S3W1F\"\n};\n\nconst app = initializeApp(firebaseConfig);\n\nexport { app };\n","import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, isNode, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\r\n/**\r\n * Domain name for firebase storage.\r\n */\r\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\r\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\r\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\r\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\r\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\r\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\r\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\r\n/**\r\n * 1 second\r\n */\r\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\r\nclass StorageError extends FirebaseError {\r\n    /**\r\n     * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n     *  added to the end of the message.\r\n     * @param message  - Error message.\r\n     * @param status_ - Corresponding HTTP Status Code\r\n     */\r\n    constructor(code, message, status_ = 0) {\r\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\r\n        this.status_ = status_;\r\n        /**\r\n         * Stores custom error data unique to the `StorageError`.\r\n         */\r\n        this.customData = { serverResponse: null };\r\n        this._baseMessage = this.message;\r\n        // Without this, `instanceof StorageError`, in tests for example,\r\n        // returns false.\r\n        Object.setPrototypeOf(this, StorageError.prototype);\r\n    }\r\n    get status() {\r\n        return this.status_;\r\n    }\r\n    set status(status) {\r\n        this.status_ = status;\r\n    }\r\n    /**\r\n     * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n     */\r\n    _codeEquals(code) {\r\n        return prependCode(code) === this.code;\r\n    }\r\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\r\n    get serverResponse() {\r\n        return this.customData.serverResponse;\r\n    }\r\n    set serverResponse(serverResponse) {\r\n        this.customData.serverResponse = serverResponse;\r\n        if (this.customData.serverResponse) {\r\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\r\n        }\r\n        else {\r\n            this.message = this._baseMessage;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */\r\nvar StorageErrorCode;\r\n(function (StorageErrorCode) {\r\n    // Shared between all platforms\r\n    StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\r\n    StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\r\n    StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\r\n    StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\r\n    StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\r\n    StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\r\n    StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\r\n    StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\r\n    StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\r\n    StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\r\n    StorageErrorCode[\"CANCELED\"] = \"canceled\";\r\n    // JS specific\r\n    StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\r\n    StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\r\n    StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\r\n    StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\r\n    StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\r\n    StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\r\n    StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\r\n    StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\r\n    StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\r\n    StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\r\n    StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\r\n    StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\r\n})(StorageErrorCode || (StorageErrorCode = {}));\r\nfunction prependCode(code) {\r\n    return 'storage/' + code;\r\n}\r\nfunction unknown() {\r\n    const message = 'An unknown error occurred, please check the error payload for ' +\r\n        'server response.';\r\n    return new StorageError(StorageErrorCode.UNKNOWN, message);\r\n}\r\nfunction objectNotFound(path) {\r\n    return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\r\n}\r\nfunction quotaExceeded(bucket) {\r\n    return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" +\r\n        bucket +\r\n        \"' exceeded, please view quota on \" +\r\n        'https://firebase.google.com/pricing/.');\r\n}\r\nfunction unauthenticated() {\r\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\r\n        'Authentication and try again.';\r\n    return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\r\n}\r\nfunction unauthorizedApp() {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\r\n}\r\nfunction unauthorized(path) {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\r\n}\r\nfunction retryLimitExceeded() {\r\n    return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\r\n}\r\nfunction canceled() {\r\n    return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\r\n}\r\nfunction invalidUrl(url) {\r\n    return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\r\n}\r\nfunction invalidDefaultBucket(bucket) {\r\n    return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\r\n}\r\nfunction noDefaultBucket() {\r\n    return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' +\r\n        \"found. Did you set the '\" +\r\n        CONFIG_STORAGE_BUCKET_KEY +\r\n        \"' property when initializing the app?\");\r\n}\r\nfunction cannotSliceBlob() {\r\n    return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\r\n}\r\nfunction serverFileWrongSize() {\r\n    return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\r\n}\r\nfunction noDownloadURL() {\r\n    return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\r\n}\r\nfunction missingPolyFill(polyFill) {\r\n    return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction invalidArgument(message) {\r\n    return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\r\n}\r\nfunction appDeleted() {\r\n    return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\r\n}\r\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\r\nfunction invalidRootOperation(name) {\r\n    return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" +\r\n        name +\r\n        \"' cannot be performed on a root reference, create a non-root \" +\r\n        \"reference using child, such as .child('file.png').\");\r\n}\r\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\r\nfunction invalidFormat(format, message) {\r\n    return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\r\n}\r\n/**\r\n * @param message - A message describing the internal error.\r\n */\r\nfunction internalError(message) {\r\n    throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\r\nclass Location {\r\n    constructor(bucket, path) {\r\n        this.bucket = bucket;\r\n        this.path_ = path;\r\n    }\r\n    get path() {\r\n        return this.path_;\r\n    }\r\n    get isRoot() {\r\n        return this.path.length === 0;\r\n    }\r\n    fullServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\r\n    }\r\n    bucketOnlyServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o';\r\n    }\r\n    static makeFromBucketSpec(bucketString, host) {\r\n        let bucketLocation;\r\n        try {\r\n            bucketLocation = Location.makeFromUrl(bucketString, host);\r\n        }\r\n        catch (e) {\r\n            // Not valid URL, use as-is. This lets you put bare bucket names in\r\n            // config.\r\n            return new Location(bucketString, '');\r\n        }\r\n        if (bucketLocation.path === '') {\r\n            return bucketLocation;\r\n        }\r\n        else {\r\n            throw invalidDefaultBucket(bucketString);\r\n        }\r\n    }\r\n    static makeFromUrl(url, host) {\r\n        let location = null;\r\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\r\n        function gsModify(loc) {\r\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\r\n                loc.path_ = loc.path_.slice(0, -1);\r\n            }\r\n        }\r\n        const gsPath = '(/(.*))?$';\r\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\r\n        const gsIndices = { bucket: 1, path: 3 };\r\n        function httpModify(loc) {\r\n            loc.path_ = decodeURIComponent(loc.path);\r\n        }\r\n        const version = 'v[A-Za-z0-9_]+';\r\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\r\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\r\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\r\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\r\n        const cloudStorageHost = host === DEFAULT_HOST\r\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\r\n            : host;\r\n        const cloudStoragePath = '([^?#]*)';\r\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\r\n        const cloudStorageIndices = { bucket: 1, path: 2 };\r\n        const groups = [\r\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\r\n            {\r\n                regex: firebaseStorageRegExp,\r\n                indices: firebaseStorageIndices,\r\n                postModify: httpModify\r\n            },\r\n            {\r\n                regex: cloudStorageRegExp,\r\n                indices: cloudStorageIndices,\r\n                postModify: httpModify\r\n            }\r\n        ];\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const group = groups[i];\r\n            const captures = group.regex.exec(url);\r\n            if (captures) {\r\n                const bucketValue = captures[group.indices.bucket];\r\n                let pathValue = captures[group.indices.path];\r\n                if (!pathValue) {\r\n                    pathValue = '';\r\n                }\r\n                location = new Location(bucketValue, pathValue);\r\n                group.postModify(location);\r\n                break;\r\n            }\r\n        }\r\n        if (location == null) {\r\n            throw invalidUrl(url);\r\n        }\r\n        return location;\r\n    }\r\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\r\nclass FailRequest {\r\n    constructor(error) {\r\n        this.promise_ = Promise.reject(error);\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(_appDelete = false) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\r\nfunction start(doRequest, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nbackoffCompleteCb, timeout) {\r\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\r\n    // type instead of a bunch of functions with state shared in the closure)\r\n    let waitSeconds = 1;\r\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\r\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let retryTimeoutId = null;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let globalTimeoutId = null;\r\n    let hitTimeout = false;\r\n    let cancelState = 0;\r\n    function canceled() {\r\n        return cancelState === 2;\r\n    }\r\n    let triggeredCallback = false;\r\n    function triggerCallback(...args) {\r\n        if (!triggeredCallback) {\r\n            triggeredCallback = true;\r\n            backoffCompleteCb.apply(null, args);\r\n        }\r\n    }\r\n    function callWithDelay(millis) {\r\n        retryTimeoutId = setTimeout(() => {\r\n            retryTimeoutId = null;\r\n            doRequest(responseHandler, canceled());\r\n        }, millis);\r\n    }\r\n    function clearGlobalTimeout() {\r\n        if (globalTimeoutId) {\r\n            clearTimeout(globalTimeoutId);\r\n        }\r\n    }\r\n    function responseHandler(success, ...args) {\r\n        if (triggeredCallback) {\r\n            clearGlobalTimeout();\r\n            return;\r\n        }\r\n        if (success) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        const mustStop = canceled() || hitTimeout;\r\n        if (mustStop) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        if (waitSeconds < 64) {\r\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\r\n            waitSeconds *= 2;\r\n        }\r\n        let waitMillis;\r\n        if (cancelState === 1) {\r\n            cancelState = 2;\r\n            waitMillis = 0;\r\n        }\r\n        else {\r\n            waitMillis = (waitSeconds + Math.random()) * 1000;\r\n        }\r\n        callWithDelay(waitMillis);\r\n    }\r\n    let stopped = false;\r\n    function stop(wasTimeout) {\r\n        if (stopped) {\r\n            return;\r\n        }\r\n        stopped = true;\r\n        clearGlobalTimeout();\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (retryTimeoutId !== null) {\r\n            if (!wasTimeout) {\r\n                cancelState = 2;\r\n            }\r\n            clearTimeout(retryTimeoutId);\r\n            callWithDelay(0);\r\n        }\r\n        else {\r\n            if (!wasTimeout) {\r\n                cancelState = 1;\r\n            }\r\n        }\r\n    }\r\n    callWithDelay(0);\r\n    globalTimeoutId = setTimeout(() => {\r\n        hitTimeout = true;\r\n        stop(true);\r\n    }, timeout);\r\n    return stop;\r\n}\r\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\r\nfunction stop(id) {\r\n    id(false);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isJustDef(p) {\r\n    return p !== void 0;\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction isFunction(p) {\r\n    return typeof p === 'function';\r\n}\r\nfunction isNonArrayObject(p) {\r\n    return typeof p === 'object' && !Array.isArray(p);\r\n}\r\nfunction isString(p) {\r\n    return typeof p === 'string' || p instanceof String;\r\n}\r\nfunction isNativeBlob(p) {\r\n    return isNativeBlobDefined() && p instanceof Blob;\r\n}\r\nfunction isNativeBlobDefined() {\r\n    // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\r\n    // PR: https://github.com/node-fetch/node-fetch/pull/1664\r\n    return typeof Blob !== 'undefined' && !isNode();\r\n}\r\nfunction validateNumber(argument, minValue, maxValue, value) {\r\n    if (value < minValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\r\n    }\r\n    if (value > maxValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction makeUrl(urlPart, host, protocol) {\r\n    let origin = host;\r\n    if (protocol == null) {\r\n        origin = `https://${host}`;\r\n    }\r\n    return `${protocol}://${origin}/v0${urlPart}`;\r\n}\r\nfunction makeQueryString(params) {\r\n    const encode = encodeURIComponent;\r\n    let queryPart = '?';\r\n    for (const key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n            const nextPart = encode(key) + '=' + encode(params[key]);\r\n            queryPart = queryPart + nextPart + '&';\r\n        }\r\n    }\r\n    // Chop off the extra '&' or '?' on the end\r\n    queryPart = queryPart.slice(0, -1);\r\n    return queryPart;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\r\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\r\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\r\nfunction isRetryStatusCode(status, additionalRetryCodes) {\r\n    // The codes for which to retry came from this page:\r\n    // https://cloud.google.com/storage/docs/exponential-backoff\r\n    const isFiveHundredCode = status >= 500 && status < 600;\r\n    const extraRetryCodes = [\r\n        // Request Timeout: web server didn't receive full request in time.\r\n        408,\r\n        // Too Many Requests: you're getting rate-limited, basically.\r\n        429\r\n    ];\r\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\r\n    const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\r\n    return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\r\nclass NetworkRequest {\r\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {\r\n        this.url_ = url_;\r\n        this.method_ = method_;\r\n        this.headers_ = headers_;\r\n        this.body_ = body_;\r\n        this.successCodes_ = successCodes_;\r\n        this.additionalRetryCodes_ = additionalRetryCodes_;\r\n        this.callback_ = callback_;\r\n        this.errorCallback_ = errorCallback_;\r\n        this.timeout_ = timeout_;\r\n        this.progressCallback_ = progressCallback_;\r\n        this.connectionFactory_ = connectionFactory_;\r\n        this.retry = retry;\r\n        this.pendingConnection_ = null;\r\n        this.backoffId_ = null;\r\n        this.canceled_ = false;\r\n        this.appDelete_ = false;\r\n        this.promise_ = new Promise((resolve, reject) => {\r\n            this.resolve_ = resolve;\r\n            this.reject_ = reject;\r\n            this.start_();\r\n        });\r\n    }\r\n    /**\r\n     * Actually starts the retry loop.\r\n     */\r\n    start_() {\r\n        const doTheRequest = (backoffCallback, canceled) => {\r\n            if (canceled) {\r\n                backoffCallback(false, new RequestEndStatus(false, null, true));\r\n                return;\r\n            }\r\n            const connection = this.connectionFactory_();\r\n            this.pendingConnection_ = connection;\r\n            const progressListener = progressEvent => {\r\n                const loaded = progressEvent.loaded;\r\n                const total = progressEvent.lengthComputable ? progressEvent.total : -1;\r\n                if (this.progressCallback_ !== null) {\r\n                    this.progressCallback_(loaded, total);\r\n                }\r\n            };\r\n            if (this.progressCallback_ !== null) {\r\n                connection.addUploadProgressListener(progressListener);\r\n            }\r\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            connection\r\n                .send(this.url_, this.method_, this.body_, this.headers_)\r\n                .then(() => {\r\n                if (this.progressCallback_ !== null) {\r\n                    connection.removeUploadProgressListener(progressListener);\r\n                }\r\n                this.pendingConnection_ = null;\r\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\r\n                const status = connection.getStatus();\r\n                if (!hitServer ||\r\n                    (isRetryStatusCode(status, this.additionalRetryCodes_) &&\r\n                        this.retry)) {\r\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\r\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\r\n                    return;\r\n                }\r\n                const successCode = this.successCodes_.indexOf(status) !== -1;\r\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\r\n            });\r\n        };\r\n        /**\r\n         * @param requestWentThrough - True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\r\n        const backoffDone = (requestWentThrough, status) => {\r\n            const resolve = this.resolve_;\r\n            const reject = this.reject_;\r\n            const connection = status.connection;\r\n            if (status.wasSuccessCode) {\r\n                try {\r\n                    const result = this.callback_(connection, connection.getResponse());\r\n                    if (isJustDef(result)) {\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n            else {\r\n                if (connection !== null) {\r\n                    const err = unknown();\r\n                    err.serverResponse = connection.getErrorText();\r\n                    if (this.errorCallback_) {\r\n                        reject(this.errorCallback_(connection, err));\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                }\r\n                else {\r\n                    if (status.canceled) {\r\n                        const err = this.appDelete_ ? appDeleted() : canceled();\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        const err = retryLimitExceeded();\r\n                        reject(err);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (this.canceled_) {\r\n            backoffDone(false, new RequestEndStatus(false, null, true));\r\n        }\r\n        else {\r\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(appDelete) {\r\n        this.canceled_ = true;\r\n        this.appDelete_ = appDelete || false;\r\n        if (this.backoffId_ !== null) {\r\n            stop(this.backoffId_);\r\n        }\r\n        if (this.pendingConnection_ !== null) {\r\n            this.pendingConnection_.abort();\r\n        }\r\n    }\r\n}\r\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\r\nclass RequestEndStatus {\r\n    constructor(wasSuccessCode, connection, canceled) {\r\n        this.wasSuccessCode = wasSuccessCode;\r\n        this.connection = connection;\r\n        this.canceled = !!canceled;\r\n    }\r\n}\r\nfunction addAuthHeader_(headers, authToken) {\r\n    if (authToken !== null && authToken.length > 0) {\r\n        headers['Authorization'] = 'Firebase ' + authToken;\r\n    }\r\n}\r\nfunction addVersionHeader_(headers, firebaseVersion) {\r\n    headers['X-Firebase-Storage-Version'] =\r\n        'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\r\n}\r\nfunction addGmpidHeader_(headers, appId) {\r\n    if (appId) {\r\n        headers['X-Firebase-GMPID'] = appId;\r\n    }\r\n}\r\nfunction addAppCheckHeader_(headers, appCheckToken) {\r\n    if (appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = appCheckToken;\r\n    }\r\n}\r\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\r\n    const queryPart = makeQueryString(requestInfo.urlParams);\r\n    const url = requestInfo.url + queryPart;\r\n    const headers = Object.assign({}, requestInfo.headers);\r\n    addGmpidHeader_(headers, appId);\r\n    addAuthHeader_(headers, authToken);\r\n    addVersionHeader_(headers, firebaseVersion);\r\n    addAppCheckHeader_(headers, appCheckToken);\r\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getBlobBuilder() {\r\n    if (typeof BlobBuilder !== 'undefined') {\r\n        return BlobBuilder;\r\n    }\r\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\r\n        return WebKitBlobBuilder;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\r\nfunction getBlob$1(...args) {\r\n    const BlobBuilder = getBlobBuilder();\r\n    if (BlobBuilder !== undefined) {\r\n        const bb = new BlobBuilder();\r\n        for (let i = 0; i < args.length; i++) {\r\n            bb.append(args[i]);\r\n        }\r\n        return bb.getBlob();\r\n    }\r\n    else {\r\n        if (isNativeBlobDefined()) {\r\n            return new Blob(args);\r\n        }\r\n        else {\r\n            throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\r\nfunction sliceBlob(blob, start, end) {\r\n    if (blob.webkitSlice) {\r\n        return blob.webkitSlice(start, end);\r\n    }\r\n    else if (blob.mozSlice) {\r\n        return blob.mozSlice(start, end);\r\n    }\r\n    else if (blob.slice) {\r\n        return blob.slice(start, end);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Converts a Base64 encoded string to a binary string. */\r\nfunction decodeBase64(encoded) {\r\n    if (typeof atob === 'undefined') {\r\n        throw missingPolyFill('base-64');\r\n    }\r\n    return atob(encoded);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\r\nconst StringFormat = {\r\n    /**\r\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n     * sequence.\r\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n     */\r\n    RAW: 'raw',\r\n    /**\r\n     * Indicates the string should be interpreted as base64-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64: 'base64',\r\n    /**\r\n     * Indicates the string should be interpreted as base64url-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64URL: 'base64url',\r\n    /**\r\n     * Indicates the string is a data URL, such as one obtained from\r\n     * canvas.toDataURL().\r\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n     * becomes the byte sequence\r\n     * 69 a6 9a\r\n     * (the content-type \"application/octet-stream\" is also applied, but can\r\n     * be overridden in the metadata object).\r\n     */\r\n    DATA_URL: 'data_url'\r\n};\r\nclass StringData {\r\n    constructor(data, contentType) {\r\n        this.data = data;\r\n        this.contentType = contentType || null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction dataFromString(format, stringData) {\r\n    switch (format) {\r\n        case StringFormat.RAW:\r\n            return new StringData(utf8Bytes_(stringData));\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n            return new StringData(base64Bytes_(format, stringData));\r\n        case StringFormat.DATA_URL:\r\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\r\n        // do nothing\r\n    }\r\n    // assert(false);\r\n    throw unknown();\r\n}\r\nfunction utf8Bytes_(value) {\r\n    const b = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n        let c = value.charCodeAt(i);\r\n        if (c <= 127) {\r\n            b.push(c);\r\n        }\r\n        else {\r\n            if (c <= 2047) {\r\n                b.push(192 | (c >> 6), 128 | (c & 63));\r\n            }\r\n            else {\r\n                if ((c & 64512) === 55296) {\r\n                    // The start of a surrogate pair.\r\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\r\n                    if (!valid) {\r\n                        // The second surrogate wasn't there.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        const hi = c;\r\n                        const lo = value.charCodeAt(++i);\r\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\r\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n                else {\r\n                    if ((c & 64512) === 56320) {\r\n                        // Invalid low surrogate.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Uint8Array(b);\r\n}\r\nfunction percentEncodedBytes_(value) {\r\n    let decoded;\r\n    try {\r\n        decoded = decodeURIComponent(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\r\n    }\r\n    return utf8Bytes_(decoded);\r\n}\r\nfunction base64Bytes_(format, value) {\r\n    switch (format) {\r\n        case StringFormat.BASE64: {\r\n            const hasMinus = value.indexOf('-') !== -1;\r\n            const hasUnder = value.indexOf('_') !== -1;\r\n            if (hasMinus || hasUnder) {\r\n                const invalidChar = hasMinus ? '-' : '_';\r\n                throw invalidFormat(format, \"Invalid character '\" +\r\n                    invalidChar +\r\n                    \"' found: is it base64url encoded?\");\r\n            }\r\n            break;\r\n        }\r\n        case StringFormat.BASE64URL: {\r\n            const hasPlus = value.indexOf('+') !== -1;\r\n            const hasSlash = value.indexOf('/') !== -1;\r\n            if (hasPlus || hasSlash) {\r\n                const invalidChar = hasPlus ? '+' : '/';\r\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\r\n            }\r\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\r\n            break;\r\n        }\r\n        // do nothing\r\n    }\r\n    let bytes;\r\n    try {\r\n        bytes = decodeBase64(value);\r\n    }\r\n    catch (e) {\r\n        if (e.message.includes('polyfill')) {\r\n            throw e;\r\n        }\r\n        throw invalidFormat(format, 'Invalid character found');\r\n    }\r\n    const array = new Uint8Array(bytes.length);\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        array[i] = bytes.charCodeAt(i);\r\n    }\r\n    return array;\r\n}\r\nclass DataURLParts {\r\n    constructor(dataURL) {\r\n        this.base64 = false;\r\n        this.contentType = null;\r\n        const matches = dataURL.match(/^data:([^,]+)?,/);\r\n        if (matches === null) {\r\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\r\n        }\r\n        const middle = matches[1] || null;\r\n        if (middle != null) {\r\n            this.base64 = endsWith(middle, ';base64');\r\n            this.contentType = this.base64\r\n                ? middle.substring(0, middle.length - ';base64'.length)\r\n                : middle;\r\n        }\r\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\r\n    }\r\n}\r\nfunction dataURLBytes_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    if (parts.base64) {\r\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\r\n    }\r\n    else {\r\n        return percentEncodedBytes_(parts.rest);\r\n    }\r\n}\r\nfunction dataURLContentType_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    return parts.contentType;\r\n}\r\nfunction endsWith(s, end) {\r\n    const longEnough = s.length >= end.length;\r\n    if (!longEnough) {\r\n        return false;\r\n    }\r\n    return s.substring(s.length - end.length) === end;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\r\nclass FbsBlob {\r\n    constructor(data, elideCopy) {\r\n        let size = 0;\r\n        let blobType = '';\r\n        if (isNativeBlob(data)) {\r\n            this.data_ = data;\r\n            size = data.size;\r\n            blobType = data.type;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            if (elideCopy) {\r\n                this.data_ = new Uint8Array(data);\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.byteLength);\r\n                this.data_.set(new Uint8Array(data));\r\n            }\r\n            size = this.data_.length;\r\n        }\r\n        else if (data instanceof Uint8Array) {\r\n            if (elideCopy) {\r\n                this.data_ = data;\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.length);\r\n                this.data_.set(data);\r\n            }\r\n            size = data.length;\r\n        }\r\n        this.size_ = size;\r\n        this.type_ = blobType;\r\n    }\r\n    size() {\r\n        return this.size_;\r\n    }\r\n    type() {\r\n        return this.type_;\r\n    }\r\n    slice(startByte, endByte) {\r\n        if (isNativeBlob(this.data_)) {\r\n            const realBlob = this.data_;\r\n            const sliced = sliceBlob(realBlob, startByte, endByte);\r\n            if (sliced === null) {\r\n                return null;\r\n            }\r\n            return new FbsBlob(sliced);\r\n        }\r\n        else {\r\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\r\n            return new FbsBlob(slice, true);\r\n        }\r\n    }\r\n    static getBlob(...args) {\r\n        if (isNativeBlobDefined()) {\r\n            const blobby = args.map((val) => {\r\n                if (val instanceof FbsBlob) {\r\n                    return val.data_;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            });\r\n            return new FbsBlob(getBlob$1.apply(null, blobby));\r\n        }\r\n        else {\r\n            const uint8Arrays = args.map((val) => {\r\n                if (isString(val)) {\r\n                    return dataFromString(StringFormat.RAW, val).data;\r\n                }\r\n                else {\r\n                    // Blobs don't exist, so this has to be a Uint8Array.\r\n                    return val.data_;\r\n                }\r\n            });\r\n            let finalLength = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                finalLength += array.byteLength;\r\n            });\r\n            const merged = new Uint8Array(finalLength);\r\n            let index = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                for (let i = 0; i < array.length; i++) {\r\n                    merged[index++] = array[i];\r\n                }\r\n            });\r\n            return new FbsBlob(merged, true);\r\n        }\r\n    }\r\n    uploadData() {\r\n        return this.data_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\r\nfunction jsonObjectOrNull(s) {\r\n    let obj;\r\n    try {\r\n        obj = JSON.parse(s);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    if (isNonArrayObject(obj)) {\r\n        return obj;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\r\n/**\r\n * @return Null if the path is already at the root.\r\n */\r\nfunction parent(path) {\r\n    if (path.length === 0) {\r\n        return null;\r\n    }\r\n    const index = path.lastIndexOf('/');\r\n    if (index === -1) {\r\n        return '';\r\n    }\r\n    const newPath = path.slice(0, index);\r\n    return newPath;\r\n}\r\nfunction child(path, childPath) {\r\n    const canonicalChildPath = childPath\r\n        .split('/')\r\n        .filter(component => component.length > 0)\r\n        .join('/');\r\n    if (path.length === 0) {\r\n        return canonicalChildPath;\r\n    }\r\n    else {\r\n        return path + '/' + canonicalChildPath;\r\n    }\r\n}\r\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\r\nfunction lastComponent(path) {\r\n    const index = path.lastIndexOf('/', path.length - 2);\r\n    if (index === -1) {\r\n        return path;\r\n    }\r\n    else {\r\n        return path.slice(index + 1);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction noXform_(metadata, value) {\r\n    return value;\r\n}\r\nclass Mapping {\r\n    constructor(server, local, writable, xform) {\r\n        this.server = server;\r\n        this.local = local || server;\r\n        this.writable = !!writable;\r\n        this.xform = xform || noXform_;\r\n    }\r\n}\r\nlet mappings_ = null;\r\nfunction xformPath(fullPath) {\r\n    if (!isString(fullPath) || fullPath.length < 2) {\r\n        return fullPath;\r\n    }\r\n    else {\r\n        return lastComponent(fullPath);\r\n    }\r\n}\r\nfunction getMappings() {\r\n    if (mappings_) {\r\n        return mappings_;\r\n    }\r\n    const mappings = [];\r\n    mappings.push(new Mapping('bucket'));\r\n    mappings.push(new Mapping('generation'));\r\n    mappings.push(new Mapping('metageneration'));\r\n    mappings.push(new Mapping('name', 'fullPath', true));\r\n    function mappingsXformPath(_metadata, fullPath) {\r\n        return xformPath(fullPath);\r\n    }\r\n    const nameMapping = new Mapping('name');\r\n    nameMapping.xform = mappingsXformPath;\r\n    mappings.push(nameMapping);\r\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\r\n    function xformSize(_metadata, size) {\r\n        if (size !== undefined) {\r\n            return Number(size);\r\n        }\r\n        else {\r\n            return size;\r\n        }\r\n    }\r\n    const sizeMapping = new Mapping('size');\r\n    sizeMapping.xform = xformSize;\r\n    mappings.push(sizeMapping);\r\n    mappings.push(new Mapping('timeCreated'));\r\n    mappings.push(new Mapping('updated'));\r\n    mappings.push(new Mapping('md5Hash', null, true));\r\n    mappings.push(new Mapping('cacheControl', null, true));\r\n    mappings.push(new Mapping('contentDisposition', null, true));\r\n    mappings.push(new Mapping('contentEncoding', null, true));\r\n    mappings.push(new Mapping('contentLanguage', null, true));\r\n    mappings.push(new Mapping('contentType', null, true));\r\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\r\n    mappings_ = mappings;\r\n    return mappings_;\r\n}\r\nfunction addRef(metadata, service) {\r\n    function generateRef() {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const loc = new Location(bucket, path);\r\n        return service._makeStorageReference(loc);\r\n    }\r\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\r\n}\r\nfunction fromResource(service, resource, mappings) {\r\n    const metadata = {};\r\n    metadata['type'] = 'file';\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\r\n    }\r\n    addRef(metadata, service);\r\n    return metadata;\r\n}\r\nfunction fromResourceString(service, resourceString, mappings) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromResource(service, resource, mappings);\r\n}\r\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (!isString(obj['downloadTokens'])) {\r\n        // This can happen if objects are uploaded through GCS and retrieved\r\n        // through list, so we don't want to throw an Error.\r\n        return null;\r\n    }\r\n    const tokens = obj['downloadTokens'];\r\n    if (tokens.length === 0) {\r\n        return null;\r\n    }\r\n    const encode = encodeURIComponent;\r\n    const tokensList = tokens.split(',');\r\n    const urls = tokensList.map((token) => {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\r\n        const base = makeUrl(urlPart, host, protocol);\r\n        const queryString = makeQueryString({\r\n            alt: 'media',\r\n            token\r\n        });\r\n        return base + queryString;\r\n    });\r\n    return urls[0];\r\n}\r\nfunction toResourceString(metadata, mappings) {\r\n    const resource = {};\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        if (mapping.writable) {\r\n            resource[mapping.server] = metadata[mapping.local];\r\n        }\r\n    }\r\n    return JSON.stringify(resource);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PREFIXES_KEY = 'prefixes';\r\nconst ITEMS_KEY = 'items';\r\nfunction fromBackendResponse(service, bucket, resource) {\r\n    const listResult = {\r\n        prefixes: [],\r\n        items: [],\r\n        nextPageToken: resource['nextPageToken']\r\n    };\r\n    if (resource[PREFIXES_KEY]) {\r\n        for (const path of resource[PREFIXES_KEY]) {\r\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\r\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\r\n            listResult.prefixes.push(reference);\r\n        }\r\n    }\r\n    if (resource[ITEMS_KEY]) {\r\n        for (const item of resource[ITEMS_KEY]) {\r\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\r\n            listResult.items.push(reference);\r\n        }\r\n    }\r\n    return listResult;\r\n}\r\nfunction fromResponseString(service, bucket, resourceString) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromBackendResponse(service, bucket, resource);\r\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\r\nclass RequestInfo {\r\n    constructor(url, method, \r\n    /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */\r\n    handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\r\nfunction handlerCheck(cndn) {\r\n    if (!cndn) {\r\n        throw unknown();\r\n    }\r\n}\r\nfunction metadataHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return metadata;\r\n    }\r\n    return handler;\r\n}\r\nfunction listHandler(service, bucket) {\r\n    function handler(xhr, text) {\r\n        const listResult = fromResponseString(service, bucket, text);\r\n        handlerCheck(listResult !== null);\r\n        return listResult;\r\n    }\r\n    return handler;\r\n}\r\nfunction downloadUrlHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\r\n    }\r\n    return handler;\r\n}\r\nfunction sharedErrorHandler(location) {\r\n    function errorHandler(xhr, err) {\r\n        let newErr;\r\n        if (xhr.getStatus() === 401) {\r\n            if (\r\n            // This exact message string is the only consistent part of the\r\n            // server's error response that identifies it as an App Check error.\r\n            xhr.getErrorText().includes('Firebase App Check token is invalid')) {\r\n                newErr = unauthorizedApp();\r\n            }\r\n            else {\r\n                newErr = unauthenticated();\r\n            }\r\n        }\r\n        else {\r\n            if (xhr.getStatus() === 402) {\r\n                newErr = quotaExceeded(location.bucket);\r\n            }\r\n            else {\r\n                if (xhr.getStatus() === 403) {\r\n                    newErr = unauthorized(location.path);\r\n                }\r\n                else {\r\n                    newErr = err;\r\n                }\r\n            }\r\n        }\r\n        newErr.status = xhr.getStatus();\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction objectErrorHandler(location) {\r\n    const shared = sharedErrorHandler(location);\r\n    function errorHandler(xhr, err) {\r\n        let newErr = shared(xhr, err);\r\n        if (xhr.getStatus() === 404) {\r\n            newErr = objectNotFound(location.path);\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction getMetadata$2(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\r\n    const urlParams = {};\r\n    if (location.isRoot) {\r\n        urlParams['prefix'] = '';\r\n    }\r\n    else {\r\n        urlParams['prefix'] = location.path + '/';\r\n    }\r\n    if (delimiter && delimiter.length > 0) {\r\n        urlParams['delimiter'] = delimiter;\r\n    }\r\n    if (pageToken) {\r\n        urlParams['pageToken'] = pageToken;\r\n    }\r\n    if (maxResults) {\r\n        urlParams['maxResults'] = maxResults;\r\n    }\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    if (maxDownloadSizeBytes !== undefined) {\r\n        requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\r\n        requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\r\n    }\r\n    return requestInfo;\r\n}\r\nfunction getDownloadUrl(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction updateMetadata$2(service, location, metadata, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'PATCH';\r\n    const body = toResourceString(metadata, mappings);\r\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction deleteObject$2(service, location) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'DELETE';\r\n    const timeout = service.maxOperationRetryTime;\r\n    function handler(_xhr, _text) { }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.successCodes = [200, 204];\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction determineContentType_(metadata, blob) {\r\n    return ((metadata && metadata['contentType']) ||\r\n        (blob && blob.type()) ||\r\n        'application/octet-stream');\r\n}\r\nfunction metadataForUpload_(location, blob, metadata) {\r\n    const metadataClone = Object.assign({}, metadata);\r\n    metadataClone['fullPath'] = location.path;\r\n    metadataClone['size'] = blob.size();\r\n    if (!metadataClone['contentType']) {\r\n        metadataClone['contentType'] = determineContentType_(null, blob);\r\n    }\r\n    return metadataClone;\r\n}\r\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\r\nfunction multipartUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'multipart'\r\n    };\r\n    function genBoundary() {\r\n        let str = '';\r\n        for (let i = 0; i < 2; i++) {\r\n            str = str + Math.random().toString().slice(2);\r\n        }\r\n        return str;\r\n    }\r\n    const boundary = genBoundary();\r\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\r\n    const metadata_ = metadataForUpload_(location, blob, metadata);\r\n    const metadataString = toResourceString(metadata_, mappings);\r\n    const preBlobPart = '--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\r\n        metadataString +\r\n        '\\r\\n--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: ' +\r\n        metadata_['contentType'] +\r\n        '\\r\\n\\r\\n';\r\n    const postBlobPart = '\\r\\n--' + boundary + '--';\r\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    const urlParams = { name: metadata_['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\r\nclass ResumableUploadStatus {\r\n    constructor(current, total, finalized, metadata) {\r\n        this.current = current;\r\n        this.total = total;\r\n        this.finalized = !!finalized;\r\n        this.metadata = metadata || null;\r\n    }\r\n}\r\nfunction checkResumeHeader_(xhr, allowed) {\r\n    let status = null;\r\n    try {\r\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\r\n    }\r\n    catch (e) {\r\n        handlerCheck(false);\r\n    }\r\n    const allowedStatus = allowed || ['active'];\r\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\r\n    return status;\r\n}\r\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\r\n    const urlParams = { name: metadataForUpload['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'resumable',\r\n        'X-Goog-Upload-Command': 'start',\r\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\r\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    };\r\n    const body = toResourceString(metadataForUpload, mappings);\r\n    const timeout = service.maxUploadRetryTime;\r\n    function handler(xhr) {\r\n        checkResumeHeader_(xhr);\r\n        let url;\r\n        try {\r\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        handlerCheck(isString(url));\r\n        return url;\r\n    }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\r\nfunction getResumableUploadStatus(service, location, url, blob) {\r\n    const headers = { 'X-Goog-Upload-Command': 'query' };\r\n    function handler(xhr) {\r\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\r\n        let sizeString = null;\r\n        try {\r\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        if (!sizeString) {\r\n            // null or empty string\r\n            handlerCheck(false);\r\n        }\r\n        const size = Number(sizeString);\r\n        handlerCheck(!isNaN(size));\r\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\r\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\r\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\r\n    // TODO(andysoto): standardize on internal asserts\r\n    // assert(!(opt_status && opt_status.finalized));\r\n    const status_ = new ResumableUploadStatus(0, 0);\r\n    if (status) {\r\n        status_.current = status.current;\r\n        status_.total = status.total;\r\n    }\r\n    else {\r\n        status_.current = 0;\r\n        status_.total = blob.size();\r\n    }\r\n    if (blob.size() !== status_.total) {\r\n        throw serverFileWrongSize();\r\n    }\r\n    const bytesLeft = status_.total - status_.current;\r\n    let bytesToUpload = bytesLeft;\r\n    if (chunkSize > 0) {\r\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\r\n    }\r\n    const startByte = status_.current;\r\n    const endByte = startByte + bytesToUpload;\r\n    let uploadCommand = '';\r\n    if (bytesToUpload === 0) {\r\n        uploadCommand = 'finalize';\r\n    }\r\n    else if (bytesLeft === bytesToUpload) {\r\n        uploadCommand = 'upload, finalize';\r\n    }\r\n    else {\r\n        uploadCommand = 'upload';\r\n    }\r\n    const headers = {\r\n        'X-Goog-Upload-Command': uploadCommand,\r\n        'X-Goog-Upload-Offset': `${status_.current}`\r\n    };\r\n    const body = blob.slice(startByte, endByte);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    function handler(xhr, text) {\r\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\r\n        // the 'x-range-md5' header comes back with status code 308 responses.\r\n        // We'll only be able to bail out though, because you can't re-upload a\r\n        // range that you previously uploaded.\r\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\r\n        const newCurrent = status_.current + bytesToUpload;\r\n        const size = blob.size();\r\n        let metadata;\r\n        if (uploadStatus === 'final') {\r\n            metadata = metadataHandler(service, mappings)(xhr, text);\r\n        }\r\n        else {\r\n            metadata = null;\r\n        }\r\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.progressCallback = progressCallback || null;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\r\nconst TaskEvent = {\r\n    /**\r\n     * For this event,\r\n     * <ul>\r\n     *   <li>The `next` function is triggered on progress updates and when the\r\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n     *       argument.</li>\r\n     *   <li>The `error` function is triggered if the upload is canceled or fails\r\n     *       for another reason.</li>\r\n     *   <li>The `complete` function is triggered if the upload completes\r\n     *       successfully.</li>\r\n     * </ul>\r\n     */\r\n    STATE_CHANGED: 'state_changed'\r\n};\r\n// type keys = keyof TaskState\r\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\r\nconst TaskState = {\r\n    /** The task is currently transferring data. */\r\n    RUNNING: 'running',\r\n    /** The task was paused by the user. */\r\n    PAUSED: 'paused',\r\n    /** The task completed successfully. */\r\n    SUCCESS: 'success',\r\n    /** The task was canceled. */\r\n    CANCELED: 'canceled',\r\n    /** The task failed with an error. */\r\n    ERROR: 'error'\r\n};\r\nfunction taskStateFromInternalTaskState(state) {\r\n    switch (state) {\r\n        case \"running\" /* InternalTaskState.RUNNING */:\r\n        case \"pausing\" /* InternalTaskState.PAUSING */:\r\n        case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            return TaskState.RUNNING;\r\n        case \"paused\" /* InternalTaskState.PAUSED */:\r\n            return TaskState.PAUSED;\r\n        case \"success\" /* InternalTaskState.SUCCESS */:\r\n            return TaskState.SUCCESS;\r\n        case \"canceled\" /* InternalTaskState.CANCELED */:\r\n            return TaskState.CANCELED;\r\n        case \"error\" /* InternalTaskState.ERROR */:\r\n            return TaskState.ERROR;\r\n        default:\r\n            // TODO(andysoto): assert(false);\r\n            return TaskState.ERROR;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Observer {\r\n    constructor(nextOrObserver, error, complete) {\r\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\r\n        if (asFunctions) {\r\n            this.next = nextOrObserver;\r\n            this.error = error !== null && error !== void 0 ? error : undefined;\r\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\r\n        }\r\n        else {\r\n            const observer = nextOrObserver;\r\n            this.next = observer.next;\r\n            this.error = observer.error;\r\n            this.complete = observer.complete;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(f) {\r\n    return (...argsToForward) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.resolve().then(() => f(...argsToForward));\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** An override for the text-based Connection. Used in tests. */\r\nlet textFactoryOverride = null;\r\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\r\nclass XhrConnection {\r\n    constructor() {\r\n        this.sent_ = false;\r\n        this.xhr_ = new XMLHttpRequest();\r\n        this.initXhr();\r\n        this.errorCode_ = ErrorCode.NO_ERROR;\r\n        this.sendPromise_ = new Promise(resolve => {\r\n            this.xhr_.addEventListener('abort', () => {\r\n                this.errorCode_ = ErrorCode.ABORT;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('error', () => {\r\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('load', () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    send(url, method, body, headers) {\r\n        if (this.sent_) {\r\n            throw internalError('cannot .send() more than once');\r\n        }\r\n        this.sent_ = true;\r\n        this.xhr_.open(method, url, true);\r\n        if (headers !== undefined) {\r\n            for (const key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\r\n                }\r\n            }\r\n        }\r\n        if (body !== undefined) {\r\n            this.xhr_.send(body);\r\n        }\r\n        else {\r\n            this.xhr_.send();\r\n        }\r\n        return this.sendPromise_;\r\n    }\r\n    getErrorCode() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorCode() before sending');\r\n        }\r\n        return this.errorCode_;\r\n    }\r\n    getStatus() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getStatus() before sending');\r\n        }\r\n        try {\r\n            return this.xhr_.status;\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    getResponse() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getResponse() before sending');\r\n        }\r\n        return this.xhr_.response;\r\n    }\r\n    getErrorText() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorText() before sending');\r\n        }\r\n        return this.xhr_.statusText;\r\n    }\r\n    /** Aborts the request. */\r\n    abort() {\r\n        this.xhr_.abort();\r\n    }\r\n    getResponseHeader(header) {\r\n        return this.xhr_.getResponseHeader(header);\r\n    }\r\n    addUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.addEventListener('progress', listener);\r\n        }\r\n    }\r\n    removeUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.removeEventListener('progress', listener);\r\n        }\r\n    }\r\n}\r\nclass XhrTextConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'text';\r\n    }\r\n}\r\nfunction newTextConnection() {\r\n    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\r\n}\r\nclass XhrBytesConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'arraybuffer';\r\n    }\r\n}\r\nfunction newBytesConnection() {\r\n    return new XhrBytesConnection();\r\n}\r\nclass XhrBlobConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'blob';\r\n    }\r\n}\r\nfunction newBlobConnection() {\r\n    return new XhrBlobConnection();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\r\nclass UploadTask {\r\n    /**\r\n     * @param ref - The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob - The blob to upload.\r\n     */\r\n    constructor(ref, blob, metadata = null) {\r\n        /**\r\n         * Number of bytes transferred so far.\r\n         */\r\n        this._transferred = 0;\r\n        this._needToFetchStatus = false;\r\n        this._needToFetchMetadata = false;\r\n        this._observers = [];\r\n        this._error = undefined;\r\n        this._uploadUrl = undefined;\r\n        this._request = undefined;\r\n        this._chunkMultiplier = 1;\r\n        this._resolve = undefined;\r\n        this._reject = undefined;\r\n        this._ref = ref;\r\n        this._blob = blob;\r\n        this._metadata = metadata;\r\n        this._mappings = getMappings();\r\n        this._resumable = this._shouldDoResumable(this._blob);\r\n        this._state = \"running\" /* InternalTaskState.RUNNING */;\r\n        this._errorHandler = error => {\r\n            this._request = undefined;\r\n            this._chunkMultiplier = 1;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this._needToFetchStatus = true;\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                const backoffExpired = this.isExponentialBackoffExpired();\r\n                if (isRetryStatusCode(error.status, [])) {\r\n                    if (backoffExpired) {\r\n                        error = retryLimitExceeded();\r\n                    }\r\n                    else {\r\n                        this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\r\n                        this._needToFetchStatus = true;\r\n                        this.completeTransitions_();\r\n                        return;\r\n                    }\r\n                }\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this._metadataErrorHandler = error => {\r\n            this._request = undefined;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this.sleepTime = 0;\r\n        this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\r\n        this._promise = new Promise((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n            this._start();\r\n        });\r\n        // Prevent uncaught rejections on the internal promise from bubbling out\r\n        // to the top level with a dummy handler.\r\n        this._promise.then(null, () => { });\r\n    }\r\n    isExponentialBackoffExpired() {\r\n        return this.sleepTime > this.maxSleepTime;\r\n    }\r\n    _makeProgressCallback() {\r\n        const sizeBefore = this._transferred;\r\n        return loaded => this._updateProgress(sizeBefore + loaded);\r\n    }\r\n    _shouldDoResumable(blob) {\r\n        return blob.size() > 256 * 1024;\r\n    }\r\n    _start() {\r\n        if (this._state !== \"running\" /* InternalTaskState.RUNNING */) {\r\n            // This can happen if someone pauses us in a resume callback, for example.\r\n            return;\r\n        }\r\n        if (this._request !== undefined) {\r\n            return;\r\n        }\r\n        if (this._resumable) {\r\n            if (this._uploadUrl === undefined) {\r\n                this._createResumable();\r\n            }\r\n            else {\r\n                if (this._needToFetchStatus) {\r\n                    this._fetchStatus();\r\n                }\r\n                else {\r\n                    if (this._needToFetchMetadata) {\r\n                        // Happens if we miss the metadata on upload completion.\r\n                        this._fetchMetadata();\r\n                    }\r\n                    else {\r\n                        this.pendingTimeout = setTimeout(() => {\r\n                            this.pendingTimeout = undefined;\r\n                            this._continueUpload();\r\n                        }, this.sleepTime);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._oneShotUpload();\r\n        }\r\n    }\r\n    _resolveToken(callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.all([\r\n            this._ref.storage._getAuthToken(),\r\n            this._ref.storage._getAppCheckToken()\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            switch (this._state) {\r\n                case \"running\" /* InternalTaskState.RUNNING */:\r\n                    callback(authToken, appCheckToken);\r\n                    break;\r\n                case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                    this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                    break;\r\n                case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                    this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    // TODO(andysoto): assert false\r\n    _createResumable() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = createRequest;\r\n            createRequest.getPromise().then((url) => {\r\n                this._request = undefined;\r\n                this._uploadUrl = url;\r\n                this._needToFetchStatus = false;\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _fetchStatus() {\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\r\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = statusRequest;\r\n            statusRequest.getPromise().then(status => {\r\n                status = status;\r\n                this._request = undefined;\r\n                this._updateProgress(status.current);\r\n                this._needToFetchStatus = false;\r\n                if (status.finalized) {\r\n                    this._needToFetchMetadata = true;\r\n                }\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _continueUpload() {\r\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            let requestInfo;\r\n            try {\r\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\r\n            }\r\n            catch (e) {\r\n                this._error = e;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n                return;\r\n            }\r\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, \r\n            /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\r\n            );\r\n            this._request = uploadRequest;\r\n            uploadRequest.getPromise().then((newStatus) => {\r\n                this._increaseMultiplier();\r\n                this._request = undefined;\r\n                this._updateProgress(newStatus.current);\r\n                if (newStatus.finalized) {\r\n                    this._metadata = newStatus.metadata;\r\n                    this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n                }\r\n                else {\r\n                    this.completeTransitions_();\r\n                }\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _increaseMultiplier() {\r\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        // Max chunk size is 32M.\r\n        if (currentSize * 2 < 32 * 1024 * 1024) {\r\n            this._chunkMultiplier *= 2;\r\n        }\r\n    }\r\n    _fetchMetadata() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\r\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = metadataRequest;\r\n            metadataRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._metadataErrorHandler);\r\n        });\r\n    }\r\n    _oneShotUpload() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = multipartRequest;\r\n            multipartRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._updateProgress(this._blob.size());\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _updateProgress(transferred) {\r\n        const old = this._transferred;\r\n        this._transferred = transferred;\r\n        // A progress update can make the \"transferred\" value smaller (e.g. a\r\n        // partial upload not completed by server, after which the \"transferred\"\r\n        // value may reset to the value at the beginning of the request).\r\n        if (this._transferred !== old) {\r\n            this._notifyObservers();\r\n        }\r\n    }\r\n    _transition(state) {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                else if (this.pendingTimeout) {\r\n                    clearTimeout(this.pendingTimeout);\r\n                    this.pendingTimeout = undefined;\r\n                    this.completeTransitions_();\r\n                }\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                const wasPaused = this._state === \"paused\" /* InternalTaskState.PAUSED */;\r\n                this._state = state;\r\n                if (wasPaused) {\r\n                    this._notifyObservers();\r\n                    this._start();\r\n                }\r\n                break;\r\n            case \"paused\" /* InternalTaskState.PAUSED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"canceled\" /* InternalTaskState.CANCELED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._error = canceled();\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"error\" /* InternalTaskState.ERROR */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"success\" /* InternalTaskState.SUCCESS */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n        }\r\n    }\r\n    completeTransitions_() {\r\n        switch (this._state) {\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                break;\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                this._start();\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * A snapshot of the current task state.\r\n     */\r\n    get snapshot() {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        return {\r\n            bytesTransferred: this._transferred,\r\n            totalBytes: this._blob.size(),\r\n            state: externalState,\r\n            metadata: this._metadata,\r\n            task: this,\r\n            ref: this._ref\r\n        };\r\n    }\r\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\r\n    on(type, nextOrObserver, error, completed) {\r\n        // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\r\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\r\n        this._addObserver(observer);\r\n        return () => {\r\n            this._removeObserver(observer);\r\n        };\r\n    }\r\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        // These casts are needed so that TypeScript can infer the types of the\r\n        // resulting Promise.\r\n        return this._promise.then(onFulfilled, onRejected);\r\n    }\r\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(null, onRejected);\r\n    }\r\n    /**\r\n     * Adds the given observer.\r\n     */\r\n    _addObserver(observer) {\r\n        this._observers.push(observer);\r\n        this._notifyObserver(observer);\r\n    }\r\n    /**\r\n     * Removes the given observer.\r\n     */\r\n    _removeObserver(observer) {\r\n        const i = this._observers.indexOf(observer);\r\n        if (i !== -1) {\r\n            this._observers.splice(i, 1);\r\n        }\r\n    }\r\n    _notifyObservers() {\r\n        this._finishPromise();\r\n        const observers = this._observers.slice();\r\n        observers.forEach(observer => {\r\n            this._notifyObserver(observer);\r\n        });\r\n    }\r\n    _finishPromise() {\r\n        if (this._resolve !== undefined) {\r\n            let triggered = true;\r\n            switch (taskStateFromInternalTaskState(this._state)) {\r\n                case TaskState.SUCCESS:\r\n                    async(this._resolve.bind(null, this.snapshot))();\r\n                    break;\r\n                case TaskState.CANCELED:\r\n                case TaskState.ERROR:\r\n                    const toCall = this._reject;\r\n                    async(toCall.bind(null, this._error))();\r\n                    break;\r\n                default:\r\n                    triggered = false;\r\n                    break;\r\n            }\r\n            if (triggered) {\r\n                this._resolve = undefined;\r\n                this._reject = undefined;\r\n            }\r\n        }\r\n    }\r\n    _notifyObserver(observer) {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        switch (externalState) {\r\n            case TaskState.RUNNING:\r\n            case TaskState.PAUSED:\r\n                if (observer.next) {\r\n                    async(observer.next.bind(observer, this.snapshot))();\r\n                }\r\n                break;\r\n            case TaskState.SUCCESS:\r\n                if (observer.complete) {\r\n                    async(observer.complete.bind(observer))();\r\n                }\r\n                break;\r\n            case TaskState.CANCELED:\r\n            case TaskState.ERROR:\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    resume() {\r\n        const valid = this._state === \"paused\" /* InternalTaskState.PAUSED */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"running\" /* InternalTaskState.RUNNING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    pause() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */;\r\n        if (valid) {\r\n            this._transition(\"pausing\" /* InternalTaskState.PAUSING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    cancel() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"canceling\" /* InternalTaskState.CANCELING */);\r\n        }\r\n        return valid;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\r\nclass Reference {\r\n    constructor(_service, location) {\r\n        this._service = _service;\r\n        if (location instanceof Location) {\r\n            this._location = location;\r\n        }\r\n        else {\r\n            this._location = Location.makeFromUrl(location, _service.host);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\r\n    toString() {\r\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\r\n    }\r\n    _newRef(service, location) {\r\n        return new Reference(service, location);\r\n    }\r\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\r\n    get root() {\r\n        const location = new Location(this._location.bucket, '');\r\n        return this._newRef(this._service, location);\r\n    }\r\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\r\n    get bucket() {\r\n        return this._location.bucket;\r\n    }\r\n    /**\r\n     * The full path of this object.\r\n     */\r\n    get fullPath() {\r\n        return this._location.path;\r\n    }\r\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\r\n    get name() {\r\n        return lastComponent(this._location.path);\r\n    }\r\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\r\n    get storage() {\r\n        return this._service;\r\n    }\r\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\r\n    get parent() {\r\n        const newPath = parent(this._location.path);\r\n        if (newPath === null) {\r\n            return null;\r\n        }\r\n        const location = new Location(this._location.bucket, newPath);\r\n        return new Reference(this._service, location);\r\n    }\r\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\r\n    _throwIfRoot(name) {\r\n        if (this._location.path === '') {\r\n            throw invalidRootOperation(name);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\r\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBytes');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBytesConnection)\r\n        .then(bytes => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            bytes.slice(0, maxDownloadSizeBytes)\r\n        : bytes);\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\r\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBlob');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBlobConnection)\r\n        .then(blob => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            blob.slice(0, maxDownloadSizeBytes)\r\n        : blob);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytes');\r\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(finalMetadata => {\r\n        return {\r\n            metadata: finalMetadata,\r\n            ref\r\n        };\r\n    });\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytesResumable');\r\n    return new UploadTask(ref, new FbsBlob(data), metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\r\n    ref._throwIfRoot('uploadString');\r\n    const data = dataFromString(format, value);\r\n    const metadataClone = Object.assign({}, metadata);\r\n    if (metadataClone['contentType'] == null && data.contentType != null) {\r\n        metadataClone['contentType'] = data.contentType;\r\n    }\r\n    return uploadBytes$1(ref, data.data, metadataClone);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll$1(ref) {\r\n    const accumulator = {\r\n        prefixes: [],\r\n        items: []\r\n    };\r\n    return listAllHelper(ref, accumulator).then(() => accumulator);\r\n}\r\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\r\nasync function listAllHelper(ref, accumulator, pageToken) {\r\n    const opt = {\r\n        // maxResults is 1000 by default.\r\n        pageToken\r\n    };\r\n    const nextPage = await list$1(ref, opt);\r\n    accumulator.prefixes.push(...nextPage.prefixes);\r\n    accumulator.items.push(...nextPage.items);\r\n    if (nextPage.nextPageToken != null) {\r\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\r\n    }\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list$1(ref, options) {\r\n    if (options != null) {\r\n        if (typeof options.maxResults === 'number') {\r\n            validateNumber('options.maxResults', \r\n            /* minValue= */ 1, \r\n            /* maxValue= */ 1000, options.maxResults);\r\n        }\r\n    }\r\n    const op = options || {};\r\n    const requestInfo = list$2(ref.storage, ref._location, \r\n    /*delimiter= */ '/', op.pageToken, op.maxResults);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\r\nfunction getMetadata$1(ref) {\r\n    ref._throwIfRoot('getMetadata');\r\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\r\nfunction updateMetadata$1(ref, metadata) {\r\n    ref._throwIfRoot('updateMetadata');\r\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL$1(ref) {\r\n    ref._throwIfRoot('getDownloadURL');\r\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(url => {\r\n        if (url === null) {\r\n            throw noDownloadURL();\r\n        }\r\n        return url;\r\n    });\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject$1(ref) {\r\n    ref._throwIfRoot('deleteObject');\r\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\r\nfunction _getChild$1(ref, childPath) {\r\n    const newPath = child(ref._location.path, childPath);\r\n    const location = new Location(ref._location.bucket, newPath);\r\n    return new Reference(ref.storage, location);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\r\nfunction refFromURL(service, url) {\r\n    return new Reference(service, url);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\r\nfunction refFromPath(ref, path) {\r\n    if (ref instanceof FirebaseStorageImpl) {\r\n        const service = ref;\r\n        if (service._bucket == null) {\r\n            throw noDefaultBucket();\r\n        }\r\n        const reference = new Reference(service, service._bucket);\r\n        if (path != null) {\r\n            return refFromPath(reference, path);\r\n        }\r\n        else {\r\n            return reference;\r\n        }\r\n    }\r\n    else {\r\n        // ref is a Reference\r\n        if (path !== undefined) {\r\n            return _getChild$1(ref, path);\r\n        }\r\n        else {\r\n            return ref;\r\n        }\r\n    }\r\n}\r\nfunction ref$1(serviceOrRef, pathOrUrl) {\r\n    if (pathOrUrl && isUrl(pathOrUrl)) {\r\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\r\n            return refFromURL(serviceOrRef, pathOrUrl);\r\n        }\r\n        else {\r\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\r\n        }\r\n    }\r\n    else {\r\n        return refFromPath(serviceOrRef, pathOrUrl);\r\n    }\r\n}\r\nfunction extractBucket(host, config) {\r\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\r\n    if (bucketString == null) {\r\n        return null;\r\n    }\r\n    return Location.makeFromBucketSpec(bucketString, host);\r\n}\r\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\r\n    storage.host = `${host}:${port}`;\r\n    storage._protocol = 'http';\r\n    const { mockUserToken } = options;\r\n    if (mockUserToken) {\r\n        storage._overrideAuthToken =\r\n            typeof mockUserToken === 'string'\r\n                ? mockUserToken\r\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\r\n    }\r\n}\r\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\r\nclass FirebaseStorageImpl {\r\n    constructor(\r\n    /**\r\n     * FirebaseApp associated with this StorageService instance.\r\n     */\r\n    app, _authProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _appCheckProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _url, _firebaseVersion) {\r\n        this.app = app;\r\n        this._authProvider = _authProvider;\r\n        this._appCheckProvider = _appCheckProvider;\r\n        this._url = _url;\r\n        this._firebaseVersion = _firebaseVersion;\r\n        this._bucket = null;\r\n        /**\r\n         * This string can be in the formats:\r\n         * - host\r\n         * - host:port\r\n         */\r\n        this._host = DEFAULT_HOST;\r\n        this._protocol = 'https';\r\n        this._appId = null;\r\n        this._deleted = false;\r\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\r\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\r\n        this._requests = new Set();\r\n        if (_url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(this._host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The host string for this service, in the form of `host` or\r\n     * `host:port`.\r\n     */\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(host) {\r\n        this._host = host;\r\n        if (this._url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\r\n    get maxUploadRetryTime() {\r\n        return this._maxUploadRetryTime;\r\n    }\r\n    set maxUploadRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxUploadRetryTime = time;\r\n    }\r\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\r\n    get maxOperationRetryTime() {\r\n        return this._maxOperationRetryTime;\r\n    }\r\n    set maxOperationRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxOperationRetryTime = time;\r\n    }\r\n    async _getAuthToken() {\r\n        if (this._overrideAuthToken) {\r\n            return this._overrideAuthToken;\r\n        }\r\n        const auth = this._authProvider.getImmediate({ optional: true });\r\n        if (auth) {\r\n            const tokenData = await auth.getToken();\r\n            if (tokenData !== null) {\r\n                return tokenData.accessToken;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async _getAppCheckToken() {\r\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\r\n        if (appCheck) {\r\n            const result = await appCheck.getToken();\r\n            // TODO: What do we want to do if there is an error getting the token?\r\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\r\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\r\n    _delete() {\r\n        if (!this._deleted) {\r\n            this._deleted = true;\r\n            this._requests.forEach(request => request.cancel());\r\n            this._requests.clear();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\r\n    _makeStorageReference(loc) {\r\n        return new Reference(this, loc);\r\n    }\r\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\r\n    _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\r\n        if (!this._deleted) {\r\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\r\n            this._requests.add(request);\r\n            // Request removes itself from set when complete.\r\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\r\n            return request;\r\n        }\r\n        else {\r\n            return new FailRequest(appDeleted());\r\n        }\r\n    }\r\n    async makeRequestWithTokens(requestInfo, requestFactory) {\r\n        const [authToken, appCheckToken] = await Promise.all([\r\n            this._getAuthToken(),\r\n            this._getAppCheckToken()\r\n        ]);\r\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\r\n    }\r\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.11.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\r\nfunction getBytes(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBytesInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytes$1(ref, data, metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString(ref, value, format, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadString$1(ref, value, format, metadata);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytesResumable$1(ref, data, metadata);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\r\nfunction getMetadata(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getMetadata$1(ref);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\r\nfunction updateMetadata(ref, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return updateMetadata$1(ref, metadata);\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list(ref, options) {\r\n    ref = getModularInstance(ref);\r\n    return list$1(ref, options);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll(ref) {\r\n    ref = getModularInstance(ref);\r\n    return listAll$1(ref);\r\n}\r\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getDownloadURL$1(ref);\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject(ref) {\r\n    ref = getModularInstance(ref);\r\n    return deleteObject$1(ref);\r\n}\r\nfunction ref(serviceOrRef, pathOrUrl) {\r\n    serviceOrRef = getModularInstance(serviceOrRef);\r\n    return ref$1(serviceOrRef, pathOrUrl);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction _getChild(ref, childPath) {\r\n    return _getChild$1(ref, childPath);\r\n}\r\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\r\nfunction getStorage(app = getApp(), bucketUrl) {\r\n    app = getModularInstance(app);\r\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\r\n    const storageInstance = storageProvider.getImmediate({\r\n        identifier: bucketUrl\r\n    });\r\n    const emulator = getDefaultEmulatorHostnameAndPort('storage');\r\n    if (emulator) {\r\n        connectStorageEmulator(storageInstance, ...emulator);\r\n    }\r\n    return storageInstance;\r\n}\r\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\r\nfunction connectStorageEmulator(storage, host, port, options = {}) {\r\n    connectStorageEmulator$1(storage, host, port, options);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\r\nfunction getBlob(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBlobInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\r\nfunction getStream(ref, maxDownloadSizeBytes) {\r\n    throw new Error('getStream() is only supported by NodeJS builds');\r\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    const app = container.getProvider('app').getImmediate();\r\n    const authProvider = container.getProvider('auth-internal');\r\n    const appCheckProvider = container.getProvider('app-check-internal');\r\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\r\n}\r\nfunction registerStorage() {\r\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\r\n    registerVersion(name, version, '');\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\r\nregisterStorage();\n\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n//# sourceMappingURL=index.esm2017.js.map\n","<template>\n    <transition name=\"fade\">\n      <div v-if=\"this.store.tutorialToggle\" class=\"tutorial\">\n        <div class=\"tutorial-item\">\n          <button class=\"button\">Submit</button>\n          <p>从本地提交一个符合此网站格式的故事到community，该文件需要先登录才能上传到服务器</p>\n        </div>\n        \n        <div class=\"tutorial-item\">\n          <button class=\"preScene-btn\">⬅️</button>\n          <p>点击这个按钮可以返回到上一个关键词所在的段落。</p>\n        </div>\n      </div>\n    </transition>\n  </template>\n<script>\nimport { useStore } from '../../stores/store';\n\nexport default {\n  setup() {\n    const store = useStore();\n    return { store };\n  },\n};\n</script>\n  ","import { render } from \"./CommunityTutorial.vue?vue&type=template&id=58a44efe\"\nimport script from \"./CommunityTutorial.vue?vue&type=script&lang=js\"\nexport * from \"./CommunityTutorial.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/tggs636/Desktop/IDNCreater/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./CommunityView.vue?vue&type=template&id=227f6cc7\"\nimport script from \"./CommunityView.vue?vue&type=script&lang=js\"\nexport * from \"./CommunityView.vue?vue&type=script&lang=js\"\n\nimport \"./CommunityView.vue?vue&type=style&index=0&id=227f6cc7&lang=css\"\n\nimport exportComponent from \"/Users/tggs636/Desktop/IDNCreater/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","var map = {\n\t\"./111.txt\": 1344\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2135;","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"9.20.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n"],"names":["class","_createElementVNode","_hoisted_3","_createElementBlock","_hoisted_1","_createVNode","_component_CommunityTutorial","$setup","btnToggle","_hoisted_2","_hoisted_5","_hoisted_6","onClick","$options","type","id","style","onChange","_hoisted_7","_hoisted_8","_Fragment","novelStore","novels","novel","index","key","title","_component_router_link","to","src","cover","alt","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","initializeApp","DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","DEFAULT_MIN_SLEEP_TIME_MILLIS","StorageError","constructor","code","message","status_","super","prependCode","this","customData","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","status","_codeEquals","StorageErrorCode","ErrorCode","unknown","UNKNOWN","objectNotFound","path","OBJECT_NOT_FOUND","quotaExceeded","bucket","QUOTA_EXCEEDED","unauthenticated","UNAUTHENTICATED","unauthorizedApp","UNAUTHORIZED_APP","unauthorized","UNAUTHORIZED","retryLimitExceeded","RETRY_LIMIT_EXCEEDED","canceled","CANCELED","invalidUrl","url","INVALID_URL","invalidDefaultBucket","INVALID_DEFAULT_BUCKET","noDefaultBucket","NO_DEFAULT_BUCKET","cannotSliceBlob","CANNOT_SLICE_BLOB","serverFileWrongSize","SERVER_FILE_WRONG_SIZE","noDownloadURL","NO_DOWNLOAD_URL","missingPolyFill","polyFill","UNSUPPORTED_ENVIRONMENT","invalidArgument","INVALID_ARGUMENT","appDeleted","APP_DELETED","invalidRootOperation","name","INVALID_ROOT_OPERATION","invalidFormat","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","Location","path_","isRoot","length","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","static","bucketString","host","bucketLocation","makeFromUrl","e","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","getPromise","cancel","_appDelete","start","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","hasOwnProperty","nextPart","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","indexOf","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","wasCanceled","ABORT","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponse","err","getErrorText","appDelete","abort","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","method","body","successCodes","handler","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob$1","undefined","bb","append","getBlob","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","includes","array","DataURLParts","dataURL","base64","matches","match","middle","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","uploadData","jsonObjectOrNull","obj","JSON","parse","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","toResourceString","stringify","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","objectErrorHandler","shared","getMetadata$2","maxOperationRetryTime","getDownloadUrl","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","toString","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","TaskState","RUNNING","PAUSED","SUCCESS","ERROR","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","asFunctions","next","observer","f","argsToForward","textFactoryOverride","XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","backoffExpired","isExponentialBackoffExpired","sleepTime","max","_transition","_metadataErrorHandler","maxSleepTime","storage","_promise","_start","_makeProgressCallback","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","pendingTimeout","_continueUpload","_oneShotUpload","_resolveToken","callback","all","_getAuthToken","_getAppCheckToken","_location","createRequest","_makeRequest","statusRequest","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","snapshot","externalState","bytesTransferred","totalBytes","task","on","completed","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_notifyObserver","splice","_finishPromise","observers","triggered","bind","toCall","resume","pause","Reference","_service","_newRef","root","parent","_throwIfRoot","uploadBytesResumable$1","getDownloadURL$1","makeRequestWithTokens","_getChild$1","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","reference","ref$1","serviceOrRef","pathOrUrl","extractBucket","config","makeFromBucketSpec","connectStorageEmulator$1","port","options","mockUserToken","_overrideAuthToken","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","async","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","_delete","request","clear","add","delete","STORAGE_TYPE","uploadBytesResumable","getDownloadURL","getStorage","getApp","bucketUrl","storageProvider","_getProvider","storageInstance","identifier","emulator","connectStorageEmulator","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","registerStorage","_registerComponent","setMultipleInstances","registerVersion","_createBlock","_Transition","store","tutorialToggle","setup","useStore","__exports__","components","CommunityTutorial","useNovelStore","user","useUserStore","storageRef","imagesRef","fileName","spaceRef","console","log","textFilesContext","require","textFiles","keys","mounted","textFileContent","setNovelContent","methods","file","userInfo","uploadTask","customMetadata","progress","alert","downloadURL","novelContent","content","default","setCurrentNovel","$router","query","startReading","importFile","document","getElementById","click","onFileInputChange","event","target","files","uploadFileToFirebase","reader","FileReader","onload","parseNovelText","readAsText","lines","trim","startsWith","render","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","module","exports"],"sourceRoot":""}