{"version":3,"file":"js/801.16374d0b.js","mappings":"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","sources":["webpack://IDNCreaterPages/../src/diagrams/state/id-cache.js","webpack://IDNCreaterPages/../src/diagrams/state/shapes.js","webpack://IDNCreaterPages/../src/diagrams/state/stateRenderer.js","webpack://IDNCreaterPages/../src/diagrams/state/stateDiagram.ts"],"sourcesContent":["const idCache = {};\n\nexport const set = (key, val) => {\n  idCache[key] = val;\n};\n\nexport const get = (k) => idCache[k];\nexport const keys = () => Object.keys(idCache);\nexport const size = () => keys().length;\n\nexport default {\n  get,\n  set,\n  keys,\n  size,\n};\n","import { line, curveBasis } from 'd3';\nimport idCache from './id-cache.js';\nimport stateDb from './stateDb';\nimport utils from '../../utils';\nimport common from '../common/common';\nimport { getConfig } from '../../config';\nimport { log } from '../../logger';\n\n/**\n * Draws a start state as a black circle\n *\n * @param {any} g\n */\nexport const drawStartState = (g) =>\n  g\n    .append('circle')\n    // .style('stroke', 'black')\n    // .style('fill', 'black')\n    .attr('class', 'start-state')\n    .attr('r', getConfig().state.sizeUnit)\n    .attr('cx', getConfig().state.padding + getConfig().state.sizeUnit)\n    .attr('cy', getConfig().state.padding + getConfig().state.sizeUnit);\n\n/**\n * Draws a start state as a black circle\n *\n * @param {any} g\n */\nexport const drawDivider = (g) =>\n  g\n    .append('line')\n    .style('stroke', 'grey')\n    .style('stroke-dasharray', '3')\n    .attr('x1', getConfig().state.textHeight)\n    .attr('class', 'divider')\n    .attr('x2', getConfig().state.textHeight * 2)\n    .attr('y1', 0)\n    .attr('y2', 0);\n\n/**\n * Draws a an end state as a black circle\n *\n * @param {any} g\n * @param {any} stateDef\n */\nexport const drawSimpleState = (g, stateDef) => {\n  const state = g\n    .append('text')\n    .attr('x', 2 * getConfig().state.padding)\n    .attr('y', getConfig().state.textHeight + 2 * getConfig().state.padding)\n    .attr('font-size', getConfig().state.fontSize)\n    .attr('class', 'state-title')\n    .text(stateDef.id);\n\n  const classBox = state.node().getBBox();\n  g.insert('rect', ':first-child')\n    .attr('x', getConfig().state.padding)\n    .attr('y', getConfig().state.padding)\n    .attr('width', classBox.width + 2 * getConfig().state.padding)\n    .attr('height', classBox.height + 2 * getConfig().state.padding)\n    .attr('rx', getConfig().state.radius);\n\n  return state;\n};\n\n/**\n * Draws a state with descriptions\n *\n * @param {any} g The d3 svg object to add the state to\n * @param {any} stateDef\n * @returns {any} The d3 svg state\n */\nexport const drawDescrState = (g, stateDef) => {\n  const addTspan = function (textEl, txt, isFirst) {\n    const tSpan = textEl\n      .append('tspan')\n      .attr('x', 2 * getConfig().state.padding)\n      .text(txt);\n    if (!isFirst) {\n      tSpan.attr('dy', getConfig().state.textHeight);\n    }\n  };\n  const title = g\n    .append('text')\n    .attr('x', 2 * getConfig().state.padding)\n    .attr('y', getConfig().state.textHeight + 1.3 * getConfig().state.padding)\n    .attr('font-size', getConfig().state.fontSize)\n    .attr('class', 'state-title')\n    .text(stateDef.descriptions[0]);\n\n  const titleBox = title.node().getBBox();\n  const titleHeight = titleBox.height;\n\n  const description = g\n    .append('text') // text label for the x axis\n    .attr('x', getConfig().state.padding)\n    .attr(\n      'y',\n      titleHeight +\n        getConfig().state.padding * 0.4 +\n        getConfig().state.dividerMargin +\n        getConfig().state.textHeight\n    )\n    .attr('class', 'state-description');\n\n  let isFirst = true;\n  let isSecond = true;\n  stateDef.descriptions.forEach(function (descr) {\n    if (!isFirst) {\n      addTspan(description, descr, isSecond);\n      isSecond = false;\n    }\n    isFirst = false;\n  });\n\n  const descrLine = g\n    .append('line') // text label for the x axis\n    .attr('x1', getConfig().state.padding)\n    .attr('y1', getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2)\n    .attr('y2', getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2)\n    .attr('class', 'descr-divider');\n  const descrBox = description.node().getBBox();\n  const width = Math.max(descrBox.width, titleBox.width);\n\n  descrLine.attr('x2', width + 3 * getConfig().state.padding);\n  // const classBox = title.node().getBBox();\n\n  g.insert('rect', ':first-child')\n    .attr('x', getConfig().state.padding)\n    .attr('y', getConfig().state.padding)\n    .attr('width', width + 2 * getConfig().state.padding)\n    .attr('height', descrBox.height + titleHeight + 2 * getConfig().state.padding)\n    .attr('rx', getConfig().state.radius);\n\n  return g;\n};\n\n/** Adds the creates a box around the existing content and adds a panel for the id on top of the content. */\n/**\n * Function that creates an title row and a frame around a substate for a composite state diagram.\n * The function returns a new d3 svg object with updated width and height properties;\n *\n * @param {any} g The d3 svg object for the substate to framed\n * @param {any} stateDef The info about the\n * @param {any} altBkg\n */\nexport const addTitleAndBox = (g, stateDef, altBkg) => {\n  const pad = getConfig().state.padding;\n  const dblPad = 2 * getConfig().state.padding;\n  const orgBox = g.node().getBBox();\n  const orgWidth = orgBox.width;\n  const orgX = orgBox.x;\n\n  const title = g\n    .append('text')\n    .attr('x', 0)\n    .attr('y', getConfig().state.titleShift)\n    .attr('font-size', getConfig().state.fontSize)\n    .attr('class', 'state-title')\n    .text(stateDef.id);\n\n  const titleBox = title.node().getBBox();\n  const titleWidth = titleBox.width + dblPad;\n  let width = Math.max(titleWidth, orgWidth); // + dblPad;\n  if (width === orgWidth) {\n    width = width + dblPad;\n  }\n  let startX;\n  // const lineY = 1 - getConfig().state.textHeight;\n  // const descrLine = g\n  //   .append('line') // text label for the x axis\n  //   .attr('x1', 0)\n  //   .attr('y1', lineY)\n  //   .attr('y2', lineY)\n  //   .attr('class', 'descr-divider');\n\n  const graphBox = g.node().getBBox();\n  // descrLine.attr('x2', graphBox.width + getConfig().state.padding);\n\n  if (stateDef.doc) {\n    // console.warn(\n    //   stateDef.id,\n    //   'orgX: ',\n    //   orgX,\n    //   'width: ',\n    //   width,\n    //   'titleWidth: ',\n    //   titleWidth,\n    //   'orgWidth: ',\n    //   orgWidth,\n    //   'width',\n    //   width\n    // );\n  }\n\n  startX = orgX - pad;\n  if (titleWidth > orgWidth) {\n    startX = (orgWidth - width) / 2 + pad;\n  }\n  if (Math.abs(orgX - graphBox.x) < pad && titleWidth > orgWidth) {\n    startX = orgX - (titleWidth - orgWidth) / 2;\n  }\n\n  const lineY = 1 - getConfig().state.textHeight;\n  // White color\n  g.insert('rect', ':first-child')\n    .attr('x', startX)\n    .attr('y', lineY)\n    .attr('class', altBkg ? 'alt-composit' : 'composit')\n    .attr('width', width)\n    .attr(\n      'height',\n      graphBox.height + getConfig().state.textHeight + getConfig().state.titleShift + 1\n    )\n    .attr('rx', '0');\n\n  title.attr('x', startX + pad);\n  if (titleWidth <= orgWidth) {\n    title.attr('x', orgX + (width - dblPad) / 2 - titleWidth / 2 + pad);\n  }\n\n  // Title background\n  g.insert('rect', ':first-child')\n    .attr('x', startX)\n    .attr(\n      'y',\n      getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n    )\n    .attr('width', width)\n    // Just needs to be higher then the descr line, will be clipped by the white color box\n    .attr('height', getConfig().state.textHeight * 3)\n    .attr('rx', getConfig().state.radius);\n\n  // Full background\n  g.insert('rect', ':first-child')\n    .attr('x', startX)\n    .attr(\n      'y',\n      getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n    )\n    .attr('width', width)\n    .attr('height', graphBox.height + 3 + 2 * getConfig().state.textHeight)\n    .attr('rx', getConfig().state.radius);\n\n  return g;\n};\n\nconst drawEndState = (g) => {\n  g.append('circle')\n    // .style('stroke', 'black')\n    // .style('fill', 'white')\n    .attr('class', 'end-state-outer')\n    .attr('r', getConfig().state.sizeUnit + getConfig().state.miniPadding)\n    .attr(\n      'cx',\n      getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n    )\n    .attr(\n      'cy',\n      getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n    );\n\n  return (\n    g\n      .append('circle')\n      // .style('stroke', 'black')\n      // .style('fill', 'black')\n      .attr('class', 'end-state-inner')\n      .attr('r', getConfig().state.sizeUnit)\n      .attr('cx', getConfig().state.padding + getConfig().state.sizeUnit + 2)\n      .attr('cy', getConfig().state.padding + getConfig().state.sizeUnit + 2)\n  );\n};\nconst drawForkJoinState = (g, stateDef) => {\n  let width = getConfig().state.forkWidth;\n  let height = getConfig().state.forkHeight;\n\n  if (stateDef.parentId) {\n    let tmp = width;\n    width = height;\n    height = tmp;\n  }\n  return g\n    .append('rect')\n    .style('stroke', 'black')\n    .style('fill', 'black')\n    .attr('width', width)\n    .attr('height', height)\n    .attr('x', getConfig().state.padding)\n    .attr('y', getConfig().state.padding);\n};\n\nexport const drawText = function (elem, textData) {\n  // Remove and ignore br:s\n  const nText = textData.text.replace(common.lineBreakRegex, ' ');\n\n  const textElem = elem.append('text');\n  textElem.attr('x', textData.x);\n  textElem.attr('y', textData.y);\n  textElem.style('text-anchor', textData.anchor);\n  textElem.attr('fill', textData.fill);\n  if (textData.class !== undefined) {\n    textElem.attr('class', textData.class);\n  }\n\n  const span = textElem.append('tspan');\n  span.attr('x', textData.x + textData.textMargin * 2);\n  span.attr('fill', textData.fill);\n  span.text(nText);\n\n  return textElem;\n};\n\nconst _drawLongText = (_text, x, y, g) => {\n  let textHeight = 0;\n\n  const textElem = g.append('text');\n  textElem.style('text-anchor', 'start');\n  textElem.attr('class', 'noteText');\n\n  let text = _text.replace(/\\r\\n/g, '<br/>');\n  text = text.replace(/\\n/g, '<br/>');\n  const lines = text.split(common.lineBreakRegex);\n\n  let tHeight = 1.25 * getConfig().state.noteMargin;\n  for (const line of lines) {\n    const txt = line.trim();\n\n    if (txt.length > 0) {\n      const span = textElem.append('tspan');\n      span.text(txt);\n      if (tHeight === 0) {\n        const textBounds = span.node().getBBox();\n        tHeight += textBounds.height;\n      }\n      textHeight += tHeight;\n      span.attr('x', x + getConfig().state.noteMargin);\n      span.attr('y', y + textHeight + 1.25 * getConfig().state.noteMargin);\n    }\n  }\n  return { textWidth: textElem.node().getBBox().width, textHeight };\n};\n\n/**\n * Draws a note to the diagram\n *\n * @param text - The text of the given note.\n * @param g - The element the note is attached to.\n */\n\nexport const drawNote = (text, g) => {\n  g.attr('class', 'state-note');\n  const note = g.append('rect').attr('x', 0).attr('y', getConfig().state.padding);\n  const rectElem = g.append('g');\n\n  const { textWidth, textHeight } = _drawLongText(text, 0, 0, rectElem);\n  note.attr('height', textHeight + 2 * getConfig().state.noteMargin);\n  note.attr('width', textWidth + getConfig().state.noteMargin * 2);\n\n  return note;\n};\n\n/**\n * Starting point for drawing a state. The function finds out the specifics about the state and\n * renders with appropriate function.\n *\n * @param {any} elem\n * @param {any} stateDef\n */\n\nexport const drawState = function (elem, stateDef) {\n  const id = stateDef.id;\n  const stateInfo = {\n    id: id,\n    label: stateDef.id,\n    width: 0,\n    height: 0,\n  };\n\n  const g = elem.append('g').attr('id', id).attr('class', 'stateGroup');\n\n  if (stateDef.type === 'start') {\n    drawStartState(g);\n  }\n  if (stateDef.type === 'end') {\n    drawEndState(g);\n  }\n  if (stateDef.type === 'fork' || stateDef.type === 'join') {\n    drawForkJoinState(g, stateDef);\n  }\n  if (stateDef.type === 'note') {\n    drawNote(stateDef.note.text, g);\n  }\n  if (stateDef.type === 'divider') {\n    drawDivider(g);\n  }\n  if (stateDef.type === 'default' && stateDef.descriptions.length === 0) {\n    drawSimpleState(g, stateDef);\n  }\n  if (stateDef.type === 'default' && stateDef.descriptions.length > 0) {\n    drawDescrState(g, stateDef);\n  }\n\n  const stateBox = g.node().getBBox();\n  stateInfo.width = stateBox.width + 2 * getConfig().state.padding;\n  stateInfo.height = stateBox.height + 2 * getConfig().state.padding;\n\n  idCache.set(id, stateInfo);\n  // stateCnt++;\n  return stateInfo;\n};\n\nlet edgeCount = 0;\nexport const drawEdge = function (elem, path, relation) {\n  const getRelationType = function (type) {\n    switch (type) {\n      case stateDb.relationType.AGGREGATION:\n        return 'aggregation';\n      case stateDb.relationType.EXTENSION:\n        return 'extension';\n      case stateDb.relationType.COMPOSITION:\n        return 'composition';\n      case stateDb.relationType.DEPENDENCY:\n        return 'dependency';\n    }\n  };\n\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n\n  // The data for our line\n  const lineData = path.points;\n\n  // This is the accessor function we talked about above\n  const lineFunction = line()\n    .x(function (d) {\n      return d.x;\n    })\n    .y(function (d) {\n      return d.y;\n    })\n    .curve(curveBasis);\n\n  const svgPath = elem\n    .append('path')\n    .attr('d', lineFunction(lineData))\n    .attr('id', 'edge' + edgeCount)\n    .attr('class', 'transition');\n  let url = '';\n  if (getConfig().state.arrowMarkerAbsolute) {\n    url =\n      window.location.protocol +\n      '//' +\n      window.location.host +\n      window.location.pathname +\n      window.location.search;\n    url = url.replace(/\\(/g, '\\\\(');\n    url = url.replace(/\\)/g, '\\\\)');\n  }\n\n  svgPath.attr(\n    'marker-end',\n    'url(' + url + '#' + getRelationType(stateDb.relationType.DEPENDENCY) + 'End' + ')'\n  );\n\n  if (relation.title !== undefined) {\n    const label = elem.append('g').attr('class', 'stateLabel');\n\n    const { x, y } = utils.calcLabelPosition(path.points);\n\n    const rows = common.getRows(relation.title);\n\n    let titleHeight = 0;\n    const titleRows = [];\n    let maxWidth = 0;\n    let minX = 0;\n\n    for (let i = 0; i <= rows.length; i++) {\n      const title = label\n        .append('text')\n        .attr('text-anchor', 'middle')\n        .text(rows[i])\n        .attr('x', x)\n        .attr('y', y + titleHeight);\n\n      const boundstmp = title.node().getBBox();\n      maxWidth = Math.max(maxWidth, boundstmp.width);\n      minX = Math.min(minX, boundstmp.x);\n\n      log.info(boundstmp.x, x, y + titleHeight);\n\n      if (titleHeight === 0) {\n        const titleBox = title.node().getBBox();\n        titleHeight = titleBox.height;\n        log.info('Title height', titleHeight, y);\n      }\n      titleRows.push(title);\n    }\n\n    let boxHeight = titleHeight * rows.length;\n    if (rows.length > 1) {\n      const heightAdj = (rows.length - 1) * titleHeight * 0.5;\n\n      titleRows.forEach((title, i) => title.attr('y', y + i * titleHeight - heightAdj));\n      boxHeight = titleHeight * rows.length;\n    }\n\n    const bounds = label.node().getBBox();\n\n    label\n      .insert('rect', ':first-child')\n      .attr('class', 'box')\n      .attr('x', x - maxWidth / 2 - getConfig().state.padding / 2)\n      .attr('y', y - boxHeight / 2 - getConfig().state.padding / 2 - 3.5)\n      .attr('width', maxWidth + getConfig().state.padding)\n      .attr('height', boxHeight + getConfig().state.padding);\n\n    log.info(bounds);\n\n    //label.attr('transform', '0 -' + (bounds.y / 2));\n\n    // Debug points\n    // path.points.forEach(point => {\n    //   g.append('circle')\n    //     .style('stroke', 'red')\n    //     .style('fill', 'red')\n    //     .attr('r', 1)\n    //     .attr('cx', point.x)\n    //     .attr('cy', point.y);\n    // });\n    // g.append('circle')\n    //   .style('stroke', 'blue')\n    //   .style('fill', 'blue')\n    //   .attr('r', 1)\n    //   .attr('cx', x)\n    //   .attr('cy', y);\n  }\n\n  edgeCount++;\n};\n","import { select } from 'd3';\nimport { layout as dagreLayout } from 'dagre-d3-es/src/dagre/index.js';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport common from '../common/common';\nimport { drawState, addTitleAndBox, drawEdge } from './shapes';\nimport { getConfig } from '../../config';\nimport { configureSvgSize } from '../../setupGraphViewbox';\n\n// TODO Move conf object to main conf in mermaidAPI\nlet conf;\n\nconst transformationLog = {};\n\nexport const setConf = function () {\n  //no-op\n};\n\n/**\n * Setup arrow head and define the marker. The result is appended to the svg.\n *\n * @param {any} elem\n */\nconst insertMarkers = function (elem) {\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'dependencyEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 19,7 L9,13 L14,7 L9,1 Z');\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param {any} text\n * @param {any} id\n * @param _version\n * @param diagObj\n */\nexport const draw = function (text, id, _version, diagObj) {\n  conf = getConfig().state;\n  const securityLevel = getConfig().securityLevel;\n  // Handle root and Document for when rendering in sandbox mode\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n\n  // diagObj.db.clear();\n  // parser.parse(text);\n  log.debug('Rendering diagram ' + text);\n\n  // Fetch the default direction, use TD if none was found\n  const diagram = root.select(`[id='${id}']`);\n  insertMarkers(diagram);\n\n  // Layout graph, Create a new directed graph\n  const graph = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n    // acyclicer: 'greedy',\n    rankdir: 'RL',\n    // ranksep: '20'\n  });\n\n  // Default to assigning a new object as a label for each new edge.\n  graph.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  const rootDoc = diagObj.db.getRootDoc();\n  renderDoc(rootDoc, diagram, undefined, false, root, doc, diagObj);\n\n  const padding = conf.padding;\n  const bounds = diagram.node().getBBox();\n\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n\n  // zoom in a bit\n  const svgWidth = width * 1.75;\n  configureSvgSize(diagram, height, svgWidth, conf.useMaxWidth);\n\n  diagram.attr(\n    'viewBox',\n    `${bounds.x - conf.padding}  ${bounds.y - conf.padding} ` + width + ' ' + height\n  );\n};\nconst getLabelWidth = (text) => {\n  return text ? text.length * conf.fontSizeFactor : 1;\n};\n\nconst renderDoc = (doc, diagram, parentId, altBkg, root, domDocument, diagObj) => {\n  // Layout graph, Create a new directed graph\n  const graph = new graphlib.Graph({\n    compound: true,\n    multigraph: true,\n  });\n\n  let i;\n  let edgeFreeDoc = true;\n  for (i = 0; i < doc.length; i++) {\n    if (doc[i].stmt === 'relation') {\n      edgeFreeDoc = false;\n      break;\n    }\n  }\n\n  // Set an object for the graph label\n  if (parentId) {\n    graph.setGraph({\n      rankdir: 'LR',\n      multigraph: true,\n      compound: true,\n      // acyclicer: 'greedy',\n      ranker: 'tight-tree',\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      isMultiGraph: true,\n      // ranksep: 5,\n      // nodesep: 1\n    });\n  } else {\n    graph.setGraph({\n      rankdir: 'TB',\n      multigraph: true,\n      compound: true,\n      // isCompound: true,\n      // acyclicer: 'greedy',\n      // ranker: 'longest-path'\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      ranker: 'tight-tree',\n      // ranker: 'network-simplex'\n      isMultiGraph: true,\n    });\n  }\n\n  // Default to assigning a new object as a label for each new edge.\n  graph.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  diagObj.db.extract(doc);\n  const states = diagObj.db.getStates();\n  const relations = diagObj.db.getRelations();\n\n  const keys = Object.keys(states);\n\n  let first = true;\n\n  for (const key of keys) {\n    const stateDef = states[key];\n\n    if (parentId) {\n      stateDef.parentId = parentId;\n    }\n\n    let node;\n    if (stateDef.doc) {\n      let sub = diagram.append('g').attr('id', stateDef.id).attr('class', 'stateGroup');\n      node = renderDoc(stateDef.doc, sub, stateDef.id, !altBkg, root, domDocument, diagObj);\n\n      if (first) {\n        // first = false;\n        sub = addTitleAndBox(sub, stateDef, altBkg);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height + conf.padding / 2;\n        transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      } else {\n        // sub = addIdAndBox(sub, stateDef);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height;\n        // transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      }\n    } else {\n      node = drawState(diagram, stateDef, graph);\n    }\n\n    if (stateDef.note) {\n      // Draw note note\n      const noteDef = {\n        descriptions: [],\n        id: stateDef.id + '-note',\n        note: stateDef.note,\n        type: 'note',\n      };\n      const note = drawState(diagram, noteDef, graph);\n\n      // graph.setNode(node.id, node);\n      if (stateDef.note.position === 'left of') {\n        graph.setNode(node.id + '-note', note);\n        graph.setNode(node.id, node);\n      } else {\n        graph.setNode(node.id, node);\n        graph.setNode(node.id + '-note', note);\n      }\n      // graph.setNode(node.id);\n      graph.setParent(node.id, node.id + '-group');\n      graph.setParent(node.id + '-note', node.id + '-group');\n    } else {\n      // Add nodes to the graph. The first argument is the node id. The second is\n      // metadata about the node. In this case we're going to add labels to each of\n      // our nodes.\n      graph.setNode(node.id, node);\n    }\n  }\n\n  log.debug('Count=', graph.nodeCount(), graph);\n  let cnt = 0;\n  relations.forEach(function (relation) {\n    cnt++;\n    log.debug('Setting edge', relation);\n    graph.setEdge(\n      relation.id1,\n      relation.id2,\n      {\n        relation: relation,\n        width: getLabelWidth(relation.title),\n        height: conf.labelHeight * common.getRows(relation.title).length,\n        labelpos: 'c',\n      },\n      'id' + cnt\n    );\n  });\n\n  dagreLayout(graph);\n\n  log.debug('Graph after layout', graph.nodes());\n  const svgElem = diagram.node();\n\n  graph.nodes().forEach(function (v) {\n    if (v !== undefined && graph.node(v) !== undefined) {\n      log.warn('Node ' + v + ': ' + JSON.stringify(graph.node(v)));\n      root\n        .select('#' + svgElem.id + ' #' + v)\n        .attr(\n          'transform',\n          'translate(' +\n            (graph.node(v).x - graph.node(v).width / 2) +\n            ',' +\n            (graph.node(v).y +\n              (transformationLog[v] ? transformationLog[v].y : 0) -\n              graph.node(v).height / 2) +\n            ' )'\n        );\n      root\n        .select('#' + svgElem.id + ' #' + v)\n        .attr('data-x-shift', graph.node(v).x - graph.node(v).width / 2);\n      const dividers = domDocument.querySelectorAll('#' + svgElem.id + ' #' + v + ' .divider');\n      dividers.forEach((divider) => {\n        const parent = divider.parentElement;\n        let pWidth = 0;\n        let pShift = 0;\n        if (parent) {\n          if (parent.parentElement) {\n            pWidth = parent.parentElement.getBBox().width;\n          }\n          pShift = parseInt(parent.getAttribute('data-x-shift'), 10);\n          if (Number.isNaN(pShift)) {\n            pShift = 0;\n          }\n        }\n        divider.setAttribute('x1', 0 - pShift + 8);\n        divider.setAttribute('x2', pWidth - pShift - 8);\n      });\n    } else {\n      log.debug('No Node ' + v + ': ' + JSON.stringify(graph.node(v)));\n    }\n  });\n\n  let stateBox = svgElem.getBBox();\n\n  graph.edges().forEach(function (e) {\n    if (e !== undefined && graph.edge(e) !== undefined) {\n      log.debug('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(graph.edge(e)));\n      drawEdge(diagram, graph.edge(e), graph.edge(e).relation);\n    }\n  });\n\n  stateBox = svgElem.getBBox();\n\n  const stateInfo = {\n    id: parentId ? parentId : 'root',\n    label: parentId ? parentId : 'root',\n    width: 0,\n    height: 0,\n  };\n\n  stateInfo.width = stateBox.width + 2 * conf.padding;\n  stateInfo.height = stateBox.height + 2 * conf.padding;\n\n  log.debug('Doc rendered', stateInfo, graph);\n  return stateInfo;\n};\n\nexport default {\n  setConf,\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/stateDiagram';\nimport db from './stateDb';\nimport styles from './styles';\nimport renderer from './stateRenderer';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"],"names":["idCache","set","key","val","get","k","keys","Object","size","length","idCache$1","drawStartState","g","append","attr","getConfig","state","sizeUnit","padding","drawDivider","style","textHeight","drawSimpleState","stateDef","fontSize","text","id","classBox","node","getBBox","insert","width","height","radius","drawDescrState","addTspan","textEl","txt","isFirst","tSpan","title","descriptions","titleBox","titleHeight","description","dividerMargin","isSecond","forEach","descr","descrLine","descrBox","Math","max","addTitleAndBox","altBkg","pad","dblPad","orgBox","orgWidth","orgX","x","titleShift","titleWidth","startX","graphBox","doc","abs","lineY","drawEndState","miniPadding","drawForkJoinState","forkWidth","forkHeight","parentId","tmp","_drawLongText","_text","y","textElem","replace","lines","split","common","tHeight","noteMargin","line","trim","span","textBounds","textWidth","drawNote","note","rectElem","drawState","elem","stateInfo","label","type","stateBox","edgeCount","drawEdge","path","relation","getRelationType","stateDb","points","filter","p","Number","isNaN","lineData","lineFunction","d","curve","curveBasis","svgPath","url","arrowMarkerAbsolute","window","location","protocol","host","pathname","search","utils","rows","titleRows","maxWidth","minX","i","boundstmp","min","log","push","boxHeight","heightAdj","bounds","conf","transformationLog","setConf","insertMarkers","draw","_version","diagObj","securityLevel","sandboxElement","select","root","nodes","contentDocument","body","document","diagram","graph","graphlib","multigraph","compound","rankdir","setDefaultEdgeLabel","rootDoc","db","getRootDoc","renderDoc","svgWidth","configureSvgSize","useMaxWidth","getLabelWidth","fontSizeFactor","domDocument","edgeFreeDoc","stmt","setGraph","ranker","ranksep","edgeLengthFactor","nodeSep","isMultiGraph","extract","states","getStates","relations","getRelations","sub","boxBounds","compositTitleSize","noteDef","position","setNode","setParent","nodeCount","cnt","setEdge","id1","id2","labelHeight","labelpos","dagreLayout","svgElem","v","JSON","stringify","dividers","querySelectorAll","divider","parent","parentElement","pWidth","pShift","parseInt","getAttribute","setAttribute","edges","e","edge","w","renderer","parser","styles","init","cnf"],"sourceRoot":""}