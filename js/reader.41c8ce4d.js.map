{"version":3,"file":"js/reader.41c8ce4d.js","mappings":"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","sources":["webpack://IDNCreaterPages/./src/views/ReaderView.vue","webpack://IDNCreaterPages/./src/views/ReaderView.vue?8c8c"],"sourcesContent":["<template>\n  <div class=\"reader\">\n    <button class=\"toggle-btn\" v-if=\"up\" @click=\"toggleHeader\">Pack Up</button>\n    <button class=\"toggle-btn\" v-if=\"!up\" @click=\"toggleHeader\">Down</button>\n    <header class=\"header\" v-if=\"isHeaderVisible\">\n      <h1 class=\"h1\">Mulit-Author Interactive Novel Reader</h1>\n      <button class=\"button\" @click=\"importFile()\">Import</button>\n    </header>\n    <div>\n      <button @click=\"preScene\">⬅️</button>&emsp;\n      <h1 class=\"h1\">{{ novel.title }}</h1>\n      <p v-if=\"novel.author\">Written by {{ novel.author }}</p>\n      <hr />\n      <p class=\"content\" v-html=\"highlightedCurrentSceneContent\" @click=\"handleWordClick\"></p>\n    </div>\n    <input type=\"file\" id=\"file-input\" style=\"display: none\" @change=\"onFileInputChange\">\n  </div>\n  <button @click=\"readLocalFile\">读取本地文件</button>\n</template>\n\n<script>\nexport default {\n  //props: ['story'],\n  data() {\n    return {\n      isHeaderVisible: true,\n      up: true,\n      novel: {\n        title: '',\n        author: '',\n        content: ''\n      },\n      paragraphs: [],\n      currentScene: {\n        sourceIndex: '',\n        wordIndex: '',\n        content: ''\n      },\n      readingOrder: [\n\n      ]\n    }\n  },\n  //mounted() {\n  //  this.parseNovelText(this.story);\n  //},\n  computed: {\n    fromHome() {\n      if (this.$route.query.startReading) {\n        // Start reading automatically\n        this.parseNovelText(this.$route.query.story);\n      }\n      //this.$route.query.startReading = false;\n      return null;\n    },\n\n    highlightedCurrentSceneContent() {\n      //console.log(\"开始替换高亮词\");\n      let content = this.currentScene.content;\n      this.paragraphs.forEach((paragraph) => {\n        if (paragraph.sourceIndex === this.currentScene.paragraphIndex) {\n          //g表示全局匹配,i表示不区分大小写    \n          const regex = new RegExp(`(${paragraph.wordIndex})`, 'gi');\n          //console.log(\"检测到高亮词: \" + paragraph.wordIndex)\n          content = content.replace(regex, `<span class=\"highlighted-word\">$1</span>`);\n        }\n      });\n      return content;\n    }\n  },\n  methods: {\n    readLocalFile() {\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\n          const text = xhr.responseText;\n          this.parseNovelText(text);\n        }\n      };\n      xhr.open('GET', '/story.txt', true);\n      xhr.send();\n    },\n\n    preScene() {\n      const preNode = this.readingOrder.pop();\n      //console.log(\"上一个节点\" + preNode)\n      const preParagraph = this.paragraphs.find((paragraph) => {\n        return paragraph.paragraphIndex === preNode\n      });\n      if (preParagraph) {\n        this.currentScene.sourceIndex = preParagraph.sourceIndex;\n        this.currentScene.wordIndex = preParagraph.wordIndex;\n        this.currentScene.content = preParagraph.content;\n        this.currentScene.paragraphIndex = preParagraph.paragraphIndex;\n      } else {\n        alert(\"没找到上一个场景，请确定你不是在第一个场景内\");\n      }\n    },\n    updateScene() {\n      this.readingOrder.push(this.currentScene.paragraphIndex);\n      //console.log(this.readingOrder);\n    },\n    toggleHeader() {\n      this.isHeaderVisible = !this.isHeaderVisible;\n      this.up = !this.up;\n    },\n    importFile() {\n      document.getElementById('file-input').click();\n    },\n    onFileInputChange(event) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const text = event.target.result;\n        this.parseNovelText(text);\n      };\n      reader.readAsText(file);\n    },\n    parseNovelText(text) {\n      const lines = text.trim().split('\\n');\n      let title = '';\n      let author = '';\n      let content = '';\n      let l = 0;\n      this.toggleHeader();\n      for (let line of lines) {\n        if (line.startsWith('Story Title: ')) {\n          title = line.slice(13);\n        } else if (line.startsWith('Authors: ')) {\n          author = line.slice(9);\n        } else {\n          content += line + '<br/>';\n          l += 1\n        }\n      }\n      this.novel.title = title;\n      this.novel.author = author;\n      this.novel.content = content;\n\n      const nodes = content.split('<br/>');\n      for (let i = 0; i < l; i++) {\n        this.paragraphs.push({\n          sourceIndex: null,\n          wordIndex: null,\n          content: \"\",\n          paragraphIndex: i\n        });\n      }\n\n      nodes.forEach((paragraphText, i) => {\n        const matches = paragraphText.match(/\\[(\\d+)\\] \\[(.*?)\\] (.+) \\[(\\d+)\\]/);\n        if (matches) {\n          const sourceIndex = parseInt(matches[1]);\n          const wordIndex = matches[2];\n          const content = matches[3];\n          const paragraphIndex = parseInt(matches[4]);\n\n          this.paragraphs[paragraphIndex].sourceIndex = sourceIndex;\n          this.paragraphs[paragraphIndex].wordIndex = wordIndex;\n          this.paragraphs[paragraphIndex].content = content;\n          this.paragraphs[paragraphIndex].paragraphIndex = paragraphIndex;\n\n          if (i === 0) {\n            this.currentScene.sourceIndex = sourceIndex;\n            this.currentScene.wordIndex = wordIndex;\n            this.currentScene.content = content;\n            this.currentScene.paragraphIndex = paragraphIndex;\n            this.updateScene();\n          }\n        }\n      });\n    },\n    handleWordClick(event) {\n      const selectedWord = event.target.closest('.highlighted-word');\n      if (selectedWord) {\n        const wordIndex = selectedWord.textContent.trim();\n        const nextParagraph = this.paragraphs.find((paragraph) => {\n          return paragraph.sourceIndex === this.currentScene.paragraphIndex\n            && paragraph.wordIndex.toLowerCase() === wordIndex.toLowerCase();\n        });\n        if (nextParagraph) {\n          this.updateScene();\n          this.currentScene.sourceIndex = nextParagraph.sourceIndex;\n          this.currentScene.wordIndex = nextParagraph.wordIndex;\n          this.currentScene.content = nextParagraph.content;\n          this.currentScene.paragraphIndex = nextParagraph.paragraphIndex;\n        } else {\n          alert(\"No scene is connected to this word.\");\n        }\n      }\n    },\n  }\n};\n</script>\n<style>\n.header {\n  display: flex;\n  /* 将 header 标签的 display 属性设置为 flex */\n  align-items: center;\n  /* 垂直居中 */\n  justify-content: space-between;\n  /* 将子元素分散对齐 */\n  padding: 10px;\n  /* 添加 padding 以增加内容的内边距 */\n}\n\n.content {\n  font-size: 2em;\n  text-indent: 2em;\n  text-align: left;\n}\n\n.toggle-btn {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  z-index: 100;\n}\n\n.h1 {\n  display: inline-block;\n  vertical-align: middle;\n  /* 可以让按钮和标题在同一垂直位置 */\n}\n\n.reader {\n  font-size: 1em;\n  width: 70%;\n  margin-left: 15%;\n  margin-right: 15%;\n}\n\n.highlighted-word {\n  color: #0074d9;\n  text-decoration: none;\n  border-bottom: 1px solid #0074d9;\n  cursor: pointer;\n}\n\n.highlighted-word:hover {\n  color: #004a8f;\n  border-bottom-color: #004a8f;\n}\n\n.button {\n  vertical-align: middle;\n  /* 可以让按钮和标题在同一垂直位置 */\n  background-color: #10b1e8;\n  border: none;\n  color: white;\n  padding: 1em 1em;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 1em;\n  cursor: pointer;\n  border-radius: 1em;\n  box-shadow: 0 4px #999;\n  transition-duration: 0.4s;\n}\n\n.button:hover {\n  box-shadow: 0 8px #999;\n  transform: translateY(-2px);\n}\n</style>\n","import { render } from \"./ReaderView.vue?vue&type=template&id=ecf6ba4e\"\nimport script from \"./ReaderView.vue?vue&type=script&lang=js\"\nexport * from \"./ReaderView.vue?vue&type=script&lang=js\"\n\nimport \"./ReaderView.vue?vue&type=style&index=0&id=ecf6ba4e&lang=css\"\n\nimport exportComponent from \"/Users/tggs636/Desktop/IDNCreater/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementVNode","_hoisted_1","$data","_createElementBlock","onClick","$options","_hoisted_2","_hoisted_3","_hoisted_4","title","author","_hoisted_6","innerHTML","type","id","style","onChange","data","isHeaderVisible","up","novel","content","paragraphs","currentScene","sourceIndex","wordIndex","readingOrder","computed","fromHome","this","$route","query","startReading","parseNovelText","story","highlightedCurrentSceneContent","forEach","paragraph","paragraphIndex","regex","RegExp","replace","methods","readLocalFile","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","text","responseText","open","send","preScene","preNode","pop","preParagraph","find","alert","updateScene","push","toggleHeader","importFile","document","getElementById","click","onFileInputChange","event","file","target","files","reader","FileReader","onload","result","readAsText","lines","trim","split","l","line","startsWith","slice","nodes","i","paragraphText","matches","match","parseInt","handleWordClick","selectedWord","closest","textContent","nextParagraph","toLowerCase","__exports__","render"],"sourceRoot":""}