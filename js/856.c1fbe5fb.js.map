{"version":3,"file":"js/856.c1fbe5fb.js","mappings":"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","sources":["webpack://IDNCreaterPages/../src/diagrams/class/classRenderer-v2.ts","webpack://IDNCreaterPages/../src/diagrams/class/classDiagram-v2.ts"],"sourcesContent":["// @ts-ignore d3 types are not available\nimport { select, curveLinear } from 'd3';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport { getConfig } from '../../config';\nimport { render } from '../../dagre-wrapper/index.js';\nimport utils from '../../utils';\nimport { interpolateToCurve, getStylesFromArray } from '../../utils';\nimport { setupGraphViewbox } from '../../setupGraphViewbox';\nimport common from '../common/common';\nimport { ClassRelation, ClassNote, ClassMap, EdgeData } from './classTypes';\n\nconst sanitizeText = (txt: string) => common.sanitizeText(txt, getConfig());\n\nlet conf = {\n  dividerMargin: 10,\n  padding: 5,\n  textHeight: 10,\n  curve: undefined,\n};\n\n/**\n * Function that adds the vertices found during parsing to the graph to be rendered.\n *\n * @param classes - Object containing the vertices.\n * @param g - The graph that is to be drawn.\n * @param _id - id of the graph\n * @param diagObj - The diagram object\n */\nexport const addClasses = function (\n  classes: ClassMap,\n  g: graphlib.Graph,\n  _id: string,\n  diagObj: any\n) {\n  const keys = Object.keys(classes);\n  log.info('keys:', keys);\n  log.info(classes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  keys.forEach(function (id) {\n    const vertex = classes[id];\n\n    /**\n     * Variable for storing the classes for the vertex\n     */\n    let cssClassStr = '';\n    if (vertex.cssClasses.length > 0) {\n      cssClassStr = cssClassStr + ' ' + vertex.cssClasses.join(' ');\n    }\n\n    const styles = { labelStyle: '', style: '' }; //getStylesFromArray(vertex.styles);\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    const vertexText = vertex.label ?? vertex.id;\n    const radius = 0;\n    const shape = 'class_box';\n    // Add the node\n    const node = {\n      labelStyle: styles.labelStyle,\n      shape: shape,\n      labelText: sanitizeText(vertexText),\n      classData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssClassStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.domId,\n      tooltip: diagObj.db.getTooltip(vertex.id) || '',\n      haveCallback: vertex.haveCallback,\n      link: vertex.link,\n      width: vertex.type === 'group' ? 500 : undefined,\n      type: vertex.type,\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n    };\n    g.setNode(vertex.id, node);\n    log.info('setNode', node);\n  });\n};\n\n/**\n * Function that adds the additional vertices (notes) found during parsing to the graph to be rendered.\n *\n * @param notes - Object containing the additional vertices (notes).\n * @param g - The graph that is to be drawn.\n * @param startEdgeId - starting index for note edge\n * @param classes - Classes\n */\nexport const addNotes = function (\n  notes: ClassNote[],\n  g: graphlib.Graph,\n  startEdgeId: number,\n  classes: ClassMap\n) {\n  log.info(notes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  notes.forEach(function (note, i) {\n    const vertex = note;\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     */\n    const cssNoteStr = '';\n\n    const styles = { labelStyle: '', style: '' };\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    const vertexText = vertex.text;\n\n    const radius = 0;\n    const shape = 'note';\n    // Add the node\n    const node = {\n      labelStyle: styles.labelStyle,\n      shape: shape,\n      labelText: sanitizeText(vertexText),\n      noteData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssNoteStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.id,\n      tooltip: '',\n      type: 'note',\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n    };\n    g.setNode(vertex.id, node);\n    log.info('setNode', node);\n\n    if (!vertex.class || !(vertex.class in classes)) {\n      return;\n    }\n    const edgeId = startEdgeId + i;\n\n    const edgeData: EdgeData = {\n      id: `edgeNote${edgeId}`,\n      //Set relationship style and line type\n      classes: 'relation',\n      pattern: 'dotted',\n      // Set link type for rendering\n      arrowhead: 'none',\n      //Set edge extra labels\n      startLabelRight: '',\n      endLabelLeft: '',\n      //Set relation arrow types\n      arrowTypeStart: 'none',\n      arrowTypeEnd: 'none',\n      style: 'fill:none',\n      labelStyle: '',\n      curve: interpolateToCurve(conf.curve, curveLinear),\n    };\n\n    // Add the edge to the graph\n    g.setEdge(vertex.id, vertex.class, edgeData, edgeId);\n  });\n};\n\n/**\n * Add edges to graph based on parsed graph definition\n *\n * @param relations -\n * @param g - The graph object\n */\nexport const addRelations = function (relations: ClassRelation[], g: graphlib.Graph) {\n  const conf = getConfig().flowchart;\n  let cnt = 0;\n\n  relations.forEach(function (edge) {\n    cnt++;\n    const edgeData: EdgeData = {\n      //Set relationship style and line type\n      classes: 'relation',\n      pattern: edge.relation.lineType == 1 ? 'dashed' : 'solid',\n      id: 'id' + cnt,\n      // Set link type for rendering\n      arrowhead: edge.type === 'arrow_open' ? 'none' : 'normal',\n      //Set edge extra labels\n      startLabelRight: edge.relationTitle1 === 'none' ? '' : edge.relationTitle1,\n      endLabelLeft: edge.relationTitle2 === 'none' ? '' : edge.relationTitle2,\n      //Set relation arrow types\n      arrowTypeStart: getArrowMarker(edge.relation.type1),\n      arrowTypeEnd: getArrowMarker(edge.relation.type2),\n      style: 'fill:none',\n      labelStyle: '',\n      curve: interpolateToCurve(conf?.curve, curveLinear),\n    };\n\n    log.info(edgeData, edge);\n\n    if (edge.style !== undefined) {\n      const styles = getStylesFromArray(edge.style);\n      edgeData.style = styles.style;\n      edgeData.labelStyle = styles.labelStyle;\n    }\n\n    edge.text = edge.title;\n    if (edge.text === undefined) {\n      if (edge.style !== undefined) {\n        edgeData.arrowheadStyle = 'fill: #333';\n      }\n    } else {\n      edgeData.arrowheadStyle = 'fill: #333';\n      edgeData.labelpos = 'c';\n\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      if (getConfig().flowchart?.htmlLabels ?? getConfig().htmlLabels) {\n        edgeData.labelType = 'html';\n        edgeData.label = '<span class=\"edgeLabel\">' + edge.text + '</span>';\n      } else {\n        edgeData.labelType = 'text';\n        edgeData.label = edge.text.replace(common.lineBreakRegex, '\\n');\n\n        if (edge.style === undefined) {\n          edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none';\n        }\n\n        edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');\n      }\n    }\n    // Add the edge to the graph\n    g.setEdge(edge.id1, edge.id2, edgeData, cnt);\n  });\n};\n\n/**\n * Merges the value of `conf` with the passed `cnf`\n *\n * @param cnf - Config to merge\n */\nexport const setConf = function (cnf: any) {\n  conf = {\n    ...conf,\n    ...cnf,\n  };\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param text -\n * @param id -\n * @param _version -\n * @param diagObj -\n */\nexport const draw = function (text: string, id: string, _version: string, diagObj: any) {\n  log.info('Drawing class - ', id);\n\n  // TODO V10: Why flowchart? Might be a mistake when copying.\n  const conf = getConfig().flowchart ?? getConfig().class;\n  const securityLevel = getConfig().securityLevel;\n  log.info('config:', conf);\n  const nodeSpacing = conf?.nodeSpacing ?? 50;\n  const rankSpacing = conf?.rankSpacing ?? 50;\n\n  // Create the input mermaid.graph\n  const g: graphlib.Graph = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: diagObj.db.getDirection(),\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 8,\n      marginy: 8,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  // Fetch the vertices/nodes and edges/links from the parsed graph definition\n  const classes: ClassMap = diagObj.db.getClasses();\n  const relations: ClassRelation[] = diagObj.db.getRelations();\n  const notes: ClassNote[] = diagObj.db.getNotes();\n  log.info(relations);\n  addClasses(classes, g, id, diagObj);\n  addRelations(relations, g);\n  addNotes(notes, g, relations.length + 1, classes);\n\n  // Set up an SVG group so that we can translate the final graph.\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? // @ts-ignore Ignore type error for now\n\n        select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  // @ts-ignore Ignore type error for now\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n  // @ts-ignore Ignore type error for now\n  const element = root.select('#' + id + ' g');\n  render(\n    element,\n    g,\n    ['aggregation', 'extension', 'composition', 'dependency', 'lollipop'],\n    'classDiagram',\n    id\n  );\n\n  utils.insertTitle(svg, 'classTitleText', conf?.titleTopMargin ?? 5, diagObj.db.getDiagramTitle());\n\n  setupGraphViewbox(g, svg, conf?.diagramPadding, conf?.useMaxWidth);\n\n  // Add label rects for non html labels\n  if (!conf?.htmlLabels) {\n    // @ts-ignore Ignore type error for now\n    const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      // Get dimensions of label\n      const dim = label.getBBox();\n\n      const rect = doc.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('rx', 0);\n      rect.setAttribute('ry', 0);\n      rect.setAttribute('width', dim.width);\n      rect.setAttribute('height', dim.height);\n\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n};\n\n/**\n * Gets the arrow marker for a type index\n *\n * @param type - The type to look for\n * @returns The arrow marker\n */\nfunction getArrowMarker(type: number) {\n  let marker;\n  switch (type) {\n    case 0:\n      marker = 'aggregation';\n      break;\n    case 1:\n      marker = 'extension';\n      break;\n    case 2:\n      marker = 'composition';\n      break;\n    case 3:\n      marker = 'dependency';\n      break;\n    case 4:\n      marker = 'lollipop';\n      break;\n    default:\n      marker = 'none';\n  }\n  return marker;\n}\n\nexport default {\n  setConf,\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/classDiagram';\nimport db from './classDb';\nimport styles from './styles';\nimport renderer from './classRenderer-v2';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"],"names":["sanitizeText","txt","common","getConfig","conf","dividerMargin","padding","textHeight","curve","addClasses","classes","g","_id","diagObj","keys","Object","log","id","vertex","cssClassStr","cssClasses","length","join","styles","labelStyle","style","vertexText","label","radius","shape","node","labelText","classData","rx","ry","class","domId","tooltip","db","getTooltip","haveCallback","link","width","type","_a","flowchart","_b","addNotes","notes","startEdgeId","note","i","cssNoteStr","text","noteData","edgeId","edgeData","pattern","arrowhead","startLabelRight","endLabelLeft","arrowTypeStart","arrowTypeEnd","interpolateToCurve","curveLinear","setEdge","addRelations","relations","cnt","edge","relation","lineType","relationTitle1","relationTitle2","getArrowMarker","type1","type2","getStylesFromArray","title","arrowheadStyle","labelpos","htmlLabels","labelType","replace","id1","id2","setConf","cnf","draw","_version","securityLevel","nodeSpacing","rankSpacing","graphlib","multigraph","compound","setGraph","rankdir","getDirection","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","getClasses","getRelations","getNotes","sandboxElement","root","select","nodes","contentDocument","body","svg","element","render","utils","titleTopMargin","getDiagramTitle","setupGraphViewbox","diagramPadding","useMaxWidth","doc","document","labels","querySelectorAll","dim","getBBox","rect","createElementNS","height","firstChild","marker","renderer","diagram","parser","init","arrowMarkerAbsolute"],"sourceRoot":""}