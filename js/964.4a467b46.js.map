{"version":3,"file":"js/964.4a467b46.js","mappings":"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","sources":["webpack://IDNCreaterPages/./node_modules/mermaid/dist/stateDiagram-v2-9765461d.js"],"sourcesContent":["import { D as DEFAULT_DIAGRAM_DIRECTION, a as DEFAULT_STATE_TYPE, b as DIVIDER_TYPE, S as STMT_RELATION, c as STMT_STATE, e as DEFAULT_NESTED_DOC_DIR, p as parser, d as db, s as styles } from \"./styles-47a825a5.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { select } from \"d3\";\nimport { l as log, g as getConfig, e as common } from \"./commonDb-573409be.js\";\nimport { r as render } from \"./index-5219d011.js\";\nimport { u as utils, k as configureSvgSize } from \"./utils-d622194a.js\";\nimport \"./mermaidAPI-3ae0f2f0.js\";\nimport \"stylis\";\nimport \"dompurify\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dayjs\";\nimport \"khroma\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-2e77835f.js\";\nimport \"./createText-1f5f8f92.js\";\nimport \"@khanacademy/simple-markdown\";\nimport \"./svgDraw-2526cba0.js\";\nimport \"@braintree/sanitize-url\";\nimport \"lodash-es/memoize.js\";\nconst SHAPE_STATE = \"rect\";\nconst SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nconst SHAPE_START = \"start\";\nconst SHAPE_END = \"end\";\nconst SHAPE_DIVIDER = \"divider\";\nconst SHAPE_GROUP = \"roundedWithTitle\";\nconst SHAPE_NOTE = \"note\";\nconst SHAPE_NOTEGROUP = \"noteGroup\";\nconst CSS_DIAGRAM = \"statediagram\";\nconst CSS_STATE = \"state\";\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = \"transition\";\nconst CSS_NOTE = \"note\";\nconst CSS_NOTE_EDGE = \"note-edge\";\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = \"cluster\";\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = \"cluster-alt\";\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\nconst PARENT = \"parent\";\nconst NOTE = \"note\";\nconst DOMID_STATE = \"state\";\nconst DOMID_TYPE_SPACER = \"----\";\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\nconst G_EDGE_STYLE = \"fill:none\";\nconst G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nconst G_EDGE_LABELPOS = \"c\";\nconst G_EDGE_LABELTYPE = \"text\";\nconst G_EDGE_THICKNESS = \"normal\";\nlet nodeDb = {};\nlet graphItemCount = 0;\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    cnf[key];\n  }\n};\nconst getClasses = function(text, diagramObj) {\n  log.trace(\"Extracting classes\");\n  diagramObj.db.clear();\n  try {\n    diagramObj.parser.parse(text);\n    diagramObj.db.extract(diagramObj.db.getRootDocV2());\n    return diagramObj.db.getClasses();\n  } catch (e) {\n    return e;\n  }\n};\nfunction getClassesFromDbInfo(dbInfoItem) {\n  if (dbInfoItem === void 0 || dbInfoItem === null) {\n    return \"\";\n  } else {\n    if (dbInfoItem.classes) {\n      return dbInfoItem.classes.join(\" \");\n    } else {\n      return \"\";\n    }\n  }\n}\nfunction stateDomId(itemId = \"\", counter = 0, type = \"\", typeSpacer = DOMID_TYPE_SPACER) {\n  const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : \"\";\n  return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag) => {\n  const itemId = parsedItem.id;\n  const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n  if (itemId !== \"root\") {\n    let shape = SHAPE_STATE;\n    if (parsedItem.start === true) {\n      shape = SHAPE_START;\n    }\n    if (parsedItem.start === false) {\n      shape = SHAPE_END;\n    }\n    if (parsedItem.type !== DEFAULT_STATE_TYPE) {\n      shape = parsedItem.type;\n    }\n    if (!nodeDb[itemId]) {\n      nodeDb[itemId] = {\n        id: itemId,\n        shape,\n        description: common.sanitizeText(itemId, getConfig()),\n        classes: `${classStr} ${CSS_DIAGRAM_STATE}`\n      };\n    }\n    const newNode = nodeDb[itemId];\n    if (parsedItem.description) {\n      if (Array.isArray(newNode.description)) {\n        newNode.shape = SHAPE_STATE_WITH_DESC;\n        newNode.description.push(parsedItem.description);\n      } else {\n        if (newNode.description.length > 0) {\n          newNode.shape = SHAPE_STATE_WITH_DESC;\n          if (newNode.description === itemId) {\n            newNode.description = [parsedItem.description];\n          } else {\n            newNode.description = [newNode.description, parsedItem.description];\n          }\n        } else {\n          newNode.shape = SHAPE_STATE;\n          newNode.description = parsedItem.description;\n        }\n      }\n      newNode.description = common.sanitizeTextOrArray(newNode.description, getConfig());\n    }\n    if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) {\n      newNode.shape = SHAPE_STATE;\n    }\n    if (!newNode.type && parsedItem.doc) {\n      log.info(\"Setting cluster for \", itemId, getDir(parsedItem));\n      newNode.type = \"group\";\n      newNode.dir = getDir(parsedItem);\n      newNode.shape = parsedItem.type === DIVIDER_TYPE ? SHAPE_DIVIDER : SHAPE_GROUP;\n      newNode.classes = newNode.classes + \" \" + CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : \"\");\n    }\n    const nodeData = {\n      labelStyle: \"\",\n      shape: newNode.shape,\n      labelText: newNode.description,\n      // typeof newNode.description === 'object'\n      //   ? newNode.description[0]\n      //   : newNode.description,\n      classes: newNode.classes,\n      style: \"\",\n      //styles.style,\n      id: itemId,\n      dir: newNode.dir,\n      domId: stateDomId(itemId, graphItemCount),\n      type: newNode.type,\n      padding: 15\n      //getConfig().flowchart.padding\n    };\n    nodeData.centerLabel = true;\n    if (parsedItem.note) {\n      const noteData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTE,\n        labelText: parsedItem.note.text,\n        classes: CSS_DIAGRAM_NOTE,\n        // useHtmlLabels: false,\n        style: \"\",\n        // styles.style,\n        id: itemId + NOTE_ID + \"-\" + graphItemCount,\n        domId: stateDomId(itemId, graphItemCount, NOTE),\n        type: newNode.type,\n        padding: 15\n        //getConfig().flowchart.padding\n      };\n      const groupData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTEGROUP,\n        labelText: parsedItem.note.text,\n        classes: newNode.classes,\n        style: \"\",\n        // styles.style,\n        id: itemId + PARENT_ID,\n        domId: stateDomId(itemId, graphItemCount, PARENT),\n        type: \"group\",\n        padding: 0\n        //getConfig().flowchart.padding\n      };\n      graphItemCount++;\n      const parentNodeId = itemId + PARENT_ID;\n      g.setNode(parentNodeId, groupData);\n      g.setNode(noteData.id, noteData);\n      g.setNode(itemId, nodeData);\n      g.setParent(itemId, parentNodeId);\n      g.setParent(noteData.id, parentNodeId);\n      let from = itemId;\n      let to = noteData.id;\n      if (parsedItem.note.position === \"left of\") {\n        from = noteData.id;\n        to = itemId;\n      }\n      g.setEdge(from, to, {\n        arrowhead: \"none\",\n        arrowType: \"\",\n        style: G_EDGE_STYLE,\n        labelStyle: \"\",\n        classes: CSS_EDGE_NOTE_EDGE,\n        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n        labelpos: G_EDGE_LABELPOS,\n        labelType: G_EDGE_LABELTYPE,\n        thickness: G_EDGE_THICKNESS\n      });\n    } else {\n      g.setNode(itemId, nodeData);\n    }\n  }\n  if (parent && parent.id !== \"root\") {\n    log.trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n    g.setParent(itemId, parent.id);\n  }\n  if (parsedItem.doc) {\n    log.trace(\"Adding nodes children \");\n    setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n  }\n};\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) => {\n  log.trace(\"items\", doc);\n  doc.forEach((item) => {\n    switch (item.stmt) {\n      case STMT_STATE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case DEFAULT_STATE_TYPE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case STMT_RELATION:\n        {\n          setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n          setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n          const edgeData = {\n            id: \"edge\" + graphItemCount,\n            arrowhead: \"normal\",\n            arrowTypeEnd: \"arrow_barb\",\n            style: G_EDGE_STYLE,\n            labelStyle: \"\",\n            label: common.sanitizeText(item.description, getConfig()),\n            arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n            labelpos: G_EDGE_LABELPOS,\n            labelType: G_EDGE_LABELTYPE,\n            thickness: G_EDGE_THICKNESS,\n            classes: CSS_EDGE\n          };\n          g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n          graphItemCount++;\n        }\n        break;\n    }\n  });\n};\nconst getDir = (parsedItem, defaultDir = DEFAULT_NESTED_DOC_DIR) => {\n  let dir = defaultDir;\n  if (parsedItem.doc) {\n    for (let i = 0; i < parsedItem.doc.length; i++) {\n      const parsedItemDoc = parsedItem.doc[i];\n      if (parsedItemDoc.stmt === \"dir\") {\n        dir = parsedItemDoc.value;\n      }\n    }\n  }\n  return dir;\n};\nconst draw = function(text, id, _version, diag) {\n  log.info(\"Drawing state diagram (v2)\", id);\n  nodeDb = {};\n  let dir = diag.db.getDirection();\n  if (dir === void 0) {\n    dir = DEFAULT_DIAGRAM_DIRECTION;\n  }\n  const { securityLevel, state: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n  log.info(diag.db.getRootDocV2());\n  diag.db.extract(diag.db.getRootDocV2());\n  log.info(diag.db.getRootDocV2());\n  const diagramStates = diag.db.getStates();\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: getDir(diag.db.getRootDocV2()),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  render(element, g, [\"barb\"], CSS_DIAGRAM, id);\n  const padding = 8;\n  utils.insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n  const bounds = svg.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  svg.attr(\"class\", CSS_DIAGRAM);\n  const svgBounds = svg.node().getBBox();\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  svg.attr(\"viewBox\", vBox);\n  const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n  for (const label of labels) {\n    const dim = label.getBBox();\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", SHAPE_STATE);\n    rect.setAttribute(\"rx\", 0);\n    rect.setAttribute(\"ry\", 0);\n    rect.setAttribute(\"width\", dim.width);\n    rect.setAttribute(\"height\", dim.height);\n    label.insertBefore(rect, label.firstChild);\n  }\n};\nconst renderer = {\n  setConf,\n  getClasses,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n//# sourceMappingURL=stateDiagram-v2-9765461d.js.map\n"],"names":["SHAPE_STATE","SHAPE_STATE_WITH_DESC","SHAPE_START","SHAPE_END","SHAPE_DIVIDER","SHAPE_GROUP","SHAPE_NOTE","SHAPE_NOTEGROUP","CSS_DIAGRAM","CSS_STATE","CSS_DIAGRAM_STATE","CSS_EDGE","CSS_NOTE","CSS_NOTE_EDGE","CSS_EDGE_NOTE_EDGE","CSS_DIAGRAM_NOTE","CSS_CLUSTER","CSS_DIAGRAM_CLUSTER","CSS_CLUSTER_ALT","CSS_DIAGRAM_CLUSTER_ALT","PARENT","NOTE","DOMID_STATE","DOMID_TYPE_SPACER","NOTE_ID","PARENT_ID","G_EDGE_STYLE","G_EDGE_ARROWHEADSTYLE","G_EDGE_LABELPOS","G_EDGE_LABELTYPE","G_EDGE_THICKNESS","nodeDb","graphItemCount","setConf","cnf","keys","Object","key","getClasses","text","diagramObj","l","db","clear","parser","parse","extract","getRootDocV2","e","getClassesFromDbInfo","dbInfoItem","classes","join","stateDomId","itemId","counter","type","typeSpacer","typeStr","length","setupNode","g","parent","parsedItem","diagramStates","diagramDb","altFlag","id","classStr","shape","start","description","newNode","Array","isArray","push","doc","getDir","dir","nodeData","labelStyle","labelText","style","domId","padding","note","noteData","groupData","parentNodeId","setNode","setParent","from","to","position","setEdge","arrowhead","arrowType","arrowheadStyle","labelpos","labelType","thickness","setupDoc","parentParsedItem","forEach","item","stmt","S","state1","state2","edgeData","arrowTypeEnd","label","defaultDir","i","parsedItemDoc","value","draw","_version","diag","getDirection","D","securityLevel","state","conf","nodeSpacing","rankSpacing","getStates","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","sandboxElement","root","nodes","contentDocument","body","svg","select","element","r","u","titleTopMargin","getDiagramTitle","bounds","node","getBBox","width","height","attr","svgBounds","useMaxWidth","vBox","x","y","labels","document","querySelectorAll","dim","rect","createElementNS","setAttribute","insertBefore","firstChild","renderer","diagram","styles","init","arrowMarkerAbsolute","d"],"sourceRoot":""}