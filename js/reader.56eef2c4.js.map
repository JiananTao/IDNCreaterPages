{"version":3,"file":"js/reader.56eef2c4.js","mappings":"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","sources":["webpack://IDNCreaterPages/./src/stores/novelStore.js","webpack://IDNCreaterPages/./src/views/ReaderView.vue","webpack://IDNCreaterPages/./src/components/tutorials/ReaderTutorial.vue","webpack://IDNCreaterPages/./src/components/tutorials/ReaderTutorial.vue?c628","webpack://IDNCreaterPages/./src/views/ReaderView.vue?8c8c"],"sourcesContent":["import { defineStore } from 'pinia'\n\nexport const useNovelStore = defineStore('novelState', {\n  // arrow function recommended for full type inference\n  state: () => {\n    return {\n      // all these properties will have their type inferred automatically\n      currentNovel: null,\n      novels: [\n        \n      ]\n    }\n  },\n  actions: {\n    async setCurrentNovel(text) {\n      this.currentNovel = text;\n    },\n    setNovelContent(index, content) {\n      this.novels[index].content = content;\n    },\n  },\n})","<template>\n  <div>\n    <ReaderTutorial></ReaderTutorial>\n    <header class=\"header\" v-if=\"store.btnToggle\">\n      <h1 class=\"h1\">Mulit-Author Interactive Novel Reader</h1>\n      <button class=\"button\" @click=\"importFile()\">Import</button>\n    </header>\n    <div>\n      <button @click=\"preScene\">⬅️</button>&emsp;\n      <h1 class=\"h1\">{{ novel.title }}</h1>\n      <p v-if=\"novel.author\">Written by {{ novel.author }}</p>\n      <hr />\n      <div v-for=\"(readContent, index) in readContents\" :key=\"index\" class=\"read-content\" v-html=\"readContent\"></div>\n      <p class=\"content\" v-html=\"highlightedCurrentSceneContent\" @click=\"handleWordClick\"></p>\n    </div>\n    <input type=\"file\" id=\"file-input\" style=\"display: none\" @change=\"onFileInputChange\">\n\n  </div>\n</template>\n\n<script>\nimport { useNovelStore } from '../stores/novelStore'\nimport { useStore } from '../stores/store'\nimport ReaderTutorial from '../components/tutorials/ReaderTutorial.vue';\nexport default {\n  components: {\n    ReaderTutorial,\n  },\n  setup() {\n    const store = useStore();\n    const novelStore = useNovelStore();\n    return { store, novelStore }\n  },\n  //props: ['story'],\n  data() {\n    return {\n      //灰色已阅读部分\n      readContents: [],\n      readingOrder: [],\n      novel: {\n        title: '',\n        author: '',\n        content: ''\n      },\n      paragraphs: [],\n      currentScene: {\n        sourceIndex: '',\n        wordIndex: '',\n        content: ''\n      },\n      \n    }\n  },\n  created() {\n    this.fromHome();\n  },\n  computed: {\n    highlightedCurrentSceneContent() {\n      //console.log(\"开始替换高亮词\");\n      let content = this.currentScene.content;\n      this.paragraphs.forEach((paragraph) => {\n        if (paragraph.sourceIndex === this.currentScene.paragraphIndex) {\n          //g表示全局匹配,i表示不区分大小写    \n          const regex = new RegExp(`(${paragraph.wordIndex})`, 'gi');\n          //console.log(\"检测到高亮词: \" + paragraph.wordIndex)\n          content = content.replace(regex, `<span class=\"highlighted-word\">$1</span>`);\n        }\n      });\n      return content;\n    }\n  },\n  methods: {\n    fromHome() {\n      if (this.$route.query.startReading) {\n        // Start reading automatically\n        //console.log(this.novelStore.currentNovel);\n        if (this.novelStore.currentNovel != null) {\n          this.parseNovelText(this.novelStore.currentNovel);\n          //console.log(this.novelStore.currentNovel);\n        } else {\n          alert(\"请先前往community界面选中书籍\")\n        }\n      }\n      return null;\n    },\n    preScene() {\n      if (this.readingOrder.length > 1) {\n        const preNode = this.readingOrder[this.readingOrder.length - 1];\n        const preParagraph = this.paragraphs.find((paragraph) => {\n          return paragraph.paragraphIndex === preNode;\n        });\n        this.readingOrder.pop(); // 移除当前场景\n        this.readContents.pop(); // 移除最后一个已读段落\n        if (preParagraph) {\n          this.currentScene.sourceIndex = preParagraph.sourceIndex;\n          this.currentScene.wordIndex = preParagraph.wordIndex;\n          this.currentScene.content = preParagraph.content;\n          this.currentScene.paragraphIndex = preParagraph.paragraphIndex;\n        } else {\n          alert(\"没找到上一个场景，请确定你不是在第一个场景内\");\n        }\n      } else {\n        alert(\"已经是第一个场景，无法返回\");\n      }\n    },\n    importFile() {\n      document.getElementById('file-input').click();\n    },\n    onFileInputChange(event) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const text = event.target.result;\n        this.parseNovelText(text);\n      };\n      reader.readAsText(file);\n    },\n    parseNovelText(text) {\n      const lines = text.trim().split('\\n');\n      let title = '';\n      let author = '';\n      let content = '';\n      let l = 0;\n      this.store.btnToggle = !this.store.btnToggle;\n      for (let line of lines) {\n        if (line.startsWith('Story Title: ')) {\n          title = line.slice(13);\n        } else if (line.startsWith('Authors: ')) {\n          author = line.slice(9);\n        } else {\n          content += line + '<br/>';\n          l += 1\n        }\n      }\n      this.novel.title = title;\n      this.novel.author = author;\n      this.novel.content = content;\n\n      const nodes = content.split('<br/>');\n      for (let i = 0; i < l + 1; i++) {\n        this.paragraphs.push({\n          sourceIndex: null,\n          wordIndex: null,\n          content: \"\",\n          paragraphIndex: i\n        });\n      }\n      \n      nodes.forEach((paragraphText, i) => {\n        const matches = paragraphText.match(/\\[(\\d+)\\] \\[(.*?)\\] (.+) \\[(\\d+)\\]/);\n        if (matches) {\n          const sourceIndex = parseInt(matches[1]);\n          const wordIndex = matches[2];\n          const content = matches[3];\n          const paragraphIndex = parseInt(matches[4]);\n          \n\n          this.paragraphs[paragraphIndex].sourceIndex = sourceIndex;\n          this.paragraphs[paragraphIndex].wordIndex = wordIndex;\n          this.paragraphs[paragraphIndex].content = content;\n          this.paragraphs[paragraphIndex].paragraphIndex = paragraphIndex;\n\n          if (i === 0) {\n            this.currentScene.sourceIndex = sourceIndex;\n            this.currentScene.wordIndex = wordIndex;\n            this.currentScene.content = content;\n            this.currentScene.paragraphIndex = paragraphIndex;\n            this.readingOrder.push(this.currentScene.paragraphIndex);\n            //this.readContents.push(this.currentScene.content);\n          }\n        }\n      });\n    },\n    handleWordClick(event) {\n      const selectedWord = event.target.closest('.highlighted-word');\n      if (selectedWord) {\n        const wordIndex = selectedWord.textContent.trim();\n        const nextParagraph = this.paragraphs.find((paragraph) => {\n          return paragraph.sourceIndex === this.currentScene.paragraphIndex\n            && paragraph.wordIndex.toLowerCase() === wordIndex.toLowerCase();\n        });\n        if (nextParagraph) {\n          this.readContents.push(this.currentScene.content);\n          this.readingOrder.push(this.currentScene.paragraphIndex);\n          this.currentScene.sourceIndex = nextParagraph.sourceIndex;\n          this.currentScene.wordIndex = nextParagraph.wordIndex;\n          this.currentScene.content = nextParagraph.content;\n          this.currentScene.paragraphIndex = nextParagraph.paragraphIndex;\n        } else {\n          alert(\"No scene is connected to this word.\");\n        }\n      }\n    },\n  }\n};\n</script>\n<style>\n.header {\n  display: flex;\n  /* 将 header 标签的 display 属性设置为 flex */\n  align-items: center;\n  /* 垂直居中 */\n  justify-content: space-between;\n  /* 将子元素分散对齐 */\n  padding: 10px;\n  /* 添加 padding 以增加内容的内边距 */\n}\n\n.content {\n  font-size: 2em;\n  text-indent: 2em;\n  text-align: left;\n}\n\n\n.h1 {\n  display: inline-block;\n  vertical-align: middle;\n  /* 可以让按钮和标题在同一垂直位置 */\n}\n\n\n.read-content {\n  font-size: 2em;\n  text-indent: 2em;\n  text-align: left;\n  opacity: 0.5;\n  pointer-events: none;\n}\n\n</style>\n","<template>\n    <transition name=\"fade\">\n      <div v-if=\"this.store.tutorialToggle\" class=\"tutorial\">\n        <div class=\"tutorial-item\">\n          <button class=\"button\">Import</button>\n          <p>点击这个按钮可以导入一个电子书籍。</p>\n        </div>\n        <div class=\"tutorial-item\">\n            <span>In a</span><span class=\"highlighted-word\"> distant</span><span>land</span>\n          <p>点击发蓝光文字可以前往关键词对应的下一故事进展。</p>\n        </div>\n        <div class=\"tutorial-item\">\n          <button class=\"preScene-btn\">⬅️</button>\n          <p>点击这个按钮可以返回到上一个关键词所在的段落。</p>\n        </div>\n      </div>\n    </transition>\n  </template>\n<script>\nimport { useStore } from '../../stores/store';\n\nexport default {\n  setup() {\n    const store = useStore();\n    return { store };\n  },\n};\n</script>\n  ","import { render } from \"./ReaderTutorial.vue?vue&type=template&id=6559cccc\"\nimport script from \"./ReaderTutorial.vue?vue&type=script&lang=js\"\nexport * from \"./ReaderTutorial.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/tggs636/Desktop/IDNCreater/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./ReaderView.vue?vue&type=template&id=4a4692a0\"\nimport script from \"./ReaderView.vue?vue&type=script&lang=js\"\nexport * from \"./ReaderView.vue?vue&type=script&lang=js\"\n\nimport \"./ReaderView.vue?vue&type=style&index=0&id=4a4692a0&lang=css\"\n\nimport exportComponent from \"/Users/tggs636/Desktop/IDNCreater/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["useNovelStore","defineStore","state","currentNovel","novels","actions","async","text","this","setNovelContent","index","content","class","_createElementVNode","_createElementBlock","_createVNode","_component_ReaderTutorial","$setup","btnToggle","_hoisted_1","_hoisted_2","onClick","$options","_hoisted_3","$data","title","author","_hoisted_5","_Fragment","readContent","key","innerHTML","type","id","style","onChange","_hoisted_4","_createBlock","_Transition","name","store","tutorialToggle","setup","useStore","__exports__","components","ReaderTutorial","novelStore","data","readContents","readingOrder","novel","paragraphs","currentScene","sourceIndex","wordIndex","created","fromHome","computed","highlightedCurrentSceneContent","forEach","paragraph","paragraphIndex","regex","RegExp","replace","methods","$route","query","startReading","parseNovelText","alert","preScene","length","preNode","preParagraph","find","pop","importFile","document","getElementById","click","onFileInputChange","event","file","target","files","reader","FileReader","onload","result","readAsText","lines","trim","split","l","line","startsWith","slice","nodes","i","push","paragraphText","matches","match","parseInt","handleWordClick","selectedWord","closest","textContent","nextParagraph","toLowerCase","render"],"sourceRoot":""}