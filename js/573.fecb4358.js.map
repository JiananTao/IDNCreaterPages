{"version":3,"file":"js/573.fecb4358.js","mappings":"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","sources":["webpack://IDNCreaterPages/../../src/index.js","webpack://IDNCreaterPages/../src/rendering-util/handle-markdown-text.js","webpack://IDNCreaterPages/../src/rendering-util/createText.js"],"sourcesContent":["/* eslint-disable prefer-spread, no-regex-spaces, no-unused-vars, guard-for-in, no-console, no-var */\n// @flow\n\n/**\n * Simple-Markdown\n * ===============\n *\n * Simple-Markdown's primary goal is to be easy to adapt. It aims\n * to be compliant with John Gruber's [Markdown Syntax page][1],\n * but compatiblity with other markdown implementations' edge-cases\n * will be sacrificed where it conflicts with simplicity or\n * extensibility.\n *\n * If your goal is to simply embed a standard markdown implementation\n * in your website, simple-markdown is probably not the best library\n * for you (although it should work). But if you have struggled to\n * customize an existing library to meet your needs, simple-markdown\n * might be able to help.\n *\n * Many of the regexes and original logic has been adapted from\n * the wonderful [marked.js](https://github.com/chjj/marked)\n */\n\n// Flow Type Definitions:\n\ntype Capture =\n    | (Array<string> & {index: number})\n    | (Array<string> & {index?: number});\n\ntype Attr = string | number | boolean | null | void;\n\ntype SingleASTNode = {\n    type: string,\n    [string]: any,\n};\n\ntype UnTypedASTNode = {\n    [string]: any,\n};\n\ntype ASTNode = SingleASTNode | Array<SingleASTNode>;\n\ntype State = {\n    key?: string | number | void,\n    inline?: ?boolean,\n    [string]: any,\n};\n\ntype ReactElement = React$Element<any>;\ntype ReactElements = React$Node;\n\ntype MatchFunction = {regex?: RegExp} & ((\n    source: string,\n    state: State,\n    prevCapture: string,\n) => ?Capture);\n\ntype Parser = (source: string, state?: ?State) => Array<SingleASTNode>;\n\ntype ParseFunction = (\n    capture: Capture,\n    nestedParse: Parser,\n    state: State,\n) => UnTypedASTNode | ASTNode;\n\ntype SingleNodeParseFunction = (\n    capture: Capture,\n    nestedParse: Parser,\n    state: State,\n) => UnTypedASTNode;\n\ntype Output<Result> = (node: ASTNode, state?: ?State) => Result;\n\ntype NodeOutput<Result> = (\n    node: SingleASTNode,\n    nestedOutput: Output<Result>,\n    state: State,\n) => Result;\n\ntype ArrayNodeOutput<Result> = (\n    node: Array<SingleASTNode>,\n    nestedOutput: Output<Result>,\n    state: State,\n) => Result;\n\ntype ReactOutput = Output<ReactElements>;\ntype ReactNodeOutput = NodeOutput<ReactElements>;\ntype HtmlOutput = Output<string>;\ntype HtmlNodeOutput = NodeOutput<string>;\n\ntype ParserRule = {\n    +order: number,\n    +match: MatchFunction,\n    +quality?: (capture: Capture, state: State, prevCapture: string) => number,\n    +parse: ParseFunction,\n};\n\ntype SingleNodeParserRule = {\n    +order: number,\n    +match: MatchFunction,\n    +quality?: (capture: Capture, state: State, prevCapture: string) => number,\n    +parse: SingleNodeParseFunction,\n};\n\ntype ReactOutputRule = {\n    // we allow null because some rules are never output results, and that's\n    // legal as long as no parsers return an AST node matching that rule.\n    // We don't use ? because this makes it be explicitly defined as either\n    // a valid function or null, so it can't be forgotten.\n    +react: ReactNodeOutput | null,\n};\n\ntype HtmlOutputRule = {\n    +html: HtmlNodeOutput | null,\n};\n\ntype ArrayRule = {\n    +react?: ArrayNodeOutput<ReactElements>,\n    +html?: ArrayNodeOutput<string>,\n    +[string]: ArrayNodeOutput<any>,\n};\n\ntype ParserRules = {\n    +Array?: ArrayRule,\n    +[type: string]: ParserRule,\n};\n\ntype OutputRules<Rule> = {\n    +Array?: ArrayRule,\n    +[type: string]: Rule,\n};\ntype Rules<OutputRule> = {\n    +Array?: ArrayRule,\n    +[type: string]: ParserRule & OutputRule,\n};\ntype ReactRules = {\n    +Array?: {\n        +react: ArrayNodeOutput<ReactElements>,\n    },\n    +[type: string]: ParserRule & ReactOutputRule,\n};\ntype HtmlRules = {\n    +Array?: {\n        +html: ArrayNodeOutput<string>,\n    },\n    +[type: string]: ParserRule & HtmlOutputRule,\n};\n\n// We want to clarify our defaultRules types a little bit more so clients can\n// reuse defaultRules built-ins. So we make some stronger guarantess when\n// we can:\ntype NonNullReactOutputRule = {\n    +react: ReactNodeOutput,\n};\ntype ElementReactOutputRule = {\n    +react: NodeOutput<ReactElement>,\n};\ntype TextReactOutputRule = {\n    +react: NodeOutput<string>,\n};\ntype NonNullHtmlOutputRule = {\n    +html: HtmlNodeOutput,\n};\n\ntype DefaultInRule = SingleNodeParserRule & ReactOutputRule & HtmlOutputRule;\ntype TextInOutRule = SingleNodeParserRule &\n    TextReactOutputRule &\n    NonNullHtmlOutputRule;\ntype LenientInOutRule = SingleNodeParserRule &\n    NonNullReactOutputRule &\n    NonNullHtmlOutputRule;\ntype DefaultInOutRule = SingleNodeParserRule &\n    ElementReactOutputRule &\n    NonNullHtmlOutputRule;\n\ntype DefaultRules = {\n    +Array: {\n        +react: ArrayNodeOutput<ReactElements>,\n        +html: ArrayNodeOutput<string>,\n    },\n    +heading: DefaultInOutRule,\n    +nptable: DefaultInRule,\n    +lheading: DefaultInRule,\n    +hr: DefaultInOutRule,\n    +codeBlock: DefaultInOutRule,\n    +fence: DefaultInRule,\n    +blockQuote: DefaultInOutRule,\n    +list: DefaultInOutRule,\n    +def: LenientInOutRule,\n    +table: DefaultInOutRule,\n    +tableSeparator: DefaultInRule,\n    +newline: TextInOutRule,\n    +paragraph: DefaultInOutRule,\n    +escape: DefaultInRule,\n    +autolink: DefaultInRule,\n    +mailto: DefaultInRule,\n    +url: DefaultInRule,\n    +link: DefaultInOutRule,\n    +image: DefaultInOutRule,\n    +reflink: DefaultInRule,\n    +refimage: DefaultInRule,\n    +em: DefaultInOutRule,\n    +strong: DefaultInOutRule,\n    +u: DefaultInOutRule,\n    +del: DefaultInOutRule,\n    +inlineCode: DefaultInOutRule,\n    +br: DefaultInOutRule,\n    +text: TextInOutRule,\n};\n\ntype RefNode = {\n    type: string,\n    content?: ASTNode,\n    target?: string,\n    title?: string,\n    alt?: string,\n};\n\n// End Flow Definitions\n\nvar CR_NEWLINE_R = /\\r\\n?/g;\nvar TAB_R = /\\t/g;\nvar FORMFEED_R = /\\f/g;\n\n/**\n * Turn various whitespace into easy-to-process whitespace\n */\nvar preprocess = function (source: string): string {\n    return source\n        .replace(CR_NEWLINE_R, \"\\n\")\n        .replace(FORMFEED_R, \"\")\n        .replace(TAB_R, \"    \");\n};\n\nvar populateInitialState = function (\n    givenState: ?State,\n    defaultState: ?State,\n): State {\n    var state: State = givenState || {};\n    if (defaultState != null) {\n        for (var prop in defaultState) {\n            // $FlowFixMe\n            if (Object.prototype.hasOwnProperty.call(defaultState, prop)) {\n                state[prop] = defaultState[prop];\n            }\n        }\n    }\n    return state;\n};\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @param {SimpleMarkdown.ParserRules} rules\n *     an object containing\n *     rule type -> {match, order, parse} objects\n *     (lower order is higher precedence)\n * @param {SimpleMarkdown.OptionalState} [defaultState]\n *\n * @returns {SimpleMarkdown.Parser}\n *     The resulting parse function, with the following parameters:\n *     @source: the input source string to be parsed\n *     @state: an optional object to be threaded through parse\n *         calls. Allows clients to add stateful operations to\n *         parsing, such as keeping track of how many levels deep\n *         some nesting is. For an example use-case, see passage-ref\n *         parsing in src/widgets/passage/passage-markdown.jsx\n */\nvar parserFor = function (rules: ParserRules, defaultState: ?State): Parser {\n    // Sorts rules in order of increasing order, then\n    // ascending rule name in case of ties.\n    var ruleList = Object.keys(rules).filter(function (type) {\n        var rule = rules[type];\n        if (rule == null || rule.match == null) {\n            return false;\n        }\n        var order = rule.order;\n        if (\n            (typeof order !== \"number\" || !isFinite(order)) &&\n            typeof console !== \"undefined\"\n        ) {\n            console.warn(\n                \"simple-markdown: Invalid order for rule `\" +\n                    type +\n                    \"`: \" +\n                    String(order),\n            );\n        }\n        return true;\n    });\n\n    ruleList.sort(function (typeA, typeB) {\n        var ruleA: ParserRule = (rules[typeA]: any);\n        var ruleB: ParserRule = (rules[typeB]: any);\n        var orderA = ruleA.order;\n        var orderB = ruleB.order;\n\n        // First sort based on increasing order\n        if (orderA !== orderB) {\n            return orderA - orderB;\n        }\n\n        var secondaryOrderA = ruleA.quality ? 0 : 1;\n        var secondaryOrderB = ruleB.quality ? 0 : 1;\n\n        if (secondaryOrderA !== secondaryOrderB) {\n            return secondaryOrderA - secondaryOrderB;\n\n            // Then based on increasing unicode lexicographic ordering\n        } else if (typeA < typeB) {\n            return -1;\n        } else if (typeA > typeB) {\n            return 1;\n        } else {\n            // Rules should never have the same name,\n            // but this is provided for completeness.\n            return 0;\n        }\n    });\n\n    var latestState: State;\n    var nestedParse: Parser = function (\n        source: string,\n        state: ?State,\n    ): Array<SingleASTNode> {\n        var result: Array<SingleASTNode> = [];\n        state = state || latestState;\n        latestState = state;\n        while (source) {\n            // store the best match, it's rule, and quality:\n            var ruleType = null;\n            var rule = null;\n            var capture = null;\n            var quality = NaN;\n\n            // loop control variables:\n            var i = 0;\n            var currRuleType = ruleList[0];\n\n            // $FlowFixMe\n            var currRule: ParserRule = rules[currRuleType];\n\n            do {\n                var currOrder = currRule.order;\n                var prevCaptureStr =\n                    state.prevCapture == null ? \"\" : state.prevCapture[0];\n                var currCapture = currRule.match(source, state, prevCaptureStr);\n\n                if (currCapture) {\n                    var currQuality = currRule.quality\n                        ? currRule.quality(currCapture, state, prevCaptureStr)\n                        : 0;\n                    // This should always be true the first time because\n                    // the initial quality is NaN (that's why there's the\n                    // condition negation).\n                    if (!(currQuality <= quality)) {\n                        ruleType = currRuleType;\n                        rule = currRule;\n                        capture = currCapture;\n                        quality = currQuality;\n                    }\n                }\n\n                // Move on to the next item.\n                // Note that this makes `currRule` be the next item\n                i++;\n                currRuleType = ruleList[i];\n                // $FlowFixMe\n                currRule = rules[currRuleType];\n            } while (\n                // keep looping while we're still within the ruleList\n                currRule &&\n                // if we don't have a match yet, continue\n                (!capture ||\n                    // or if we have a match, but the next rule is\n                    // at the same order, and has a quality measurement\n                    // functions, then this rule must have a quality\n                    // measurement function (since they are sorted before\n                    // those without), and we need to check if there is\n                    // a better quality match\n                    (currRule.order === currOrder && currRule.quality))\n            );\n\n            // TODO(aria): Write tests for these\n            if (rule == null || capture == null) {\n                throw new Error(\n                    \"Could not find a matching rule for the below \" +\n                        \"content. The rule with highest `order` should \" +\n                        \"always match content provided to it. Check \" +\n                        \"the definition of `match` for '\" +\n                        ruleList[ruleList.length - 1] +\n                        \"'. It seems to not match the following source:\\n\" +\n                        source,\n                );\n            }\n            if (capture.index) {\n                // If present and non-zero, i.e. a non-^ regexp result:\n                throw new Error(\n                    \"`match` must return a capture starting at index 0 \" +\n                        \"(the current parse index). Did you forget a ^ at the \" +\n                        \"start of the RegExp?\",\n                );\n            }\n\n            var parsed = rule.parse(capture, nestedParse, state);\n            // We maintain the same object here so that rules can\n            // store references to the objects they return and\n            // modify them later. (oops sorry! but this adds a lot\n            // of power--see reflinks.)\n            if (Array.isArray(parsed)) {\n                // $FlowFixMe\n                Array.prototype.push.apply(result, parsed);\n            } else {\n                if (parsed == null || typeof parsed !== \"object\") {\n                    throw new Error(\n                        `parse() function returned invalid parse result: '${parsed}'`,\n                    );\n                }\n\n                // We also let rules override the default type of\n                // their parsed node if they would like to, so that\n                // there can be a single output function for all links,\n                // even if there are several rules to parse them.\n                if (parsed.type == null) {\n                    // $FlowFixMe\n                    parsed.type = ruleType;\n                }\n                result.push(parsed);\n            }\n\n            state.prevCapture = capture;\n            source = source.substring(state.prevCapture[0].length);\n        }\n\n        // $FlowFixMe\n        return result;\n    };\n\n    var outerParse: Parser = function (\n        source: string,\n        state: ?State,\n    ): Array<SingleASTNode> {\n        latestState = populateInitialState(state, defaultState);\n        if (!latestState.inline && !latestState.disableAutoBlockNewlines) {\n            source = source + \"\\n\\n\";\n        }\n        // We store the previous capture so that match functions can\n        // use some limited amount of lookbehind. Lists use this to\n        // ensure they don't match arbitrary '- ' or '* ' in inline\n        // text (see the list rule for more information). This stores\n        // the full regex capture object, if there is one.\n        latestState.prevCapture = null;\n        return nestedParse(preprocess(source), latestState);\n    };\n\n    // $FlowFixMe\n    return outerParse;\n};\n\n// Creates a match function for an inline scoped element from a regex\nvar inlineRegex = function (regex: RegExp): MatchFunction {\n    var match = function (\n        source: string,\n        state: State,\n        prevCapture: string,\n    ): ?Capture {\n        if (state.inline) {\n            // $FlowFixMe\n            return regex.exec(source);\n        } else {\n            return null;\n        }\n    };\n    match.regex = regex;\n\n    return match;\n};\n\n// Creates a match function for a block scoped element from a regex\nvar blockRegex = function (regex: RegExp): MatchFunction {\n    // $FlowFixMe\n    var match: MatchFunction = function (source, state) {\n        if (state.inline) {\n            return null;\n        } else {\n            return regex.exec(source);\n        }\n    };\n    match.regex = regex;\n    return match;\n};\n\n// Creates a match function from a regex, ignoring block/inline scope\nvar anyScopeRegex = function (regex: RegExp): MatchFunction {\n    // $FlowFixMe\n    var match: MatchFunction = function (source, state) {\n        return regex.exec(source);\n    };\n    match.regex = regex;\n    return match;\n};\n\nvar TYPE_SYMBOL =\n    (typeof Symbol === \"function\" &&\n        Symbol.for &&\n        Symbol.for(\"react.element\")) ||\n    0xeac7;\n\nvar reactElement = function (\n    type: string,\n    key: string | number | null | void,\n    props: {[string]: any},\n): ReactElement {\n    var element: ReactElement = ({\n        $$typeof: TYPE_SYMBOL,\n        type: type,\n        key: key == null ? undefined : key,\n        ref: null,\n        props: props,\n        _owner: null,\n    }: any);\n    return element;\n};\n\n/** Returns a closed HTML tag.\n * @param {string} tagName - Name of HTML tag (eg. \"em\" or \"a\")\n * @param {string} content - Inner content of tag\n * @param {{ [attr: string]: SimpleMarkdown.Attr }} [attributes] - Optional extra attributes of tag as an object of key-value pairs\n *   eg. { \"href\": \"http://google.com\" }. Falsey attributes are filtered out.\n * @param {boolean} [isClosed] - boolean that controls whether tag is closed or not (eg. img tags).\n *   defaults to true\n */\nvar htmlTag = function (\n    tagName: string,\n    content: string,\n    attributes: ?{[any]: ?Attr},\n    isClosed: ?boolean,\n) {\n    attributes = attributes || {};\n    isClosed = typeof isClosed !== \"undefined\" ? isClosed : true;\n\n    var attributeString = \"\";\n    for (var attr in attributes) {\n        var attribute = attributes[attr];\n        // Removes falsey attributes\n        if (\n            // $FlowFixMe\n            Object.prototype.hasOwnProperty.call(attributes, attr) &&\n            attribute\n        ) {\n            attributeString +=\n                \" \" + sanitizeText(attr) + '=\"' + sanitizeText(attribute) + '\"';\n        }\n    }\n\n    var unclosedTag = \"<\" + tagName + attributeString + \">\";\n\n    if (isClosed) {\n        return unclosedTag + content + \"</\" + tagName + \">\";\n    } else {\n        return unclosedTag;\n    }\n};\n\nvar EMPTY_PROPS = {};\n\n/**\n * @param {string | null | undefined} url - url to sanitize\n * @returns {string | null} - url if safe, or null if a safe url could not be made\n */\nvar sanitizeUrl = function (url: ?string) {\n    if (url == null) {\n        return null;\n    }\n    try {\n        var prot = new URL(url, \"https://localhost\").protocol;\n        if (\n            prot.indexOf(\"javascript:\") === 0 ||\n            prot.indexOf(\"vbscript:\") === 0 ||\n            prot.indexOf(\"data:\") === 0\n        ) {\n            return null;\n        }\n    } catch (e) {\n        // invalid URLs should throw a TypeError\n        // see for instance: `new URL(\"\");`\n        return null;\n    }\n    return url;\n};\n\nvar SANITIZE_TEXT_R = /[<>&\"']/g;\nvar SANITIZE_TEXT_CODES = {\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    \"&\": \"&amp;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#x27;\",\n    \"/\": \"&#x2F;\",\n    \"`\": \"&#96;\",\n};\n\nvar sanitizeText = function (text: Attr): string {\n    return String(text).replace(SANITIZE_TEXT_R, function (chr) {\n        return SANITIZE_TEXT_CODES[chr];\n    });\n};\n\nvar UNESCAPE_URL_R = /\\\\([^0-9A-Za-z\\s])/g;\n\nvar unescapeUrl = function (rawUrlString: string): string {\n    return rawUrlString.replace(UNESCAPE_URL_R, \"$1\");\n};\n\n/**\n * Parse some content with the parser `parse`, with state.inline\n * set to true. Useful for block elements; not generally necessary\n * to be used by inline elements (where state.inline is already true.\n */\nvar parseInline = function (\n    parse: Parser,\n    content: string,\n    state: State,\n): ASTNode {\n    var isCurrentlyInline = state.inline || false;\n    state.inline = true;\n    var result = parse(content, state);\n    state.inline = isCurrentlyInline;\n    return result;\n};\n\nvar parseBlock = function (\n    parse: Parser,\n    content: string,\n    state: State,\n): ASTNode {\n    var isCurrentlyInline = state.inline || false;\n    state.inline = false;\n    var result = parse(content + \"\\n\\n\", state);\n    state.inline = isCurrentlyInline;\n    return result;\n};\n\nvar parseCaptureInline = function (\n    capture: Capture,\n    parse: Parser,\n    state: State,\n): UnTypedASTNode {\n    return {\n        content: parseInline(parse, capture[1], state),\n    };\n};\n\nvar ignoreCapture = function (): UnTypedASTNode {\n    return {};\n};\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nvar LIST_BULLET = \"(?:[*+-]|\\\\d+\\\\.)\";\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nvar LIST_ITEM_PREFIX = \"( *)(\" + LIST_BULLET + \") +\";\nvar LIST_ITEM_PREFIX_R = new RegExp(\"^\" + LIST_ITEM_PREFIX);\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nvar LIST_ITEM_R = new RegExp(\n    LIST_ITEM_PREFIX +\n        \"[^\\\\n]*(?:\\\\n\" +\n        \"(?!\\\\1\" +\n        LIST_BULLET +\n        \" )[^\\\\n]*)*(\\n|$)\",\n    \"gm\",\n);\nvar BLOCK_END_R = /\\n{2,}$/;\nvar INLINE_CODE_ESCAPE_BACKTICKS_R = /^ (?= *`)|(` *) $/g;\n// recognize the end of a paragraph block inside a list item:\n// two or more newlines at end end of the item\nvar LIST_BLOCK_END_R = BLOCK_END_R;\nvar LIST_ITEM_END_R = / *\\n+$/;\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nvar LIST_R = new RegExp(\n    \"^( *)(\" +\n        LIST_BULLET +\n        \") \" +\n        \"[\\\\s\\\\S]+?(?:\\n{2,}(?! )\" +\n        \"(?!\\\\1\" +\n        LIST_BULLET +\n        \" )\\\\n*\" +\n        // the \\\\s*$ here is so that we can parse the inside of nested\n        // lists, where our content might end before we receive two `\\n`s\n        \"|\\\\s*\\n*$)\",\n);\nvar LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/;\n\nvar TABLES = (function () {\n    // predefine regexes so we don't have to create them inside functions\n    // sure, regex literals should be fast, even inside functions, but they\n    // aren't in all browsers.\n    var TABLE_BLOCK_TRIM = /\\n+/g;\n    var TABLE_ROW_SEPARATOR_TRIM = /^ *\\| *| *\\| *$/g;\n    var TABLE_CELL_END_TRIM = / *$/;\n    var TABLE_RIGHT_ALIGN = /^ *-+: *$/;\n    var TABLE_CENTER_ALIGN = /^ *:-+: *$/;\n    var TABLE_LEFT_ALIGN = /^ *:-+ *$/;\n\n    // TODO: This needs a real type\n    type TableAlignment = any;\n\n    var parseTableAlignCapture = function (\n        alignCapture: string,\n    ): TableAlignment {\n        if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n            return \"right\";\n        } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n            return \"center\";\n        } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n            return \"left\";\n        } else {\n            return null;\n        }\n    };\n\n    var parseTableAlign = function (\n        source: string,\n        parse: Parser,\n        state: State,\n        trimEndSeparators: boolean,\n    ): Array<TableAlignment> {\n        if (trimEndSeparators) {\n            source = source.replace(TABLE_ROW_SEPARATOR_TRIM, \"\");\n        }\n        var alignText = source.trim().split(\"|\");\n        return alignText.map(parseTableAlignCapture);\n    };\n\n    var parseTableRow = function (\n        source: string,\n        parse: Parser,\n        state: State,\n        trimEndSeparators: boolean,\n    ): Array<Array<SingleASTNode>> {\n        var prevInTable = state.inTable;\n        state.inTable = true;\n        var tableRow = parse(source.trim(), state);\n        state.inTable = prevInTable;\n\n        var cells = [[]];\n        tableRow.forEach(function (node, i) {\n            if (node.type === \"tableSeparator\") {\n                // Filter out empty table separators at the start/end:\n                if (\n                    !trimEndSeparators ||\n                    (i !== 0 && i !== tableRow.length - 1)\n                ) {\n                    // Split the current row:\n                    cells.push([]);\n                }\n            } else {\n                if (\n                    node.type === \"text\" &&\n                    (tableRow[i + 1] == null ||\n                        tableRow[i + 1].type === \"tableSeparator\")\n                ) {\n                    node.content = node.content.replace(\n                        TABLE_CELL_END_TRIM,\n                        \"\",\n                    );\n                }\n                cells[cells.length - 1].push(node);\n            }\n        });\n\n        return cells;\n    };\n\n    /**\n     * @param {string} source\n     * @param {SimpleMarkdown.Parser} parse\n     * @param {SimpleMarkdown.State} state\n     * @param {boolean} trimEndSeparators\n     * @returns {SimpleMarkdown.ASTNode[][]}\n     */\n    var parseTableCells = function (\n        source: string,\n        parse: Parser,\n        state: State,\n        trimEndSeparators: boolean,\n    ): Array<Array<ASTNode>> {\n        var rowsText = source.trim().split(\"\\n\");\n\n        return rowsText.map(function (rowText) {\n            // $FlowFixMe\n            return parseTableRow(rowText, parse, state, trimEndSeparators);\n        });\n    };\n\n    /**\n     * @param {boolean} trimEndSeparators\n     * @returns {SimpleMarkdown.SingleNodeParseFunction}\n     */\n    var parseTable = function (trimEndSeparators) {\n        return function (capture, parse, state) {\n            state.inline = true;\n            var header = parseTableRow(\n                capture[1],\n                parse,\n                state,\n                trimEndSeparators,\n            );\n            var align = parseTableAlign(\n                capture[2],\n                parse,\n                state,\n                trimEndSeparators,\n            );\n            var cells = parseTableCells(\n                capture[3],\n                parse,\n                state,\n                trimEndSeparators,\n            );\n            state.inline = false;\n\n            return {\n                type: \"table\",\n                header: header,\n                align: align,\n                cells: cells,\n            };\n        };\n    };\n\n    return {\n        parseTable: parseTable(true),\n        parseNpTable: parseTable(false),\n        TABLE_REGEX:\n            /^ *(\\|.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/,\n        NPTABLE_REGEX:\n            /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n    };\n})();\n\nvar LINK_INSIDE = \"(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*\";\nvar LINK_HREF_AND_TITLE =\n    \"\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\";\nvar AUTOLINK_MAILTO_CHECK_R = /mailto:/i;\n\nvar parseRef = function (\n    capture: Capture,\n    state: State,\n    refNode: RefNode,\n): RefNode {\n    var ref = (capture[2] || capture[1]).replace(/\\s+/g, \" \").toLowerCase();\n\n    // We store information about previously seen defs on\n    // state._defs (_ to deconflict with client-defined\n    // state). If the def for this reflink/refimage has\n    // already been seen, we can use its target/source\n    // and title here:\n    if (state._defs && state._defs[ref]) {\n        var def = state._defs[ref];\n        // `refNode` can be a link or an image. Both use\n        // target and title properties.\n        refNode.target = def.target;\n        refNode.title = def.title;\n    }\n\n    // In case we haven't seen our def yet (or if someone\n    // overwrites that def later on), we add this node\n    // to the list of ref nodes for that def. Then, when\n    // we find the def, we can modify this link/image AST\n    // node :).\n    // I'm sorry.\n    state._refs = state._refs || {};\n    state._refs[ref] = state._refs[ref] || [];\n    state._refs[ref].push(refNode);\n\n    return refNode;\n};\n\nvar currOrder = 0;\n\nvar defaultRules: DefaultRules = {\n    Array: {\n        react: function (arr, output, state) {\n            var oldKey = state.key;\n            var result: Array<ReactElements> = [];\n\n            // map output over the ast, except group any text\n            // nodes together into a single string output.\n            for (var i = 0, key = 0; i < arr.length; i++, key++) {\n                // `key` is our numerical `state.key`, which we increment for\n                // every output node, but don't change for joined text nodes.\n                // (i, however, must change for joined text nodes)\n                state.key = \"\" + i;\n\n                var node = arr[i];\n                if (node.type === \"text\") {\n                    node = {type: \"text\", content: node.content};\n                    for (\n                        ;\n                        i + 1 < arr.length && arr[i + 1].type === \"text\";\n                        i++\n                    ) {\n                        node.content += arr[i + 1].content;\n                    }\n                }\n\n                result.push(output(node, state));\n            }\n\n            state.key = oldKey;\n            return result;\n        },\n        html: function (arr, output, state) {\n            var result = \"\";\n\n            // map output over the ast, except group any text\n            // nodes together into a single string output.\n            for (var i = 0, key = 0; i < arr.length; i++) {\n                var node = arr[i];\n                if (node.type === \"text\") {\n                    node = {type: \"text\", content: node.content};\n                    for (\n                        ;\n                        i + 1 < arr.length && arr[i + 1].type === \"text\";\n                        i++\n                    ) {\n                        node.content += arr[i + 1].content;\n                    }\n                }\n\n                result += output(node, state);\n            }\n            return result;\n        },\n    },\n    heading: {\n        order: currOrder++,\n        match: blockRegex(/^ *(#{1,6})([^\\n]+?)#* *(?:\\n *)+\\n/),\n        parse: function (capture, parse, state) {\n            return {\n                level: capture[1].length,\n                content: parseInline(parse, capture[2].trim(), state),\n            };\n        },\n        react: function (node, output, state) {\n            return reactElement(\"h\" + node.level, state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"h\" + node.level, output(node.content, state));\n        },\n    },\n    nptable: {\n        order: currOrder++,\n        match: blockRegex(TABLES.NPTABLE_REGEX),\n        parse: TABLES.parseNpTable,\n        react: null,\n        html: null,\n    },\n    lheading: {\n        order: currOrder++,\n        match: blockRegex(/^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"heading\",\n                level: capture[2] === \"=\" ? 1 : 2,\n                content: parseInline(parse, capture[1], state),\n            };\n        },\n        react: null,\n        html: null,\n    },\n    hr: {\n        order: currOrder++,\n        match: blockRegex(/^( *[-*_]){3,} *(?:\\n *)+\\n/),\n        parse: ignoreCapture,\n        react: function (node, output, state) {\n            return reactElement(\"hr\", state.key, EMPTY_PROPS);\n        },\n        html: function (node, output, state) {\n            return \"<hr>\";\n        },\n    },\n    codeBlock: {\n        order: currOrder++,\n        match: blockRegex(/^(?:    [^\\n]+\\n*)+(?:\\n *)+\\n/),\n        parse: function (capture, parse, state) {\n            var content = capture[0].replace(/^    /gm, \"\").replace(/\\n+$/, \"\");\n            return {\n                lang: undefined,\n                content: content,\n            };\n        },\n        react: function (node, output, state) {\n            var className = node.lang\n                ? \"markdown-code-\" + node.lang\n                : undefined;\n\n            return reactElement(\"pre\", state.key, {\n                children: reactElement(\"code\", null, {\n                    className: className,\n                    children: node.content,\n                }),\n            });\n        },\n        html: function (node, output, state) {\n            var className = node.lang\n                ? \"markdown-code-\" + node.lang\n                : undefined;\n\n            var codeBlock = htmlTag(\"code\", sanitizeText(node.content), {\n                class: className,\n            });\n            return htmlTag(\"pre\", codeBlock);\n        },\n    },\n    fence: {\n        order: currOrder++,\n        match: blockRegex(\n            /^ *(`{3,}|~{3,}) *(?:(\\S+) *)?\\n([\\s\\S]+?)\\n?\\1 *(?:\\n *)+\\n/,\n        ),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"codeBlock\",\n                lang: capture[2] || undefined,\n                content: capture[3],\n            };\n        },\n        react: null,\n        html: null,\n    },\n    blockQuote: {\n        order: currOrder++,\n        match: blockRegex(/^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/),\n        parse: function (capture, parse, state) {\n            var content = capture[0].replace(/^ *> ?/gm, \"\");\n            return {\n                content: parse(content, state),\n            };\n        },\n        react: function (node, output, state) {\n            return reactElement(\"blockquote\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"blockquote\", output(node.content, state));\n        },\n    },\n    list: {\n        order: currOrder++,\n        // $FlowFixMe\n        match: function (source, state) {\n            // We only want to break into a list if we are at the start of a\n            // line. This is to avoid parsing \"hi * there\" with \"* there\"\n            // becoming a part of a list.\n            // You might wonder, \"but that's inline, so of course it wouldn't\n            // start a list?\". You would be correct! Except that some of our\n            // lists can be inline, because they might be inside another list,\n            // in which case we can parse with inline scope, but need to allow\n            // nested lists inside this inline scope.\n            var prevCaptureStr =\n                state.prevCapture == null ? \"\" : state.prevCapture[0];\n            var isStartOfLineCapture = LIST_LOOKBEHIND_R.exec(prevCaptureStr);\n            var isListBlock = state._list || !state.inline;\n\n            if (isStartOfLineCapture && isListBlock) {\n                source = isStartOfLineCapture[1] + source;\n                return LIST_R.exec(source);\n            } else {\n                return null;\n            }\n        },\n        parse: function (capture, parse, state) {\n            var bullet = capture[2];\n            var ordered = bullet.length > 1;\n            var start = ordered ? +bullet : undefined;\n            var items: Array<string> = capture[0]\n                .replace(LIST_BLOCK_END_R, \"\\n\")\n                .match(LIST_ITEM_R);\n\n            // We know this will match here, because of how the regexes are\n            // defined\n\n            var lastItemWasAParagraph = false;\n            var itemContent = items.map(function (item: string, i: number) {\n                // We need to see how far indented this item is:\n                var prefixCapture = LIST_ITEM_PREFIX_R.exec(item);\n                var space = prefixCapture ? prefixCapture[0].length : 0;\n                // And then we construct a regex to \"unindent\" the subsequent\n                // lines of the items by that amount:\n                var spaceRegex = new RegExp(\"^ {1,\" + space + \"}\", \"gm\");\n\n                // Before processing the item, we need a couple things\n                var content = item\n                    // remove indents on trailing lines:\n                    .replace(spaceRegex, \"\")\n                    // remove the bullet:\n                    .replace(LIST_ITEM_PREFIX_R, \"\");\n\n                // I'm not sur4 why this is necessary again?\n\n                // Handling \"loose\" lists, like:\n                //\n                //  * this is wrapped in a paragraph\n                //\n                //  * as is this\n                //\n                //  * as is this\n                var isLastItem = i === items.length - 1;\n                var containsBlocks = content.indexOf(\"\\n\\n\") !== -1;\n\n                // Any element in a list is a block if it contains multiple\n                // newlines. The last element in the list can also be a block\n                // if the previous item in the list was a block (this is\n                // because non-last items in the list can end with \\n\\n, but\n                // the last item can't, so we just \"inherit\" this property\n                // from our previous element).\n                var thisItemIsAParagraph =\n                    containsBlocks || (isLastItem && lastItemWasAParagraph);\n                lastItemWasAParagraph = thisItemIsAParagraph;\n\n                // backup our state for restoration afterwards. We're going to\n                // want to set state._list to true, and state.inline depending\n                // on our list's looseness.\n                var oldStateInline = state.inline;\n                var oldStateList = state._list;\n                state._list = true;\n\n                // Parse inline if we're in a tight list, or block if we're in\n                // a loose list.\n                var adjustedContent;\n                if (thisItemIsAParagraph) {\n                    state.inline = false;\n                    adjustedContent = content.replace(LIST_ITEM_END_R, \"\\n\\n\");\n                } else {\n                    state.inline = true;\n                    adjustedContent = content.replace(LIST_ITEM_END_R, \"\");\n                }\n\n                var result = parse(adjustedContent, state);\n\n                // Restore our state before returning\n                state.inline = oldStateInline;\n                state._list = oldStateList;\n                return result;\n            });\n\n            return {\n                ordered: ordered,\n                start: start,\n                items: itemContent,\n            };\n        },\n        react: function (node, output, state) {\n            var ListWrapper = node.ordered ? \"ol\" : \"ul\";\n\n            return reactElement(ListWrapper, state.key, {\n                start: node.start,\n                children: node.items.map(function (item: ASTNode, i: number) {\n                    return reactElement(\"li\", \"\" + i, {\n                        children: output(item, state),\n                    });\n                }),\n            });\n        },\n        html: function (node, output, state) {\n            var listItems = node.items\n                .map(function (item: ASTNode) {\n                    return htmlTag(\"li\", output(item, state));\n                })\n                .join(\"\");\n\n            var listTag = node.ordered ? \"ol\" : \"ul\";\n            var attributes = {\n                start: node.start,\n            };\n            return htmlTag(listTag, listItems, attributes);\n        },\n    },\n    def: {\n        order: currOrder++,\n        // TODO(aria): This will match without a blank line before the next\n        // block element, which is inconsistent with most of the rest of\n        // simple-markdown.\n        match: blockRegex(\n            /^ *\\[([^\\]]+)\\]: *<?([^\\s>]*)>?(?: +[\"(]([^\\n]+)[\")])? *\\n(?: *\\n)*/,\n        ),\n        parse: function (capture, parse, state) {\n            var def = capture[1].replace(/\\s+/g, \" \").toLowerCase();\n            var target = capture[2];\n            var title = capture[3];\n\n            // Look for previous links/images using this def\n            // If any links/images using this def have already been declared,\n            // they will have added themselves to the state._refs[def] list\n            // (_ to deconflict with client-defined state). We look through\n            // that list of reflinks for this def, and modify those AST nodes\n            // with our newly found information now.\n            // Sorry :(.\n            if (state._refs && state._refs[def]) {\n                // `refNode` can be a link or an image\n                state._refs[def].forEach(function (refNode: RefNode) {\n                    refNode.target = target;\n                    refNode.title = title;\n                });\n            }\n\n            // Add this def to our map of defs for any future links/images\n            // In case we haven't found any or all of the refs referring to\n            // this def yet, we add our def to the table of known defs, so\n            // that future reflinks can modify themselves appropriately with\n            // this information.\n            state._defs = state._defs || {};\n            state._defs[def] = {\n                target: target,\n                title: title,\n            };\n\n            // return the relevant parsed information\n            // for debugging only.\n            return {\n                def: def,\n                target: target,\n                title: title,\n            };\n        },\n        react: function () {\n            return null;\n        },\n        html: function () {\n            return \"\";\n        },\n    },\n    table: {\n        order: currOrder++,\n        match: blockRegex(TABLES.TABLE_REGEX),\n        parse: TABLES.parseTable,\n        react: function (node, output, state) {\n            var getStyle = function (colIndex: number): {\n                [attr: string]: Attr,\n            } {\n                return node.align[colIndex] == null\n                    ? {}\n                    : {\n                          textAlign: node.align[colIndex],\n                      };\n            };\n\n            var headers = node.header.map(function (\n                content: ASTNode,\n                i: number,\n            ) {\n                return reactElement(\"th\", \"\" + i, {\n                    style: getStyle(i),\n                    scope: \"col\",\n                    children: output(content, state),\n                });\n            });\n\n            var rows = node.cells.map(function (\n                row: Array<ASTNode>,\n                r: number,\n            ) {\n                return reactElement(\"tr\", \"\" + r, {\n                    children: row.map(function (content: ASTNode, c: number) {\n                        return reactElement(\"td\", \"\" + c, {\n                            style: getStyle(c),\n                            children: output(content, state),\n                        });\n                    }),\n                });\n            });\n\n            return reactElement(\"table\", state.key, {\n                children: [\n                    reactElement(\"thead\", \"thead\", {\n                        children: reactElement(\"tr\", null, {\n                            children: headers,\n                        }),\n                    }),\n                    reactElement(\"tbody\", \"tbody\", {\n                        children: rows,\n                    }),\n                ],\n            });\n        },\n        html: function (node, output, state) {\n            var getStyle = function (colIndex: number): string {\n                return node.align[colIndex] == null\n                    ? \"\"\n                    : \"text-align:\" + node.align[colIndex] + \";\";\n            };\n\n            var headers = node.header\n                .map(function (content: ASTNode, i: number) {\n                    return htmlTag(\"th\", output(content, state), {\n                        style: getStyle(i),\n                        scope: \"col\",\n                    });\n                })\n                .join(\"\");\n\n            var rows = node.cells\n                .map(function (row: Array<ASTNode>) {\n                    var cols = row\n                        .map(function (content: ASTNode, c: number) {\n                            return htmlTag(\"td\", output(content, state), {\n                                style: getStyle(c),\n                            });\n                        })\n                        .join(\"\");\n\n                    return htmlTag(\"tr\", cols);\n                })\n                .join(\"\");\n\n            var thead = htmlTag(\"thead\", htmlTag(\"tr\", headers));\n            var tbody = htmlTag(\"tbody\", rows);\n\n            return htmlTag(\"table\", thead + tbody);\n        },\n    },\n    newline: {\n        order: currOrder++,\n        match: blockRegex(/^(?:\\n *)*\\n/),\n        parse: ignoreCapture,\n        react: function (node, output, state) {\n            return \"\\n\";\n        },\n        html: function (node, output, state) {\n            return \"\\n\";\n        },\n    },\n    paragraph: {\n        order: currOrder++,\n        match: blockRegex(/^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/),\n        parse: parseCaptureInline,\n        react: function (node, output, state) {\n            return reactElement(\"div\", state.key, {\n                className: \"paragraph\",\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            var attributes = {\n                class: \"paragraph\",\n            };\n            return htmlTag(\"div\", output(node.content, state), attributes);\n        },\n    },\n    escape: {\n        order: currOrder++,\n        // We don't allow escaping numbers, letters, or spaces here so that\n        // backslashes used in plain text still get rendered. But allowing\n        // escaping anything else provides a very flexible escape mechanism,\n        // regardless of how this grammar is extended.\n        match: inlineRegex(/^\\\\([^0-9A-Za-z\\s])/),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"text\",\n                content: capture[1],\n            };\n        },\n        react: null,\n        html: null,\n    },\n    tableSeparator: {\n        order: currOrder++,\n        // $FlowFixMe\n        match: function (source, state) {\n            if (!state.inTable) {\n                return null;\n            }\n            return /^ *\\| */.exec(source);\n        },\n        parse: function () {\n            return {type: \"tableSeparator\"};\n        },\n        // These shouldn't be reached, but in case they are, be reasonable:\n        react: function () {\n            return \" | \";\n        },\n        html: function () {\n            return \" &vert; \";\n        },\n    },\n    autolink: {\n        order: currOrder++,\n        match: inlineRegex(/^<([^: >]+:\\/[^ >]+)>/),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"link\",\n                content: [\n                    {\n                        type: \"text\",\n                        content: capture[1],\n                    },\n                ],\n                target: capture[1],\n            };\n        },\n        react: null,\n        html: null,\n    },\n    mailto: {\n        order: currOrder++,\n        match: inlineRegex(/^<([^ >]+@[^ >]+)>/),\n        parse: function (capture, parse, state) {\n            var address = capture[1];\n            var target = capture[1];\n\n            // Check for a `mailto:` already existing in the link:\n            if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n                target = \"mailto:\" + target;\n            }\n\n            return {\n                type: \"link\",\n                content: [\n                    {\n                        type: \"text\",\n                        content: address,\n                    },\n                ],\n                target: target,\n            };\n        },\n        react: null,\n        html: null,\n    },\n    url: {\n        order: currOrder++,\n        match: inlineRegex(/^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"link\",\n                content: [\n                    {\n                        type: \"text\",\n                        content: capture[1],\n                    },\n                ],\n                target: capture[1],\n                title: undefined,\n            };\n        },\n        react: null,\n        html: null,\n    },\n    link: {\n        order: currOrder++,\n        match: inlineRegex(\n            new RegExp(\n                \"^\\\\[(\" + LINK_INSIDE + \")\\\\]\\\\(\" + LINK_HREF_AND_TITLE + \"\\\\)\",\n            ),\n        ),\n        parse: function (capture, parse, state) {\n            var link = {\n                content: parse(capture[1], state),\n                target: unescapeUrl(capture[2]),\n                title: capture[3],\n            };\n            return link;\n        },\n        react: function (node, output, state) {\n            return reactElement(\"a\", state.key, {\n                href: sanitizeUrl(node.target),\n                title: node.title,\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            var attributes = {\n                href: sanitizeUrl(node.target),\n                title: node.title,\n            };\n\n            return htmlTag(\"a\", output(node.content, state), attributes);\n        },\n    },\n    image: {\n        order: currOrder++,\n        match: inlineRegex(\n            new RegExp(\n                \"^!\\\\[(\" +\n                    LINK_INSIDE +\n                    \")\\\\]\\\\(\" +\n                    LINK_HREF_AND_TITLE +\n                    \"\\\\)\",\n            ),\n        ),\n        parse: function (capture, parse, state) {\n            var image = {\n                alt: capture[1],\n                target: unescapeUrl(capture[2]),\n                title: capture[3],\n            };\n            return image;\n        },\n        react: function (node, output, state) {\n            return reactElement(\"img\", state.key, {\n                src: sanitizeUrl(node.target),\n                alt: node.alt,\n                title: node.title,\n            });\n        },\n        html: function (node, output, state) {\n            var attributes = {\n                src: sanitizeUrl(node.target),\n                alt: node.alt,\n                title: node.title,\n            };\n\n            return htmlTag(\"img\", \"\", attributes, false);\n        },\n    },\n    reflink: {\n        order: currOrder++,\n        match: inlineRegex(\n            new RegExp(\n                // The first [part] of the link\n                \"^\\\\[(\" +\n                    LINK_INSIDE +\n                    \")\\\\]\" +\n                    // The [ref] target of the link\n                    \"\\\\s*\\\\[([^\\\\]]*)\\\\]\",\n            ),\n        ),\n        parse: function (capture, parse, state) {\n            return parseRef(capture, state, {\n                type: \"link\",\n                content: parse(capture[1], state),\n            });\n        },\n        react: null,\n        html: null,\n    },\n    refimage: {\n        order: currOrder++,\n        match: inlineRegex(\n            new RegExp(\n                // The first [part] of the link\n                \"^!\\\\[(\" +\n                    LINK_INSIDE +\n                    \")\\\\]\" +\n                    // The [ref] target of the link\n                    \"\\\\s*\\\\[([^\\\\]]*)\\\\]\",\n            ),\n        ),\n        parse: function (capture, parse, state) {\n            return parseRef(capture, state, {\n                type: \"image\",\n                alt: capture[1],\n            });\n        },\n        react: null,\n        html: null,\n    },\n    em: {\n        order: currOrder /* same as strong/u */,\n        match: inlineRegex(\n            new RegExp(\n                // only match _s surrounding words.\n                \"^\\\\b_\" +\n                    \"((?:__|\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\_])+?)_\" +\n                    \"\\\\b\" +\n                    // Or match *s:\n                    \"|\" +\n                    // Only match *s that are followed by a non-space:\n                    \"^\\\\*(?=\\\\S)(\" +\n                    // Match at least one of:\n                    \"(?:\" +\n                    //  - `**`: so that bolds inside italics don't close the\n                    //          italics\n                    \"\\\\*\\\\*|\" +\n                    //  - escape sequence: so escaped *s don't close us\n                    \"\\\\\\\\[\\\\s\\\\S]|\" +\n                    //  - whitespace: followed by a non-* (we don't\n                    //          want ' *' to close an italics--it might\n                    //          start a list)\n                    \"\\\\s+(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\s\\\\*\\\\\\\\]|\\\\*\\\\*)|\" +\n                    //  - non-whitespace, non-*, non-backslash characters\n                    \"[^\\\\s\\\\*\\\\\\\\]\" +\n                    \")+?\" +\n                    // followed by a non-space, non-* then *\n                    \")\\\\*(?!\\\\*)\",\n            ),\n        ),\n        quality: function (capture) {\n            // precedence by length, `em` wins ties:\n            return capture[0].length + 0.2;\n        },\n        parse: function (capture, parse, state) {\n            return {\n                content: parse(capture[2] || capture[1], state),\n            };\n        },\n        react: function (node, output, state) {\n            return reactElement(\"em\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"em\", output(node.content, state));\n        },\n    },\n    strong: {\n        order: currOrder /* same as em */,\n        match: inlineRegex(/^\\*\\*((?:\\\\[\\s\\S]|[^\\\\])+?)\\*\\*(?!\\*)/),\n        quality: function (capture) {\n            // precedence by length, wins ties vs `u`:\n            return capture[0].length + 0.1;\n        },\n        parse: parseCaptureInline,\n        react: function (node, output, state) {\n            return reactElement(\"strong\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"strong\", output(node.content, state));\n        },\n    },\n    u: {\n        order: currOrder++ /* same as em&strong; increment for next rule */,\n        match: inlineRegex(/^__((?:\\\\[\\s\\S]|[^\\\\])+?)__(?!_)/),\n        quality: function (capture) {\n            // precedence by length, loses all ties\n            return capture[0].length;\n        },\n        parse: parseCaptureInline,\n        react: function (node, output, state) {\n            return reactElement(\"u\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"u\", output(node.content, state));\n        },\n    },\n    del: {\n        order: currOrder++,\n        match: inlineRegex(\n            /^~~(?=\\S)((?:\\\\[\\s\\S]|~(?!~)|[^\\s~\\\\]|\\s(?!~~))+?)~~/,\n        ),\n        parse: parseCaptureInline,\n        react: function (node, output, state) {\n            return reactElement(\"del\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"del\", output(node.content, state));\n        },\n    },\n    inlineCode: {\n        order: currOrder++,\n        match: inlineRegex(/^(`+)([\\s\\S]*?[^`])\\1(?!`)/),\n        parse: function (capture, parse, state) {\n            return {\n                content: capture[2].replace(\n                    INLINE_CODE_ESCAPE_BACKTICKS_R,\n                    \"$1\",\n                ),\n            };\n        },\n        react: function (node, output, state) {\n            return reactElement(\"code\", state.key, {\n                children: node.content,\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"code\", sanitizeText(node.content));\n        },\n    },\n    br: {\n        order: currOrder++,\n        match: anyScopeRegex(/^ {2,}\\n/),\n        parse: ignoreCapture,\n        react: function (node, output, state) {\n            return reactElement(\"br\", state.key, EMPTY_PROPS);\n        },\n        html: function (node, output, state) {\n            return \"<br>\";\n        },\n    },\n    text: {\n        order: currOrder++,\n        // Here we look for anything followed by non-symbols,\n        // double newlines, or double-space-newlines\n        // We break on any symbol characters so that this grammar\n        // is easy to extend without needing to modify this regex\n        match: anyScopeRegex(\n            /^[\\s\\S]+?(?=[^0-9A-Za-z\\s\\u00c0-\\uffff]|\\n\\n| {2,}\\n|\\w+:\\S|$)/,\n        ),\n        parse: function (capture, parse, state) {\n            return {\n                content: capture[0],\n            };\n        },\n        react: function (node, output, state) {\n            return node.content;\n        },\n        html: function (node, output, state) {\n            return sanitizeText(node.content);\n        },\n    },\n};\n\n/** (deprecated) */\nvar ruleOutput = function (\n    // $FlowFixMe\n    rules: OutputRules<Rule>,\n    property: $Keys<Rule>,\n) {\n    if (!property && typeof console !== \"undefined\") {\n        console.warn(\n            \"simple-markdown ruleOutput should take 'react' or \" +\n                \"'html' as the second argument.\",\n        );\n    }\n\n    var nestedRuleOutput = function (\n        ast: SingleASTNode,\n        outputFunc: Output<any>,\n        state: State,\n    ) {\n        return rules[ast.type][property](ast, outputFunc, state);\n    };\n    return nestedRuleOutput;\n};\n\n/** (deprecated)\n */\nvar reactFor = function (outputFunc: ReactNodeOutput): ReactOutput {\n    var nestedOutput: ReactOutput = function (ast, state) {\n        state = state || {};\n        if (Array.isArray(ast)) {\n            var oldKey = state.key;\n            var result: Array<ReactElements> = [];\n\n            // map nestedOutput over the ast, except group any text\n            // nodes together into a single string output.\n            var lastResult = null;\n            for (var i = 0; i < ast.length; i++) {\n                state.key = \"\" + i;\n                var nodeOut = nestedOutput(ast[i], state);\n                if (\n                    typeof nodeOut === \"string\" &&\n                    typeof lastResult === \"string\"\n                ) {\n                    lastResult = lastResult + nodeOut;\n                    result[result.length - 1] = lastResult;\n                } else {\n                    result.push(nodeOut);\n                    lastResult = nodeOut;\n                }\n            }\n\n            state.key = oldKey;\n            return result;\n        } else {\n            return outputFunc(ast, nestedOutput, state);\n        }\n    };\n    return nestedOutput;\n};\n\n/** (deprecated)\n */\nvar htmlFor = function (outputFunc: HtmlNodeOutput): HtmlOutput {\n    var nestedOutput: HtmlOutput = function (ast, state) {\n        state = state || {};\n        if (Array.isArray(ast)) {\n            return ast\n                .map(function (node) {\n                    return nestedOutput(node, state);\n                })\n                .join(\"\");\n        } else {\n            return outputFunc(ast, nestedOutput, state);\n        }\n    };\n    return nestedOutput;\n};\n\nvar outputFor = function (\n    rules: OutputRules<Rule>,\n    property: $Keys<Rule>,\n    defaultState: ?State = {},\n) {\n    if (!property) {\n        throw new Error(\n            \"simple-markdown: outputFor: `property` must be \" +\n                \"defined. \" +\n                \"if you just upgraded, you probably need to replace `outputFor` \" +\n                \"with `reactFor`\",\n        );\n    }\n\n    var latestState: State;\n    // $FlowFixMe[incompatible-type]\n    var arrayRule: ArrayRule = rules.Array || defaultRules.Array;\n\n    // Tricks to convince tsc that this var is not null:\n    var arrayRuleCheck = arrayRule[property];\n    if (!arrayRuleCheck) {\n        throw new Error(\n            \"simple-markdown: outputFor: to join nodes of type `\" +\n                property +\n                \"` you must provide an `Array:` joiner rule with that type, \" +\n                \"Please see the docs for details on specifying an Array rule.\",\n        );\n    }\n    var arrayRuleOutput = arrayRuleCheck;\n\n    var nestedOutput: Output<any> = function (ast, state) {\n        state = state || latestState;\n        latestState = state;\n        if (Array.isArray(ast)) {\n            return arrayRuleOutput(ast, nestedOutput, state);\n        } else {\n            return rules[ast.type][property](ast, nestedOutput, state);\n        }\n    };\n\n    var outerOutput: Output<any> = function (ast, state) {\n        latestState = populateInitialState(state, defaultState);\n        return nestedOutput(ast, latestState);\n    };\n    return outerOutput;\n};\n\n// $FlowFixMe[incompatible-call]\nvar defaultRawParse = parserFor(defaultRules);\n\nvar defaultBlockParse = function (\n    source: string,\n    state: ?State,\n): Array<SingleASTNode> {\n    state = state || {};\n    state.inline = false;\n    return defaultRawParse(source, state);\n};\n\nvar defaultInlineParse = function (\n    source: string,\n    state: ?State,\n): Array<SingleASTNode> {\n    state = state || {};\n    state.inline = true;\n    return defaultRawParse(source, state);\n};\n\nvar defaultImplicitParse = function (\n    source: string,\n    state: ?State,\n): Array<SingleASTNode> {\n    var isBlock = BLOCK_END_R.test(source);\n    state = state || {};\n    state.inline = !isBlock;\n    return defaultRawParse(source, state);\n};\n\n// $FlowFixMe[incompatible-call]\nvar defaultReactOutput: ReactOutput = outputFor(defaultRules, \"react\");\n// $FlowFixMe[incompatible-call]\nvar defaultHtmlOutput: HtmlOutput = outputFor(defaultRules, \"html\");\n\nvar markdownToReact = function (source: string, state: ?State): ReactElements {\n    return defaultReactOutput(defaultBlockParse(source, state), state);\n};\n\nvar markdownToHtml = function (source: string, state: ?State): string {\n    return defaultHtmlOutput(defaultBlockParse(source, state), state);\n};\n\n// TODO: This needs definition\ntype ReactMarkdownProps = any;\nvar ReactMarkdown = function (props: ReactMarkdownProps): ReactElement {\n    var divProps = {};\n\n    for (var prop in props) {\n        if (\n            prop !== \"source\" &&\n            // $FlowFixMe\n            Object.prototype.hasOwnProperty.call(props, prop)\n        ) {\n            divProps[prop] = props[prop];\n        }\n    }\n    divProps.children = markdownToReact(props.source);\n\n    return reactElement(\"div\", null, divProps);\n};\n\ntype Exports = {\n    +defaultRules: DefaultRules,\n    +parserFor: (rules: ParserRules, defaultState?: ?State) => Parser,\n    +outputFor: <Rule: Object>(\n        rules: OutputRules<Rule>,\n        param: $Keys<Rule>,\n        defaultState?: ?State,\n    ) => Output<any>,\n\n    +ruleOutput: <Rule: Object>(\n        rules: OutputRules<Rule>,\n        param: $Keys<Rule>,\n    ) => NodeOutput<any>,\n    +reactFor: (ReactNodeOutput) => ReactOutput,\n    +htmlFor: (HtmlNodeOutput) => HtmlOutput,\n\n    +inlineRegex: (regex: RegExp) => MatchFunction,\n    +blockRegex: (regex: RegExp) => MatchFunction,\n    +anyScopeRegex: (regex: RegExp) => MatchFunction,\n    +parseInline: (parse: Parser, content: string, state: State) => ASTNode,\n    +parseBlock: (parse: Parser, content: string, state: State) => ASTNode,\n\n    +markdownToReact: (source: string, state?: ?State) => ReactElements,\n    +markdownToHtml: (source: string, state?: ?State) => string,\n    +ReactMarkdown: (props: {source: string, [string]: any}) => ReactElement,\n\n    +defaultRawParse: (source: string, state?: ?State) => Array<SingleASTNode>,\n    +defaultBlockParse: (\n        source: string,\n        state?: ?State,\n    ) => Array<SingleASTNode>,\n    +defaultInlineParse: (\n        source: string,\n        state?: ?State,\n    ) => Array<SingleASTNode>,\n    +defaultImplicitParse: (\n        source: string,\n        state?: ?State,\n    ) => Array<SingleASTNode>,\n\n    +defaultReactOutput: ReactOutput,\n    +defaultHtmlOutput: HtmlOutput,\n\n    +preprocess: (source: string) => string,\n    +sanitizeText: (text: Attr) => string,\n    +sanitizeUrl: (url: ?string) => ?string,\n    +unescapeUrl: (url: string) => string,\n    +htmlTag: (\n        tagName: string,\n        content: string,\n        attributes: ?{[any]: ?Attr},\n        isClosed: ?boolean,\n    ) => string,\n    +reactElement: (\n        type: string,\n        key: string | null,\n        props: {[string]: any},\n    ) => ReactElement,\n};\n\nexport type {\n    // Hopefully you shouldn't have to use these, but they're here if you need!\n    // Top-level API:\n    State,\n    Parser,\n    Output,\n    ReactOutput,\n    HtmlOutput,\n    // Most of the following types should be considered experimental and\n    // subject to change or change names. Again, they shouldn't be necessary,\n    // but if they are I'd love to hear how so I can better support them!\n\n    // Individual Rule fields:\n    Capture,\n    MatchFunction,\n    ParseFunction,\n    NodeOutput,\n    ArrayNodeOutput,\n    ReactNodeOutput,\n    // Single rules:\n    ParserRule,\n    ReactOutputRule,\n    HtmlOutputRule,\n    // Sets of rules:\n    ParserRules,\n    OutputRules,\n    Rules,\n    ReactRules,\n    HtmlRules,\n    SingleASTNode,\n};\n\n// $FlowFixMe\nvar SimpleMarkdown: Exports = {\n    defaultRules: defaultRules,\n    parserFor: parserFor,\n    outputFor: outputFor,\n\n    inlineRegex: inlineRegex,\n    blockRegex: blockRegex,\n    anyScopeRegex: anyScopeRegex,\n    parseInline: parseInline,\n    parseBlock: parseBlock,\n\n    // default wrappers:\n    markdownToReact: markdownToReact,\n    markdownToHtml: markdownToHtml,\n    ReactMarkdown: ReactMarkdown,\n\n    defaultBlockParse: defaultBlockParse,\n    defaultInlineParse: defaultInlineParse,\n    defaultImplicitParse: defaultImplicitParse,\n\n    defaultReactOutput: defaultReactOutput,\n    defaultHtmlOutput: defaultHtmlOutput,\n\n    preprocess: preprocess,\n    sanitizeText: sanitizeText,\n    sanitizeUrl: sanitizeUrl,\n    unescapeUrl: unescapeUrl,\n    htmlTag: htmlTag,\n    reactElement: reactElement,\n\n    // deprecated:\n    defaultRawParse: defaultRawParse,\n    ruleOutput: ruleOutput,\n    reactFor: reactFor,\n    htmlFor: htmlFor,\n\n    defaultParse: function () {\n        if (typeof console !== \"undefined\") {\n            console.warn(\n                \"defaultParse is deprecated, please use `defaultImplicitParse`\",\n            );\n        }\n        return defaultImplicitParse.apply(null, (arguments: any));\n    },\n    defaultOutput: function () {\n        if (typeof console !== \"undefined\") {\n            console.warn(\n                \"defaultOutput is deprecated, please use `defaultReactOutput`\",\n            );\n        }\n        return defaultReactOutput.apply(null, (arguments: any));\n    },\n};\n\nexport default SimpleMarkdown;\n","import SimpleMarkdown from '@khanacademy/simple-markdown';\n\n/**\n *\n * @param markdown\n */\nfunction preprocessMarkdown(markdown) {\n  // Replace multiple newlines with a single newline\n  const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, '\\n');\n  // Remove extra spaces at the beginning of each line\n  const withoutExtraSpaces = withoutMultipleNewlines.replace(/^\\s+/gm, '');\n  return withoutExtraSpaces;\n}\n\n/**\n *\n * @param markdown\n */\nexport function markdownToLines(markdown) {\n  const preprocessedMarkdown = preprocessMarkdown(markdown);\n  const mdParse = SimpleMarkdown.defaultBlockParse;\n  const syntaxTree = mdParse(preprocessedMarkdown);\n\n  let lines = [[]];\n  let currentLine = 0;\n\n  /**\n   *\n   * @param node\n   * @param parentType\n   */\n  function processNode(node, parentType) {\n    if (node.type === 'text') {\n      const textLines = node.content.split('\\n');\n\n      textLines.forEach((textLine, index) => {\n        if (index !== 0) {\n          currentLine++;\n          lines.push([]);\n        }\n\n        // textLine.split(/ (?=[^!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]+)/).forEach((word) => {\n        textLine.split(' ').forEach((word) => {\n          if (word) {\n            lines[currentLine].push({ content: word, type: parentType || 'normal' });\n          }\n        });\n      });\n    } else if (node.type === 'strong' || node.type === 'em') {\n      node.content.forEach((contentNode) => {\n        processNode(contentNode, node.type);\n      });\n    }\n  }\n\n  syntaxTree.forEach((treeNode) => {\n    if (treeNode.type === 'paragraph') {\n      treeNode.content.forEach((contentNode) => {\n        processNode(contentNode);\n      });\n    }\n  });\n\n  return lines;\n}\n\n/**\n *\n * @param markdown\n */\nexport function markdownToHTML(markdown) {\n  const mdParse = SimpleMarkdown.defaultBlockParse;\n  const syntaxTree = mdParse(markdown);\n\n  /**\n   *\n   * @param node\n   */\n  function output(node) {\n    if (node.type === 'text') {\n      return node.content.replace(/\\n/g, '<br/>');\n    } else if (node.type === 'strong') {\n      return `<strong>${node.content.map(output).join('')}</strong>`;\n    } else if (node.type === 'em') {\n      return `<em>${node.content.map(output).join('')}</em>`;\n    } else if (node.type === 'paragraph') {\n      return `<p>${node.content.map(output).join('')}</p>`;\n    } else {\n      return '';\n    }\n  }\n\n  return syntaxTree.map(output).join('');\n}\n","import { select } from 'd3';\nimport { log } from '../logger';\nimport { getConfig } from '../config';\nimport { evaluate } from '../diagrams/common/common';\nimport { decodeEntities } from '../mermaidAPI';\nimport { markdownToHTML, markdownToLines } from '../rendering-util/handle-markdown-text';\n/**\n * @param dom\n * @param styleFn\n */\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr('style', styleFn);\n  }\n}\n\n/**\n * @param element\n * @param {any} node\n * @param width\n * @param classes\n * @returns {SVGForeignObjectElement} Node\n */\nfunction addHtmlSpan(element, node, width, classes) {\n  const fo = element.append('foreignObject');\n  // const newEl = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');\n  // const newEl = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');\n  const div = fo.append('xhtml:div');\n  // const div = body.append('div');\n  // const div = fo.append('div');\n\n  const label = node.label;\n  const labelClass = node.isNode ? 'nodeLabel' : 'edgeLabel';\n  div.html(\n    `<span class=\"${labelClass} ${classes}\" ` +\n      (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : '') +\n      '>' +\n      label +\n      '</span>'\n  );\n\n  applyStyle(div, node.labelStyle);\n  div.style('display', 'table-cell');\n  div.style('white-space', 'nowrap');\n  div.style('max-width', width + 'px');\n  div.attr('xmlns', 'http://www.w3.org/1999/xhtml');\n\n  let bbox = div.node().getBoundingClientRect();\n  if (bbox.width === width) {\n    div.style('display', 'table');\n    div.style('white-space', 'break-spaces');\n    div.style('width', width + 'px');\n    bbox = div.node().getBoundingClientRect();\n  }\n\n  fo.style('width', bbox.width);\n  fo.style('height', bbox.height);\n\n  return fo.node();\n}\n\n/**\n * Creates a tspan element with the specified attributes for text positioning.\n *\n * @param {object} textElement - The parent text element to append the tspan element.\n * @param {number} lineIndex - The index of the current line in the structuredText array.\n * @param {number} lineHeight - The line height value for the text.\n * @returns {object} The created tspan element.\n */\nfunction createTspan(textElement, lineIndex, lineHeight) {\n  return textElement\n    .append('tspan')\n    .attr('class', 'text-outer-tspan')\n    .attr('x', 0)\n    .attr('y', lineIndex * lineHeight - 0.1 + 'em')\n    .attr('dy', lineHeight + 'em');\n}\n\n/**\n * Creates a formatted text element by breaking lines and applying styles based on\n * the given structuredText.\n *\n * @param {number} width - The maximum allowed width of the text.\n * @param {object} g - The parent group element to append the formatted text.\n * @param {Array} structuredText - The structured text data to format.\n * @param addBackground\n */\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n  const lineHeight = 1.1;\n  const labelGroup = g.append('g');\n  let bkg = labelGroup.insert('rect').attr('class', 'background');\n  const textElement = labelGroup.append('text').attr('y', '-10.1');\n  // .attr('dominant-baseline', 'middle')\n  // .attr('text-anchor', 'middle');\n  // .attr('text-anchor', 'middle');\n  let lineIndex = -1;\n  structuredText.forEach((line) => {\n    lineIndex++;\n    let tspan = createTspan(textElement, lineIndex, lineHeight);\n\n    let words = [...line].reverse();\n    let currentWord;\n    let wrappedLine = [];\n\n    while (words.length) {\n      currentWord = words.pop();\n      wrappedLine.push(currentWord);\n\n      updateTextContentAndStyles(tspan, wrappedLine);\n\n      if (tspan.node().getComputedTextLength() > width) {\n        wrappedLine.pop();\n        words.push(currentWord);\n\n        updateTextContentAndStyles(tspan, wrappedLine);\n\n        wrappedLine = [];\n        lineIndex++;\n        tspan = createTspan(textElement, lineIndex, lineHeight);\n      }\n    }\n  });\n  if (addBackground) {\n    const bbox = textElement.node().getBBox();\n    const padding = 2;\n    bkg\n      .attr('x', -padding)\n      .attr('y', -padding)\n      .attr('width', bbox.width + 2 * padding)\n      .attr('height', bbox.height + 2 * padding);\n    // .style('fill', 'red');\n\n    return labelGroup.node();\n  } else {\n    return textElement.node();\n  }\n}\n\n/**\n * Updates the text content and styles of the given tspan element based on the\n * provided wrappedLine data.\n *\n * @param {object} tspan - The tspan element to update.\n * @param {Array} wrappedLine - The line data to apply to the tspan element.\n */\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n  tspan.text('');\n\n  wrappedLine.forEach((word, index) => {\n    const innerTspan = tspan\n      .append('tspan')\n      .attr('font-style', word.type === 'em' ? 'italic' : 'normal')\n      .attr('class', 'text-inner-tspan')\n      .attr('font-weight', word.type === 'strong' ? 'bold' : 'normal');\n    const special = ['\"', \"'\", '.', ',', ':', ';', '!', '?', '(', ')', '[', ']', '{', '}'];\n    if (index === 0) {\n      innerTspan.text(word.content);\n    } else {\n      innerTspan.text(' ' + word.content);\n    }\n  });\n}\n\n/**\n *\n * @param el\n * @param {*} text\n * @param {*} param1\n * @param root0\n * @param root0.style\n * @param root0.isTitle\n * @param root0.classes\n * @param root0.useHtmlLabels\n * @param root0.isNode\n * @returns\n */\n// Note when using from flowcharts converting the API isNode means classes should be set accordingly. When using htmlLabels => to sett classes to'nodeLabel' when isNode=true otherwise 'edgeLabel'\n// When not using htmlLabels => to set classes to 'title-row' when isTitle=true otherwise 'title-row'\nexport const createText = (\n  el,\n  text = '',\n  {\n    style = '',\n    isTitle = false,\n    classes = '',\n    useHtmlLabels = true,\n    isNode = true,\n    width,\n    addSvgBackground = false,\n  } = {}\n) => {\n  log.info('createText', text, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n  if (useHtmlLabels) {\n    // TODO: addHtmlLabel accepts a labelStyle. Do we possibly have that?\n    // text = text.replace(/\\\\n|\\n/g, '<br />');\n    const htmlText = markdownToHTML(text);\n    // log.info('markdo  wnToHTML' + text, markdownToHTML(text));\n    const node = {\n      isNode,\n      label: decodeEntities(htmlText).replace(\n        /fa[blrs]?:fa-[\\w-]+/g,\n        (s) => `<i class='${s.replace(':', ' ')}'></i>`\n      ),\n      labelStyle: style.replace('fill:', 'color:'),\n    };\n    let vertexNode = addHtmlSpan(el, node, width, classes);\n    return vertexNode;\n  } else {\n    const structuredText = markdownToLines(text);\n    const special = ['\"', \"'\", '.', ',', ':', ';', '!', '?', '(', ')', '[', ']', '{', '}'];\n    let lastWord;\n    structuredText.forEach((line) => {\n      line.forEach((word) => {\n        if (special.includes(word.content) && lastWord) {\n          lastWord.content += word.content;\n          word.content = '';\n        }\n        lastWord = word;\n      });\n    });\n    const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n    return svgLabel;\n  }\n};\n"],"names":["CR_NEWLINE_R","TAB_R","FORMFEED_R","preprocess","source","replace","populateInitialState","givenState","defaultState","state","prop","Object","prototype","hasOwnProperty","call","parserFor","rules","latestState","ruleList","keys","filter","type","rule","match","order","isFinite","console","warn","String","sort","typeA","typeB","ruleA","ruleB","orderA","orderB","secondaryOrderA","quality","secondaryOrderB","nestedParse","result","ruleType","capture","NaN","i","currRuleType","currRule","currOrder","prevCaptureStr","prevCapture","currCapture","currQuality","Error","length","index","parsed","parse","Array","isArray","push","apply","substring","outerParse","inline","disableAutoBlockNewlines","inlineRegex","regex","exec","blockRegex","anyScopeRegex","TYPE_SYMBOL","Symbol","for","reactElement","key","props","element","$$typeof","undefined","ref","_owner","htmlTag","tagName","content","attributes","isClosed","attributeString","attr","attribute","sanitizeText","unclosedTag","EMPTY_PROPS","sanitizeUrl","url","prot","URL","protocol","indexOf","e","SANITIZE_TEXT_R","SANITIZE_TEXT_CODES","text","chr","UNESCAPE_URL_R","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","parseBlock","parseCaptureInline","ignoreCapture","LIST_BULLET","LIST_ITEM_PREFIX","LIST_ITEM_PREFIX_R","RegExp","LIST_ITEM_R","BLOCK_END_R","INLINE_CODE_ESCAPE_BACKTICKS_R","LIST_BLOCK_END_R","LIST_ITEM_END_R","LIST_R","LIST_LOOKBEHIND_R","TABLES","TABLE_ROW_SEPARATOR_TRIM","TABLE_CELL_END_TRIM","TABLE_RIGHT_ALIGN","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","parseTableAlignCapture","alignCapture","test","parseTableAlign","trimEndSeparators","alignText","trim","split","map","parseTableRow","prevInTable","inTable","tableRow","cells","forEach","node","parseTableCells","rowsText","rowText","parseTable","header","align","parseNpTable","TABLE_REGEX","NPTABLE_REGEX","LINK_INSIDE","LINK_HREF_AND_TITLE","AUTOLINK_MAILTO_CHECK_R","parseRef","refNode","toLowerCase","_defs","def","target","title","_refs","defaultRules","react","arr","output","oldKey","html","heading","level","children","nptable","lheading","hr","codeBlock","lang","className","class","fence","blockQuote","list","isStartOfLineCapture","isListBlock","_list","bullet","ordered","start","items","lastItemWasAParagraph","itemContent","item","prefixCapture","space","spaceRegex","isLastItem","containsBlocks","thisItemIsAParagraph","adjustedContent","oldStateInline","oldStateList","ListWrapper","listItems","join","listTag","table","getStyle","colIndex","textAlign","headers","style","scope","rows","row","r","c","cols","thead","tbody","newline","paragraph","escape","tableSeparator","autolink","mailto","address","link","href","image","alt","src","reflink","refimage","em","strong","u","del","inlineCode","br","ruleOutput","property","nestedRuleOutput","ast","outputFunc","reactFor","nestedOutput","lastResult","nodeOut","htmlFor","outputFor","arrayRule","arrayRuleCheck","arrayRuleOutput","outerOutput","defaultRawParse","defaultBlockParse","defaultInlineParse","defaultImplicitParse","isBlock","defaultReactOutput","defaultHtmlOutput","markdownToReact","markdownToHtml","ReactMarkdown","divProps","SimpleMarkdown","defaultParse","arguments","defaultOutput","preprocessMarkdown","markdown","withoutMultipleNewlines","withoutExtraSpaces","markdownToLines","preprocessedMarkdown","mdParse","syntaxTree","lines","currentLine","processNode","parentType","textLines","textLine","word","contentNode","treeNode","markdownToHTML","applyStyle","dom","styleFn","addHtmlSpan","width","classes","fo","append","div","label","labelClass","isNode","labelStyle","bbox","getBoundingClientRect","height","createTspan","textElement","lineIndex","lineHeight","createFormattedText","g","structuredText","addBackground","labelGroup","bkg","insert","line","currentWord","tspan","words","reverse","wrappedLine","pop","updateTextContentAndStyles","getComputedTextLength","getBBox","padding","innerTspan","createText","el","isTitle","useHtmlLabels","addSvgBackground","log","htmlText","decodeEntities","s","vertexNode","special","lastWord","includes","svgLabel"],"sourceRoot":""}