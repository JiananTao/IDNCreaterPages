{"version":3,"file":"js/84.3445bb26.js","mappings":"oLAGIA,EAAqB,EA4BzB,SAASC,EAAMC,GACb,OAAOC,EAAAA,EAAAA,GAAUD,EAAOF,EAC1B,CAEA,Q,kBC9BA,SAASI,EAAMC,GACb,IAAIC,EAAO,CACTC,QAAS,CACPC,SAAUH,EAAEI,aACZC,WAAYL,EAAEM,eACdC,SAAUP,EAAEQ,cAEdC,MAAOC,EAAWV,GAClBW,MAAOC,EAAWZ,IAKpB,OAHKa,EAAAA,EAAcb,EAAEc,WACnBb,EAAKJ,MAAQgB,EAAQb,EAAEc,UAElBb,CACT,CAEA,SAASS,EAAWV,GAClB,OAAOa,EAAAA,EAAMb,EAAES,SAAS,SAAUM,GAChC,IAAIC,EAAYhB,EAAEiB,KAAKF,GACnBG,EAASlB,EAAEkB,OAAOH,GAClBE,EAAO,CAAEF,EAAGA,GAOhB,OANKF,EAAAA,EAAcG,KACjBC,EAAKpB,MAAQmB,GAEVH,EAAAA,EAAcK,KACjBD,EAAKC,OAASA,GAETD,CACT,GACF,CAEA,SAASL,EAAWZ,GAClB,OAAOa,EAAAA,EAAMb,EAAEW,SAAS,SAAUQ,GAChC,IAAIC,EAAYpB,EAAEqB,KAAKF,GACnBE,EAAO,CAAEN,EAAGI,EAAEJ,EAAGO,EAAGH,EAAEG,GAO1B,OANKT,EAAAA,EAAcM,EAAEI,QACnBF,EAAKE,KAAOJ,EAAEI,MAEXV,EAAAA,EAAcO,KACjBC,EAAKxB,MAAQuB,GAERC,CACT,GACF,C,yIC3CO,IAAIG,EAAY,CAAC,EACpBC,EAAc,CAAC,EACfC,EAAU,CAAC,EAER,MAAMC,EAAQ,KACnBF,EAAc,CAAC,EACfC,EAAU,CAAC,EACXF,EAAY,CAAC,CAAC,EAGVI,EAAe,CAACC,EAAIC,KAGxBC,EAAAA,EAAAA,MAAU,iBAAkBD,EAAa,IAAKD,EAAI,MAAOJ,EAAYK,GAAaE,SAASH,MACvFJ,EAAYK,GAAaE,SAASH,IAOlCI,EAAgB,CAACZ,EAAMa,KAC3BH,EAAAA,EAAAA,KAAS,iBAAkBG,EAAW,OAAQT,EAAYS,IAC1DH,EAAAA,EAAAA,KAAS,WAAYV,GAEjBA,EAAKN,IAAMmB,IAGXb,EAAKC,IAAMY,IAIVT,EAAYS,GAKfT,EAAYS,GAAWF,SAASX,EAAKN,IACrCa,EAAaP,EAAKN,EAAGmB,IACrBN,EAAaP,EAAKC,EAAGY,IACrBT,EAAYS,GAAWF,SAASX,EAAKC,IAPrCS,EAAAA,EAAAA,MAAU,SAAUG,EAAW,uBACxB,MAULC,EAAO,CAACD,EAAWpB,EAAOsB,EAAUC,KACxCN,EAAAA,EAAAA,KACE,uBACAG,EACA,OACAG,EACA,OACAvB,EAAMG,KAAKiB,GACXG,GAEF,MAAM5B,EAAQK,EAAMwB,SAASJ,IAAc,GAGvCA,IAAcG,GAChB5B,EAAM8B,KAAKL,GAGbH,EAAAA,EAAAA,KAAS,4BAA6BG,EAAW,QAASzB,GAE1DA,EAAM+B,SAASvB,IACb,GAAIH,EAAMwB,SAASrB,GAAMwB,OAAS,EAChCN,EAAKlB,EAAMH,EAAOsB,EAAUC,OACvB,CACL,MAAMK,EAAO5B,EAAMG,KAAKA,GACxBc,EAAAA,EAAAA,KAAS,MAAOd,EAAM,OAAQoB,EAAQ,gBAAiBH,GACvDE,EAASO,QAAQ1B,EAAMyB,GACnBL,IAAWvB,EAAMI,OAAOD,KAC1Bc,EAAAA,EAAAA,KAAS,iBAAkBd,EAAMH,EAAMI,OAAOD,IAC9CmB,EAASQ,UAAU3B,EAAMH,EAAMI,OAAOD,KAGpCiB,IAAcG,GAAUpB,IAASiB,GACnCH,EAAAA,EAAAA,MAAU,iBAAkBd,EAAMiB,GAClCE,EAASQ,UAAU3B,EAAMiB,KAEzBH,EAAAA,EAAAA,KAAS,WAAYG,EAAW,OAAQG,EAAQ,OAAQvB,EAAMG,KAAKiB,GAAYG,GAC/EN,EAAAA,EAAAA,MACE,+BACAd,EACA,mBACAiB,IAAcG,EACd,mBACApB,IAASiB,IAGb,MAAMvB,EAAQG,EAAMH,MAAMM,GAC1Bc,EAAAA,EAAAA,MAAU,gBAAiBpB,GAC3BA,EAAM6B,SAASnB,IACbU,EAAAA,EAAAA,KAAS,OAAQV,GACjB,MAAMqB,EAAO5B,EAAMO,KAAKA,EAAKN,EAAGM,EAAKC,EAAGD,EAAKE,MAC7CQ,EAAAA,EAAAA,KAAS,YAAaW,EAAML,GAC5B,IAEMJ,EAAcZ,EAAMgB,IACtBN,EAAAA,EAAAA,KAAS,cAAeV,EAAKN,EAAGM,EAAKC,EAAGoB,EAAMrB,EAAKE,MACnDa,EAASS,QAAQxB,EAAKN,EAAGM,EAAKC,EAAGoB,EAAMrB,EAAKE,MAC5CQ,EAAAA,EAAAA,KAAS,kBAAmBK,EAASzB,QAASyB,EAASf,KAAKe,EAASzB,QAAQ,MAE7EoB,EAAAA,EAAAA,KACE,yBACAV,EAAKN,EACL,SACAM,EAAKC,EACL,YACAe,EACA,cACAH,EAGL,OAAQf,GACPY,EAAAA,EAAAA,MAAUZ,EACX,IAEJ,CACDY,EAAAA,EAAAA,MAAU,gBAAiBd,GAC3BH,EAAMgC,WAAW7B,EAAK,GACtB,EAES8B,EAAqB,CAAClB,EAAIf,KAErC,MAAMwB,EAAWxB,EAAMwB,SAAST,GAChC,IAAImB,EAAM,IAAIV,GAEd,IAAK,MAAMW,KAASX,EAClBZ,EAAQuB,GAASpB,EACjBmB,EAAM,IAAIA,KAAQD,EAAmBE,EAAOnC,IAG9C,OAAOkC,CAAG,EA+BCE,EAAsB,CAACrB,EAAIf,KAEtCiB,EAAAA,EAAAA,MAAU,YAAaF,GAEvB,MAAMS,EAAWxB,EAAMwB,SAAST,GAEhC,GADAE,EAAAA,EAAAA,MAAU,4BAA6BF,EAAIS,GACvCA,EAASG,OAAS,EAEpB,OADAV,EAAAA,EAAAA,MAAU,uBAAwBF,GAC3BA,EAET,IAAK,MAAMoB,KAASX,EAAU,CAC5B,MAAMa,EAAMD,EAAoBD,EAAOnC,GACvC,GAAIqC,EAEF,OADApB,EAAAA,EAAAA,MAAU,wBAAyBF,EAAI,OAAQsB,GACxCA,CAEV,GAGGC,EAAevB,GACdL,EAAUK,IAIVL,EAAUK,GAAIwB,qBAKf7B,EAAUK,GACLL,EAAUK,GAAIA,GATdA,EAcEyB,EAAyB,CAACxC,EAAOyC,MACvCzC,GAASyC,EAAQ,GACpBxB,EAAAA,EAAAA,MAAU,0BAGVA,EAAAA,EAAAA,MAAU,qBAIZjB,EAAML,QAAQ+B,SAAQ,SAAUX,GAC9B,MAAMS,EAAWxB,EAAMwB,SAAST,GAC5BS,EAASG,OAAS,IACpBV,EAAAA,EAAAA,KACE,qBACAF,EACA,6BACAqB,EAAoBrB,EAAIf,IAE1BW,EAAYI,GAAMkB,EAAmBlB,EAAIf,GACzCU,EAAUK,GAAM,CAAEA,GAAIqB,EAAoBrB,EAAIf,GAAQ0C,YAAa1C,EAAMG,KAAKY,IAEpF,IAGEf,EAAML,QAAQ+B,SAAQ,SAAUX,GAC9B,MAAMS,EAAWxB,EAAMwB,SAAST,GAC1BlB,EAAQG,EAAMH,QAChB2B,EAASG,OAAS,GACpBV,EAAAA,EAAAA,MAAU,qBAAsBF,EAAIJ,GACpCd,EAAM6B,SAASnB,IAIb,GAAIA,EAAKN,IAAMc,GAAMR,EAAKC,IAAMO,EAAI,CAIlC,MAAM4B,EAAK7B,EAAaP,EAAKN,EAAGc,GAC1B6B,EAAK9B,EAAaP,EAAKC,EAAGO,GAG5B4B,EAAKC,IACP3B,EAAAA,EAAAA,KAAS,SAAUV,EAAM,mBAAoBQ,GAC7CE,EAAAA,EAAAA,KAAS,qBAAsBF,EAAI,KAAMJ,EAAYI,IACrDL,EAAUK,GAAIwB,qBAAsB,EAEvC,MAGHtB,EAAAA,EAAAA,MAAU,iBAAkBF,EAAIJ,EAEtC,IAIEX,EAAMH,QAAQ6B,SAAQ,SAAUrB,GAC9B,MAAME,EAAOP,EAAMO,KAAKF,GACxBY,EAAAA,EAAAA,KAAS,QAAUZ,EAAEJ,EAAI,OAASI,EAAEG,EAAI,KAAOqC,KAAKC,UAAUzC,IAC9DY,EAAAA,EAAAA,KAAS,QAAUZ,EAAEJ,EAAI,OAASI,EAAEG,EAAI,KAAOqC,KAAKC,UAAU9C,EAAMO,KAAKF,KAEzE,IAAIJ,EAAII,EAAEJ,EACNO,EAAIH,EAAEG,EAaV,GAXAS,EAAAA,EAAAA,KACE,UACAP,EACA,OACAL,EAAEJ,EACFI,EAAEG,EACF,gBACAE,EAAUL,EAAEJ,GACZ,QACAS,EAAUL,EAAEG,IAEVE,EAAUL,EAAEJ,IAAMS,EAAUL,EAAEG,IAAME,EAAUL,EAAEJ,KAAOS,EAAUL,EAAEG,GAAI,CACzES,EAAAA,EAAAA,KAAS,iDAAkDZ,EAAEJ,EAAGI,EAAEG,EAAGH,EAAEI,MACvEQ,EAAAA,EAAAA,KAAS,oCAAqCZ,EAAEJ,EAAGI,EAAEG,EAAGH,EAAEI,MAC1DR,EAAIqC,EAAYjC,EAAEJ,GAClBO,EAAI8B,EAAYjC,EAAEG,GAClBR,EAAM+C,WAAW1C,EAAEJ,EAAGI,EAAEG,EAAGH,EAAEI,MAC7B,MAAMuC,EAAY3C,EAAEG,EAAI,MAAQH,EAAEJ,EAClCD,EAAM6B,QAAQmB,EAAW,CACvBC,MAAOD,EACPjC,GAAIiC,EACJE,WAAY,GACZC,UAAW5C,EAAK6C,MAChBC,QAAS,EACTC,MAAO,YACPC,MAAO,KAET,MAAMC,EAAQX,KAAKY,MAAMZ,KAAKC,UAAUvC,IAClCmD,EAAQb,KAAKY,MAAMZ,KAAKC,UAAUvC,IACxCiD,EAAMJ,MAAQ,GACdI,EAAMG,aAAe,OACrBD,EAAMN,MAAQ,GACdI,EAAMI,YAAcvD,EAAEJ,EACtByD,EAAMG,UAAYxD,EAAEJ,EAEpBD,EAAM+B,QAAQ9B,EAAG+C,EAAWQ,EAAOnD,EAAEI,KAAO,mBAC5CT,EAAM+B,QAAQiB,EAAWxC,EAAGkD,EAAOrD,EAAEI,KAAO,kBAClD,MAAeC,EAAUL,EAAEJ,IAAMS,EAAUL,EAAEG,MACvCS,EAAAA,EAAAA,KAAS,oCAAqCZ,EAAEJ,EAAGI,EAAEG,EAAGH,EAAEI,MAC1DR,EAAIqC,EAAYjC,EAAEJ,GAClBO,EAAI8B,EAAYjC,EAAEG,GAClBR,EAAM+C,WAAW1C,EAAEJ,EAAGI,EAAEG,EAAGH,EAAEI,MACzBR,IAAMI,EAAEJ,IACVM,EAAKqD,YAAcvD,EAAEJ,GAEnBO,IAAMH,EAAEG,IACVD,EAAKsD,UAAYxD,EAAEG,GAErBS,EAAAA,EAAAA,KAAS,yBAA0BhB,EAAGO,EAAGH,EAAEI,MAC3CT,EAAM+B,QAAQ9B,EAAGO,EAAGD,EAAMF,EAAEI,MAElC,IACEQ,EAAAA,EAAAA,KAAS,iBAAkB6C,EAAAA,EAAmB9D,IAC9C+D,EAAU/D,EAAO,GAEjBiB,EAAAA,EAAAA,MAAUP,GAAU,EAUTqD,EAAY,CAAC/D,EAAOyC,KAE/B,GADAxB,EAAAA,EAAAA,KAAS,eAAgBwB,EAAOqB,EAAAA,EAAmB9D,GAAQA,EAAMwB,SAAS,MACtEiB,EAAQ,GAEV,YADAxB,EAAAA,EAAAA,MAAU,eAMZ,IAAItB,EAAQK,EAAML,QACdqE,GAAc,EAClB,IAAK,MAAM7D,KAAQR,EAAO,CACxB,MAAM6B,EAAWxB,EAAMwB,SAASrB,GAChC6D,EAAcA,GAAexC,EAASG,OAAS,CAChD,CAED,GAAKqC,EAAL,CAMA/C,EAAAA,EAAAA,MAAU,WAAYtB,EAAO8C,GAC7B,IAAK,MAAMtC,KAAQR,EAcjB,GAbAsB,EAAAA,EAAAA,MACE,kBACAd,EACAO,EACAA,EAAUP,KAAUO,EAAUP,GAAMoC,qBACnCvC,EAAMI,OAAOD,GACdH,EAAMG,KAAKA,GACXH,EAAMwB,SAAS,KACf,UACAiB,GAIG/B,EAAUP,GAInB,IACOO,EAAUP,GAAMoC,qBAEjBvC,EAAMwB,SAASrB,IACfH,EAAMwB,SAASrB,GAAMwB,OAAS,EAC9B,CACAV,EAAAA,EAAAA,KACE,2EACAd,EACAsC,GAGF,MAAMwB,EAAgBjE,EAAMA,QAC5B,IAAIkE,EAAgC,OAA1BD,EAAcE,QAAmB,KAAO,KAC9CzD,EAAUP,IAASO,EAAUP,GAAMuC,aAAehC,EAAUP,GAAMuC,YAAYwB,MAChFA,EAAMxD,EAAUP,GAAMuC,YAAYwB,IAClCjD,EAAAA,EAAAA,KAAS,aAAcP,EAAUP,GAAMuC,YAAYwB,IAAKA,IAG1D,MAAME,EAAe,IAAIC,EAAAA,EAAe,CACtC9E,YAAY,EACZE,UAAU,IAET6E,SAAS,CACRH,QAASD,EACTK,QAAS,GACTC,QAAS,GACTC,QAAS,EACTC,QAAS,IAEVC,qBAAoB,WACnB,MAAO,CAAC,CAClB,IAEM1D,EAAAA,EAAAA,KAAS,wBAAyB6C,EAAAA,EAAmB9D,IACrDqB,EAAKlB,EAAMH,EAAOoE,EAAcjE,GAChCH,EAAM6B,QAAQ1B,EAAM,CAClByE,aAAa,EACb7D,GAAIZ,EACJuC,YAAahC,EAAUP,GAAMuC,YAC7BS,UAAWzC,EAAUP,GAAMgD,UAC3BnD,MAAOoE,IAETnD,EAAAA,EAAAA,KAAS,+BAAgCd,EAAM,IAAK2D,EAAAA,EAAmBM,IACvEnD,EAAAA,EAAAA,MAAU,uBAAwB6C,EAAAA,EAAmB9D,GAC3D,MACMiB,EAAAA,EAAAA,KACE,cACAd,EACA,qDACCO,EAAUP,GAAMoC,oBACjB,gBACCvC,EAAMI,OAAOD,GACd,aACAH,EAAMwB,SAASrB,IAASH,EAAMwB,SAASrB,GAAMwB,OAAS,EACtD3B,EAAMwB,SAAS,KACfiB,GAEFxB,EAAAA,EAAAA,MAAUP,QA5DVO,EAAAA,EAAAA,MAAU,gBAAiBd,EAAMsC,GAgErC9C,EAAQK,EAAML,QACdsB,EAAAA,EAAAA,KAAS,oBAAqBtB,GAC9B,IAAK,MAAMQ,KAAQR,EAAO,CACxB,MAAMiC,EAAO5B,EAAMG,KAAKA,GACxBc,EAAAA,EAAAA,KAAS,kBAAmBd,EAAMyB,GAC9BA,EAAKgD,aACPb,EAAUnC,EAAK5B,MAAOyC,EAAQ,EAEjC,CA5FA,MAFCxB,EAAAA,EAAAA,MAAU,6BAA8BjB,EAAML,QA8F/C,EAGGkF,EAAS,CAAC7E,EAAOL,KACrB,GAAqB,IAAjBA,EAAMgC,OACR,MAAO,GAET,IAAImD,EAASC,OAAOC,OAAOrF,GAO3B,OANAA,EAAM+B,SAASvB,IACb,MAAMqB,EAAWxB,EAAMwB,SAASrB,GAC1B8E,EAASJ,EAAO7E,EAAOwB,GAC7BsD,EAAS,IAAIA,KAAWG,EAAO,IAG1BH,CAAM,EAGFI,EAAwBlF,GAAU6E,EAAO7E,EAAOA,EAAMwB,YCnc7D2D,EAAO,CAAC/E,EAAQD,KACpBc,EAAAA,EAAAA,KAAS,8BAA+Bd,EAAKY,GAAIZ,GAGjD,MAAMiF,EAAWhF,EACdiF,OAAO,KACPC,KAAK,QAAS,WAAanF,EAAKoF,MAAQ,IAAMpF,EAAKoF,MAAQ,KAC3DD,KAAK,KAAMnF,EAAKY,IAGboE,EAAOC,EAASC,OAAO,OAAQ,gBAE/BG,GAAgBC,EAAAA,EAAAA,IAASC,EAAAA,EAAAA,KAAYC,UAAUC,YAG/CxC,EAAQgC,EAASC,OAAO,KAAKC,KAAK,QAAS,iBAK3CO,EACe,aAAnB1F,EAAK2F,WACDC,EAAAA,EAAAA,GAAW3C,EAAOjD,EAAKgD,UAAW,CAAEI,MAAOpD,EAAK+C,WAAYsC,kBAC5DpC,EAAMjD,OAAO6F,aAAYC,EAAAA,EAAAA,GAAY9F,EAAKgD,UAAWhD,EAAK+C,gBAAY,GAAW,IAGvF,IAAIgD,EAAOL,EAAKM,UAEhB,IAAIV,EAAAA,EAAAA,IAASC,EAAAA,EAAAA,KAAYC,UAAUC,YAAa,CAC9C,MAAMQ,EAAMP,EAAKrE,SAAS,GACpB6E,GAAKC,EAAAA,EAAAA,IAAOT,GAClBK,EAAOE,EAAIG,wBACXF,EAAGf,KAAK,QAASY,EAAKM,OACtBH,EAAGf,KAAK,SAAUY,EAAKO,OACxB,CAED,MAAMpD,EAAU,EAAIlD,EAAKkD,QACnBqD,EAAcrD,EAAU,EAExBmD,EAAQrG,EAAKqG,OAASN,EAAKM,MAAQnD,EAAU6C,EAAKM,MAAQnD,EAAUlD,EAAKqG,MAC3ErG,EAAKqG,OAASN,EAAKM,MAAQnD,EAC7BlD,EAAKwG,MAAQT,EAAKM,MAAQrG,EAAKqG,OAAS,EAAIrG,EAAKkD,QAAU,EAE3DlD,EAAKwG,MAAQxG,EAAKkD,QAAU,EAG9BpC,EAAAA,EAAAA,MAAU,QAASd,EAAM0C,KAAKC,UAAU3C,IAExCgF,EACGG,KAAK,QAASnF,EAAKoD,OACnB+B,KAAK,KAAMnF,EAAKyG,IAChBtB,KAAK,KAAMnF,EAAK0G,IAChBvB,KAAK,IAAKnF,EAAK2G,EAAIN,EAAQ,GAC3BlB,KAAK,IAAKnF,EAAK4G,EAAI5G,EAAKsG,OAAS,EAAIC,GACrCpB,KAAK,QAASkB,GACdlB,KAAK,SAAUnF,EAAKsG,OAASpD,GAE5BmC,EACFpC,EAAMkC,KACJ,YAEA,cAAgBnF,EAAK2G,EAAIZ,EAAKM,MAAQ,GAAK,MAAQrG,EAAK4G,EAAI5G,EAAKsG,OAAS,GAAK,KAGjFrD,EAAMkC,KACJ,YAEA,aAAenF,EAAK2G,EAAI,MAAQ3G,EAAK4G,EAAI5G,EAAKsG,OAAS,GAAK,KAKhE,MAAMO,EAAU7B,EAAKhF,OAAOgG,UAQ5B,OAPAhG,EAAKqG,MAAQQ,EAAQR,MACrBrG,EAAKsG,OAASO,EAAQP,OAEtBtG,EAAK8G,UAAY,SAAUC,GACzB,OAAOC,EAAAA,EAAAA,GAAchH,EAAM+G,EAC/B,EAES9B,CAAQ,EAUXgC,EAAY,CAAChH,EAAQD,KAEzB,MAAMiF,EAAWhF,EAAOiF,OAAO,KAAKC,KAAK,QAAS,gBAAgBA,KAAK,KAAMnF,EAAKY,IAG5EoE,EAAOC,EAASC,OAAO,OAAQ,gBAE/BhC,EAAU,EAAIlD,EAAKkD,QACnBqD,EAAcrD,EAAU,EAG9B8B,EACGG,KAAK,KAAMnF,EAAKyG,IAChBtB,KAAK,KAAMnF,EAAK0G,IAChBvB,KAAK,IAAKnF,EAAK2G,EAAI3G,EAAKqG,MAAQ,EAAIE,GACpCpB,KAAK,IAAKnF,EAAK4G,EAAI5G,EAAKsG,OAAS,EAAIC,GACrCpB,KAAK,QAASnF,EAAKqG,MAAQnD,GAC3BiC,KAAK,SAAUnF,EAAKsG,OAASpD,GAC7BiC,KAAK,OAAQ,QAEhB,MAAM0B,EAAU7B,EAAKhF,OAAOgG,UAQ5B,OAPAhG,EAAKqG,MAAQQ,EAAQR,MACrBrG,EAAKsG,OAASO,EAAQP,OAEtBtG,EAAK8G,UAAY,SAAUC,GACzB,OAAOC,EAAAA,EAAAA,GAAchH,EAAM+G,EAC/B,EAES9B,CAAQ,EAEXiC,EAAmB,CAACjH,EAAQD,KAEhC,MAAMiF,EAAWhF,EAAOiF,OAAO,KAAKC,KAAK,QAASnF,EAAKmH,SAAShC,KAAK,KAAMnF,EAAKY,IAG1EoE,EAAOC,EAASC,OAAO,OAAQ,gBAG/BjC,EAAQgC,EAASC,OAAO,KAAKC,KAAK,QAAS,iBAC3CiC,EAAYnC,EAASoC,OAAO,QAE5B3B,EAAOzC,EACVjD,OACA6F,aAAYC,EAAAA,EAAAA,GAAY9F,EAAKgD,UAAWhD,EAAK+C,gBAAY,GAAW,IAGvE,IAAIgD,EAAOL,EAAKM,UAChB,IAAIV,EAAAA,EAAAA,IAASC,EAAAA,EAAAA,KAAYC,UAAUC,YAAa,CAC9C,MAAMQ,EAAMP,EAAKrE,SAAS,GACpB6E,GAAKC,EAAAA,EAAAA,IAAOT,GAClBK,EAAOE,EAAIG,wBACXF,EAAGf,KAAK,QAASY,EAAKM,OACtBH,EAAGf,KAAK,SAAUY,EAAKO,OACxB,CACDP,EAAOL,EAAKM,UACZ,MAAM9C,EAAU,EAAIlD,EAAKkD,QACnBqD,EAAcrD,EAAU,EAExBmD,EAAQrG,EAAKqG,OAASN,EAAKM,MAAQrG,EAAKkD,QAAU6C,EAAKM,MAAQrG,EAAKkD,QAAUlD,EAAKqG,MACrFrG,EAAKqG,OAASN,EAAKM,MAAQrG,EAAKkD,QAClClD,EAAKwG,MAAQT,EAAKM,MAAuB,EAAfrG,EAAKkD,QAAclD,EAAKqG,OAAS,EAE3DrG,EAAKwG,MAAQxG,EAAKkD,QAAU,EAI9B8B,EACGG,KAAK,QAAS,SACdA,KAAK,IAAKnF,EAAK2G,EAAIN,EAAQ,EAAIE,GAC/BpB,KAAK,IAAKnF,EAAK4G,EAAI5G,EAAKsG,OAAS,EAAIC,GACrCpB,KAAK,QAASkB,EAAQnD,GACtBiC,KAAK,SAAUnF,EAAKsG,OAASpD,GAChCkE,EACGjC,KAAK,QAAS,SACdA,KAAK,IAAKnF,EAAK2G,EAAIN,EAAQ,EAAIE,GAC/BpB,KAAK,IAAKnF,EAAK4G,EAAI5G,EAAKsG,OAAS,EAAIC,EAAcR,EAAKO,OAAS,GACjEnB,KAAK,QAASkB,EAAQnD,GACtBiC,KAAK,SAAUnF,EAAKsG,OAASpD,EAAU6C,EAAKO,OAAS,GAGxDrD,EAAMkC,KACJ,YACA,cACGnF,EAAK2G,EAAIZ,EAAKM,MAAQ,GACvB,MACCrG,EAAK4G,EACJ5G,EAAKsG,OAAS,EACdtG,EAAKkD,QAAU,IACdoC,EAAAA,EAAAA,IAASC,EAAAA,EAAAA,KAAYC,UAAUC,YAAc,EAAI,IACpD,KAGJ,MAAMoB,EAAU7B,EAAKhF,OAAOgG,UAO5B,OANAhG,EAAKsG,OAASO,EAAQP,OAEtBtG,EAAK8G,UAAY,SAAUC,GACzB,OAAOC,EAAAA,EAAAA,GAAchH,EAAM+G,EAC/B,EAES9B,CAAQ,EAGXqC,EAAU,CAACrH,EAAQD,KAEvB,MAAMiF,EAAWhF,EAAOiF,OAAO,KAAKC,KAAK,QAASnF,EAAKmH,SAAShC,KAAK,KAAMnF,EAAKY,IAG1EoE,EAAOC,EAASC,OAAO,OAAQ,gBAE/BhC,EAAU,EAAIlD,EAAKkD,QACnBqD,EAAcrD,EAAU,EAG9B8B,EACGG,KAAK,QAAS,WACdA,KAAK,IAAKnF,EAAK2G,EAAI3G,EAAKqG,MAAQ,EAAIE,GACpCpB,KAAK,IAAKnF,EAAK4G,EAAI5G,EAAKsG,OAAS,GACjCnB,KAAK,QAASnF,EAAKqG,MAAQnD,GAC3BiC,KAAK,SAAUnF,EAAKsG,OAASpD,GAEhC,MAAM2D,EAAU7B,EAAKhF,OAAOgG,UAQ5B,OAPAhG,EAAKqG,MAAQQ,EAAQR,MACrBrG,EAAKsG,OAASO,EAAQP,OACtBtG,EAAKwG,MAAQxG,EAAKkD,QAAU,EAC5BlD,EAAK8G,UAAY,SAAUC,GACzB,OAAOC,EAAAA,EAAAA,GAAchH,EAAM+G,EAC/B,EAES9B,CAAQ,EAGXsC,EAAS,CAAEvC,OAAMkC,mBAAkBD,YAAWK,WAEpD,IAAIE,EAAe,CAAC,EAEb,MAAMC,EAAgB,CAACC,EAAM1H,KAClCc,EAAAA,EAAAA,MAAU,qBACV,MAAMqC,EAAQnD,EAAKmD,OAAS,OAC5BqE,EAAaxH,EAAKY,IAAM2G,EAAOpE,GAAOuE,EAAM1H,EAAK,EAUtCU,EAAQ,KACnB8G,EAAe,CAAC,CAAC,ECvObG,EAAkB,CAACC,EAAO/H,EAAOgI,EAAaC,KAClDhH,EAAAA,EAAAA,KAAS,iCAAkC6C,EAAAA,EAAmB9D,GAAQiI,GACtE,MAAM/D,EAAMlE,EAAMA,QAAQmE,QAC1BlD,EAAAA,EAAAA,MAAU,iCAAkCiD,GAE5C,MAAM2D,EAAOE,EAAM1C,OAAO,KAAKC,KAAK,QAAS,QACxCtF,EAAML,QAGTsB,EAAAA,EAAAA,KAAS,uBAAwBjB,EAAML,SAFvCsB,EAAAA,EAAAA,KAAS,qBAAsBjB,GAI7BA,EAAMH,QAAQ8B,OAAS,GACzBV,EAAAA,EAAAA,MAAU,kBAAmBjB,EAAMO,KAAKP,EAAMH,QAAQ,KAExD,MAAMqI,EAAWL,EAAKxC,OAAO,KAAKC,KAAK,QAAS,YAC1C6C,EAAYN,EAAKxC,OAAO,KAAKC,KAAK,QAAS,aAC3C8C,EAAaP,EAAKxC,OAAO,KAAKC,KAAK,QAAS,cAC5C3F,EAAQkI,EAAKxC,OAAO,KAAKC,KAAK,QAAS,SAI7CtF,EAAML,QAAQ+B,SAAQ,SAAUzB,GAC9B,MAAME,EAAOH,EAAMG,KAAKF,GACxB,QAAsB,IAAlBgI,EAA6B,CAC/B,MAAMrG,EAAOiB,KAAKY,MAAMZ,KAAKC,UAAUmF,EAAcvF,cAErDzB,EAAAA,EAAAA,KAAS,iCAAkChB,EAAG,KAAM2B,EAAMqG,GAC1DjI,EAAM6B,QAAQoG,EAAclH,GAAIa,GAC3B5B,EAAMI,OAAOH,KAChBgB,EAAAA,EAAAA,MAAU,iBAAkBhB,EAAGgI,EAAclH,IAC7Cf,EAAM8B,UAAU7B,EAAGgI,EAAclH,GAAIa,GAExC,CAED,GADAX,EAAAA,EAAAA,KAAS,oBAAsBhB,EAAI,KAAO4C,KAAKC,UAAU9C,EAAMG,KAAKF,KAChEE,GAAQA,EAAKyE,YAAa,CAE5B3D,EAAAA,EAAAA,KAAS,qBAAsBhB,EAAGE,EAAKqG,MAAOxG,EAAMG,KAAKF,IACzD,MAAMoI,EAAIP,EAAgBnI,EAAOQ,EAAKH,MAAOgI,EAAahI,EAAMG,KAAKF,IAC/DqI,EAAQD,EAAER,MAChBU,EAAAA,EAAAA,GAAiBpI,EAAMmI,GACvBnI,EAAKwG,KAAO0B,EAAE1B,MAAQ,EACtB1F,EAAAA,EAAAA,KAAS,uBAAwBhB,EAAGE,EAAMA,EAAKqG,MAAOrG,EAAK2G,EAAG3G,EAAK4G,IACnEyB,EAAAA,EAAAA,GAAYF,EAAOnI,GAEnBc,EAAAA,EAAAA,KAAS,6BAA8BqH,EAAOnI,EACpD,MACUH,EAAMwB,SAASvB,GAAG0B,OAAS,GAG7BV,EAAAA,EAAAA,KAAS,uCAAwChB,EAAGE,EAAKY,GAAIZ,EAAMH,GACnEiB,EAAAA,EAAAA,KAASmB,EAAoBjC,EAAKY,GAAIf,IACtCU,EAAUP,EAAKY,IAAM,CAAEA,GAAIqB,EAAoBjC,EAAKY,GAAIf,GAAQG,UAGhEc,EAAAA,EAAAA,KAAS,gCAAiChB,EAAGE,EAAKY,GAAIZ,IACtDsI,EAAAA,EAAAA,GAAW9I,EAAOK,EAAMG,KAAKF,GAAIiE,GAGzC,IAMElE,EAAMH,QAAQ6B,SAAQ,SAAUrB,GAC9B,MAAME,EAAOP,EAAMO,KAAKF,EAAEJ,EAAGI,EAAEG,EAAGH,EAAEI,MACpCQ,EAAAA,EAAAA,KAAS,QAAUZ,EAAEJ,EAAI,OAASI,EAAEG,EAAI,KAAOqC,KAAKC,UAAUzC,IAC9DY,EAAAA,EAAAA,KAAS,QAAUZ,EAAEJ,EAAI,OAASI,EAAEG,EAAI,KAAMH,EAAG,IAAKwC,KAAKC,UAAU9C,EAAMO,KAAKF,KAGhFY,EAAAA,EAAAA,KAAS,MAAOP,EAAW,OAAQL,EAAEJ,EAAGI,EAAEG,EAAG,iBAAkBE,EAAUL,EAAEJ,GAAIS,EAAUL,EAAEG,KAC3FkI,EAAAA,EAAAA,GAAgBN,EAAY7H,EAChC,IAEEP,EAAMH,QAAQ6B,SAAQ,SAAUrB,GAC9BY,EAAAA,EAAAA,KAAS,QAAUZ,EAAEJ,EAAI,OAASI,EAAEG,EAAI,KAAOqC,KAAKC,UAAUzC,GAClE,IACEY,EAAAA,EAAAA,KAAS,iDACTA,EAAAA,EAAAA,KAAS,iDACTA,EAAAA,EAAAA,KAAS,iDACTA,EAAAA,EAAAA,KAASjB,IACT2I,EAAAA,EAAAA,IAAY3I,GACZiB,EAAAA,EAAAA,KAAS,sBAAuB6C,EAAAA,EAAmB9D,IAEnD,IAAI2G,EAAO,EA6CX,OA5CAzB,EAAqBlF,GAAO0B,SAAQ,SAAUzB,GAC5C,MAAME,EAAOH,EAAMG,KAAKF,GACxBgB,EAAAA,EAAAA,KAAS,YAAchB,EAAI,KAAO4C,KAAKC,UAAU9C,EAAMG,KAAKF,KAC5DgB,EAAAA,EAAAA,KACE,YAAchB,EAAI,MAAQE,EAAK2G,EAC/B,IAAM3G,EAAK4G,EACX,YACA5G,EAAKqG,MACL,YACArG,EAAKsG,QAEHtG,GAAQA,EAAKyE,aAGfgE,EAAAA,EAAAA,GAAazI,GAGTH,EAAMwB,SAASvB,GAAG0B,OAAS,GAG7BiG,EAAcM,EAAU/H,GACxBO,EAAUP,EAAKY,IAAIZ,KAAOA,IAE1ByI,EAAAA,EAAAA,GAAazI,EAGrB,IAGEH,EAAMH,QAAQ6B,SAAQ,SAAUrB,GAC9B,MAAME,EAAOP,EAAMO,KAAKF,GACxBY,EAAAA,EAAAA,KAAS,QAAUZ,EAAEJ,EAAI,OAASI,EAAEG,EAAI,KAAOqC,KAAKC,UAAUvC,GAAOA,GAErE,MAAMsI,GAAQC,EAAAA,EAAAA,GAAWX,EAAW9H,EAAGE,EAAMG,EAAWsH,EAAahI,IACrE+I,EAAAA,EAAAA,GAAkBxI,EAAMsI,EAC5B,IAEE7I,EAAML,QAAQ+B,SAAQ,SAAUzB,GAC9B,MAAM+I,EAAIhJ,EAAMG,KAAKF,GACrBgB,EAAAA,EAAAA,KAAShB,EAAG+I,EAAEC,KAAMD,EAAErC,MACP,UAAXqC,EAAEC,OACJtC,EAAOqC,EAAErC,KAEf,IACS,CAAEkB,OAAMlB,OAAA,EAGJuC,EAAS,CAACrB,EAAM7H,EAAOmJ,EAASnB,EAAajH,MACxDqI,EAAAA,EAAAA,GAAcvB,EAAMsB,EAASnB,EAAajH,IAC1CsI,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,KACAC,IACAC,IAEAvI,EAAAA,EAAAA,KAAS,kBAAmB6C,EAAAA,EAAmB9D,IAC/CwC,EAAuBxC,GACvBiB,EAAAA,EAAAA,KAAS,eAAgB6C,EAAAA,EAAmB9D,IAE5C8H,EAAgBD,EAAM7H,EAAOgI,EAAY,C","sources":["webpack://IDNCreaterPages/./node_modules/lodash-es/clone.js","webpack://IDNCreaterPages/./node_modules/dagre-d3-es/src/graphlib/json.js","webpack://IDNCreaterPages/../src/dagre-wrapper/mermaid-graphlib.js","webpack://IDNCreaterPages/../src/dagre-wrapper/clusters.js","webpack://IDNCreaterPages/../src/dagre-wrapper/index.js"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","/** Decorates with functions required by mermaids dagre-wrapper. */\nimport { log } from '../logger';\nimport * as graphlibJson from 'dagre-d3-es/src/graphlib/json.js';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\n\nexport let clusterDb = {};\nlet descendants = {};\nlet parents = {};\n\nexport const clear = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\n\nconst isDescendant = (id, ancenstorId) => {\n  // if (id === ancenstorId) return true;\n\n  log.trace('In isDecendant', ancenstorId, ' ', id, ' = ', descendants[ancenstorId].includes(id));\n  if (descendants[ancenstorId].includes(id)) {\n    return true;\n  }\n\n  return false;\n};\n\nconst edgeInCluster = (edge, clusterId) => {\n  log.info('Decendants of ', clusterId, ' is ', descendants[clusterId]);\n  log.info('Edge is ', edge);\n  // Edges to/from the cluster is not in the cluster, they are in the parent\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n\n  if (!descendants[clusterId]) {\n    log.debug('Tilt, ', clusterId, ',not in decendants');\n    return false;\n  }\n  return (\n    descendants[clusterId].includes(edge.v) ||\n    isDescendant(edge.v, clusterId) ||\n    isDescendant(edge.w, clusterId) ||\n    descendants[clusterId].includes(edge.w)\n  );\n};\n\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    'Copying children of ',\n    clusterId,\n    'root',\n    rootId,\n    'data',\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n\n  // Include cluster node if it is not the root\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n\n  log.warn('Copying (nodes) clusterId', clusterId, 'nodes', nodes);\n\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info('cp ', node, ' to ', rootId, ' with parent ', clusterId); //,node, data, ' parent is ', clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn('Setting parent', node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug('Setting parent', node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info('In copy ', clusterId, 'root', rootId, 'data', graph.node(clusterId), rootId);\n        log.debug(\n          'Not Setting parent for node=',\n          node,\n          'cluster!==rootId',\n          clusterId !== rootId,\n          'node!==clusterId',\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug('Copying Edges', edges);\n      edges.forEach((edge) => {\n        log.info('Edge', edge);\n        const data = graph.edge(edge.v, edge.w, edge.name);\n        log.info('Edge data', data, rootId);\n        try {\n          // Do not copy edges in and out of the root cluster, they belong to the parent graph\n          if (edgeInCluster(edge, rootId)) {\n            log.info('Copying as ', edge.v, edge.w, data, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data, edge.name);\n            log.info('newGraph edges ', newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              'Skipping copy of edge ',\n              edge.v,\n              '-->',\n              edge.w,\n              ' rootId: ',\n              rootId,\n              ' clusterId:',\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug('Removing node', node);\n    graph.removeNode(node);\n  });\n};\nexport const extractDescendants = (id, graph) => {\n  // log.debug('Extracting ', id);\n  const children = graph.children(id);\n  let res = [...children];\n\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n\n  return res;\n};\n\n/**\n * Validates the graph, checking that all parent child relation points to existing nodes and that\n * edges between nodes also ia correct. When not correct the function logs the discrepancies.\n *\n * @param graph\n */\nexport const validate = (graph) => {\n  const edges = graph.edges();\n  log.trace('Edges: ', edges);\n  for (const edge of edges) {\n    if (graph.children(edge.v).length > 0) {\n      log.trace('The node ', edge.v, ' is part of and edge even though it has children');\n      return false;\n    }\n    if (graph.children(edge.w).length > 0) {\n      log.trace('The node ', edge.w, ' is part of and edge even though it has children');\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Finds a child that is not a cluster. When faking an edge between a node and a cluster.\n *\n * @param id\n * @param {any} graph\n */\nexport const findNonClusterChild = (id, graph) => {\n  // const node = graph.node(id);\n  log.trace('Searching', id);\n  // const children = graph.children(id).reverse();\n  const children = graph.children(id); //.reverse();\n  log.trace('Searching children of id ', id, children);\n  if (children.length < 1) {\n    log.trace('This is a valid node', id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace('Found replacement for', id, ' => ', _id);\n      return _id;\n    }\n  }\n};\n\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  // If the cluster has no external connections\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n\n  // Return the replacement node\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\n\nexport const adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug('Opting out, no graph ');\n    return;\n  } else {\n    log.debug('Opting in, graph ');\n  }\n  // Go through the nodes and for each cluster found, save a replacement node, this can be used when\n  // faking a link to a cluster\n  graph.nodes().forEach(function (id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        'Cluster identified',\n        id,\n        ' Replacement id in edges: ',\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n\n  // Check incoming and outgoing edges for each cluster\n  graph.nodes().forEach(function (id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug('Cluster identified', id, descendants);\n      edges.forEach((edge) => {\n        // log.debug('Edge, decendants: ', edge, decendants[id]);\n\n        // Check if any edge leaves the cluster (not the actual cluster, that's a link from the box)\n        if (edge.v !== id && edge.w !== id) {\n          // Any edge where either the one of the nodes is descending to the cluster but not the other\n          // if (decendants[id].indexOf(edge.v) < 0 && decendants[id].indexOf(edge.w) < 0) {\n\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n\n          // d1 xor d2 - if either d1 is true and d2 is false or the other way around\n          if (d1 ^ d2) {\n            log.warn('Edge: ', edge, ' leaves cluster ', id);\n            log.warn('Decendants of XXX ', id, ': ', descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug('Not a cluster ', id, descendants);\n    }\n  });\n\n  // For clusters with incoming and/or outgoing edges translate those edges to a real node\n  // in the cluster in order to fake the edge\n  graph.edges().forEach(function (e) {\n    const edge = graph.edge(e);\n    log.warn('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(e));\n    log.warn('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(graph.edge(e)));\n\n    let v = e.v;\n    let w = e.w;\n    // Check if link is either from or to a cluster\n    log.warn(\n      'Fix XXX',\n      clusterDb,\n      'ids:',\n      e.v,\n      e.w,\n      'Translating: ',\n      clusterDb[e.v],\n      ' --- ',\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn('Fixing and trixing link to self - removing XXX', e.v, e.w, e.name);\n      log.warn('Fixing and trixing - removing XXX', e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + '---' + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: '',\n        labelText: edge.label,\n        padding: 0,\n        shape: 'labelRect',\n        style: '',\n      });\n      const edge1 = JSON.parse(JSON.stringify(edge));\n      const edge2 = JSON.parse(JSON.stringify(edge));\n      edge1.label = '';\n      edge1.arrowTypeEnd = 'none';\n      edge2.label = '';\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n\n      graph.setEdge(v, specialId, edge1, e.name + '-cyclic-special');\n      graph.setEdge(specialId, w, edge2, e.name + '-cyclic-special');\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn('Fixing and trixing - removing XXX', e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        edge.toCluster = e.w;\n      }\n      log.warn('Fix Replacing with XXX', v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn('Adjusted Graph', graphlibJson.write(graph));\n  extractor(graph, 0);\n\n  log.trace(clusterDb);\n\n  // Remove references to extracted cluster\n  // graph.edges().forEach(edge => {\n  //   if (isDecendant(edge.v, clusterId) || isDecendant(edge.w, clusterId)) {\n  //     graph.removeEdge(edge);\n  //   }\n  // });\n};\n\nexport const extractor = (graph, depth) => {\n  log.warn('extractor - ', depth, graphlibJson.write(graph), graph.children('D'));\n  if (depth > 10) {\n    log.error('Bailing out');\n    return;\n  }\n  // For clusters without incoming and/or outgoing edges, create a new cluster-node\n  // containing the nodes and edges in the custer in a new graph\n  // for (let i = 0;)\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n\n  if (!hasChildren) {\n    log.debug('Done, no node has children', graph.nodes());\n    return;\n  }\n  // const clusters = Object.keys(clusterDb);\n  // clusters.forEach(clusterId => {\n  log.debug('Nodes = ', nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      'Extracting node',\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children('D'),\n      ' Depth ',\n      depth\n    );\n    // Note that the node might have been removed after the Object.keys call so better check\n    // that it still is in the game\n    if (!clusterDb[node]) {\n      // Skip if the node is not a cluster\n      log.debug('Not a cluster', node, depth);\n      // break;\n    } else if (\n      !clusterDb[node].externalConnections &&\n      // !graph.parent(node) &&\n      graph.children(node) &&\n      graph.children(node).length > 0\n    ) {\n      log.warn(\n        'Cluster without external connections, without a parent and with children',\n        node,\n        depth\n      );\n\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === 'TB' ? 'LR' : 'TB';\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn('Fixing dir', clusterDb[node].clusterData.dir, dir);\n      }\n\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true,\n      })\n        .setGraph({\n          rankdir: dir, // Todo: set proper spacing\n          nodesep: 50,\n          ranksep: 50,\n          marginx: 8,\n          marginy: 8,\n        })\n        .setDefaultEdgeLabel(function () {\n          return {};\n        });\n\n      log.warn('Old graph before copy', graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph,\n      });\n      log.warn('New graph after copy node: (', node, ')', graphlibJson.write(clusterGraph));\n      log.debug('Old graph after copy', graphlibJson.write(graph));\n    } else {\n      log.warn(\n        'Cluster ** ',\n        node,\n        ' **not meeting the criteria !externalConnections:',\n        !clusterDb[node].externalConnections,\n        ' no parent: ',\n        !graph.parent(node),\n        ' children ',\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children('D'),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n\n  nodes = graph.nodes();\n  log.warn('New list of nodes', nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(' Now next level', node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\n\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n\n  return result;\n};\n\nexport const sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\n","import intersectRect from './intersect/intersect-rect';\nimport { log } from '../logger';\nimport createLabel from './createLabel';\nimport { createText } from '../rendering-util/createText';\nimport { select } from 'd3';\nimport { getConfig } from '../config';\nimport { evaluate } from '../diagrams/common/common';\n\nconst rect = (parent, node) => {\n  log.info('Creating subgraph rect for ', node.id, node);\n\n  // Add outer g element\n  const shapeSvg = parent\n    .insert('g')\n    .attr('class', 'cluster' + (node.class ? ' ' + node.class : ''))\n    .attr('id', node.id);\n\n  // add the rect\n  const rect = shapeSvg.insert('rect', ':first-child');\n\n  const useHtmlLabels = evaluate(getConfig().flowchart.htmlLabels);\n\n  // Create the label and insert it after the rect\n  const label = shapeSvg.insert('g').attr('class', 'cluster-label');\n\n  // const text = label\n  //   .node()\n  //   .appendChild(createLabel(node.labelText, node.labelStyle, undefined, true));\n  const text =\n    node.labelType === 'markdown'\n      ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels })\n      : label.node().appendChild(createLabel(node.labelText, node.labelStyle, undefined, true));\n\n  // Get the size of the label\n  let bbox = text.getBBox();\n\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr('width', bbox.width);\n    dv.attr('height', bbox.height);\n  }\n\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n\n  log.trace('Data ', node, JSON.stringify(node));\n  // center the rect around its coordinate\n  rect\n    .attr('style', node.style)\n    .attr('rx', node.rx)\n    .attr('ry', node.ry)\n    .attr('x', node.x - width / 2)\n    .attr('y', node.y - node.height / 2 - halfPadding)\n    .attr('width', width)\n    .attr('height', node.height + padding);\n\n  if (useHtmlLabels) {\n    label.attr(\n      'transform',\n      // This puts the labal on top of the box instead of inside it\n      'translate(' + (node.x - bbox.width / 2) + ', ' + (node.y - node.height / 2) + ')'\n    );\n  } else {\n    label.attr(\n      'transform',\n      // This puts the labal on top of the box instead of inside it\n      'translate(' + node.x + ', ' + (node.y - node.height / 2) + ')'\n    );\n  }\n  // Center the label\n\n  const rectBox = rect.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n};\n\n/**\n * Non visible cluster where the note is group with its\n *\n * @param {any} parent\n * @param {any} node\n * @returns {any} ShapeSvg\n */\nconst noteGroup = (parent, node) => {\n  // Add outer g element\n  const shapeSvg = parent.insert('g').attr('class', 'note-cluster').attr('id', node.id);\n\n  // add the rect\n  const rect = shapeSvg.insert('rect', ':first-child');\n\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n\n  // center the rect around its coordinate\n  rect\n    .attr('rx', node.rx)\n    .attr('ry', node.ry)\n    .attr('x', node.x - node.width / 2 - halfPadding)\n    .attr('y', node.y - node.height / 2 - halfPadding)\n    .attr('width', node.width + padding)\n    .attr('height', node.height + padding)\n    .attr('fill', 'none');\n\n  const rectBox = rect.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  // Add outer g element\n  const shapeSvg = parent.insert('g').attr('class', node.classes).attr('id', node.id);\n\n  // add the rect\n  const rect = shapeSvg.insert('rect', ':first-child');\n\n  // Create the label and insert it after the rect\n  const label = shapeSvg.insert('g').attr('class', 'cluster-label');\n  const innerRect = shapeSvg.append('rect');\n\n  const text = label\n    .node()\n    .appendChild(createLabel(node.labelText, node.labelStyle, undefined, true));\n\n  // Get the size of the label\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr('width', bbox.width);\n    dv.attr('height', bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n\n  // center the rect around its coordinate\n  rect\n    .attr('class', 'outer')\n    .attr('x', node.x - width / 2 - halfPadding)\n    .attr('y', node.y - node.height / 2 - halfPadding)\n    .attr('width', width + padding)\n    .attr('height', node.height + padding);\n  innerRect\n    .attr('class', 'inner')\n    .attr('x', node.x - width / 2 - halfPadding)\n    .attr('y', node.y - node.height / 2 - halfPadding + bbox.height - 1)\n    .attr('width', width + padding)\n    .attr('height', node.height + padding - bbox.height - 3);\n\n  // Center the label\n  label.attr(\n    'transform',\n    'translate(' +\n      (node.x - bbox.width / 2) +\n      ', ' +\n      (node.y -\n        node.height / 2 -\n        node.padding / 3 +\n        (evaluate(getConfig().flowchart.htmlLabels) ? 5 : 3)) +\n      ')'\n  );\n\n  const rectBox = rect.node().getBBox();\n  node.height = rectBox.height;\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n};\n\nconst divider = (parent, node) => {\n  // Add outer g element\n  const shapeSvg = parent.insert('g').attr('class', node.classes).attr('id', node.id);\n\n  // add the rect\n  const rect = shapeSvg.insert('rect', ':first-child');\n\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n\n  // center the rect around its coordinate\n  rect\n    .attr('class', 'divider')\n    .attr('x', node.x - node.width / 2 - halfPadding)\n    .attr('y', node.y - node.height / 2)\n    .attr('width', node.width + padding)\n    .attr('height', node.height + padding);\n\n  const rectBox = rect.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n};\n\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\n\nlet clusterElems = {};\n\nexport const insertCluster = (elem, node) => {\n  log.trace('Inserting cluster');\n  const shape = node.shape || 'rect';\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nexport const getClusterTitleWidth = (elem, node) => {\n  const label = createLabel(node.labelText, node.labelStyle, undefined, true);\n  elem.node().appendChild(label);\n  const width = label.getBBox().width;\n  elem.node().removeChild(label);\n  return width;\n};\n\nexport const clear = () => {\n  clusterElems = {};\n};\n\nexport const positionCluster = (node) => {\n  log.info('Position cluster (' + node.id + ', ' + node.x + ', ' + node.y + ')');\n  const el = clusterElems[node.id];\n\n  el.attr('transform', 'translate(' + node.x + ', ' + node.y + ')');\n};\n","import { layout as dagreLayout } from 'dagre-d3-es/src/dagre/index.js';\nimport * as graphlibJson from 'dagre-d3-es/src/graphlib/json.js';\nimport insertMarkers from './markers';\nimport { updateNodeBounds } from './shapes/util';\nimport {\n  clear as clearGraphlib,\n  clusterDb,\n  adjustClustersAndEdges,\n  findNonClusterChild,\n  sortNodesByHierarchy,\n} from './mermaid-graphlib';\nimport { insertNode, positionNode, clear as clearNodes, setNodeElem } from './nodes';\nimport { insertCluster, clear as clearClusters } from './clusters';\nimport { insertEdgeLabel, positionEdgeLabel, insertEdge, clear as clearEdges } from './edges';\nimport { log } from '../logger';\n\nconst recursiveRender = (_elem, graph, diagramtype, parentCluster) => {\n  log.info('Graph in recursive render: XXX', graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace('Dir in recursive render - dir:', dir);\n\n  const elem = _elem.insert('g').attr('class', 'root');\n  if (!graph.nodes()) {\n    log.info('No nodes found for', graph);\n  } else {\n    log.info('Recursive render XXX', graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace('Recursive edges', graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert('g').attr('class', 'clusters');\n  const edgePaths = elem.insert('g').attr('class', 'edgePaths');\n  const edgeLabels = elem.insert('g').attr('class', 'edgeLabels');\n  const nodes = elem.insert('g').attr('class', 'nodes');\n\n  // Insert nodes, this will insert them into the dom and each node will get a size. The size is updated\n  // to the abstract node and is later used by dagre for the layout\n  graph.nodes().forEach(function (v) {\n    const node = graph.node(v);\n    if (parentCluster !== undefined) {\n      const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n      // data.clusterPositioning = true;\n      log.info('Setting data for cluster XXX (', v, ') ', data, parentCluster);\n      graph.setNode(parentCluster.id, data);\n      if (!graph.parent(v)) {\n        log.trace('Setting parent', v, parentCluster.id);\n        graph.setParent(v, parentCluster.id, data);\n      }\n    }\n    log.info('(Insert) Node XXX' + v + ': ' + JSON.stringify(graph.node(v)));\n    if (node && node.clusterNode) {\n      // const children = graph.children(v);\n      log.info('Cluster identified', v, node.width, graph.node(v));\n      const o = recursiveRender(nodes, node.graph, diagramtype, graph.node(v));\n      const newEl = o.elem;\n      updateNodeBounds(node, newEl);\n      node.diff = o.diff || 0;\n      log.info('Node bounds (abc123)', v, node, node.width, node.x, node.y);\n      setNodeElem(newEl, node);\n\n      log.warn('Recursive render complete ', newEl, node);\n    } else {\n      if (graph.children(v).length > 0) {\n        // This is a cluster but not to be rendered recursively\n        // Render as before\n        log.info('Cluster - the non recursive path XXX', v, node.id, node, graph);\n        log.info(findNonClusterChild(node.id, graph));\n        clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        // insertCluster(clusters, graph.node(v));\n      } else {\n        log.info('Node - the non recursive path', v, node.id, node);\n        insertNode(nodes, graph.node(v), dir);\n      }\n    }\n  });\n\n  // Insert labels, this will insert them into the dom so that the width can be calculated\n  // Also figure out which edges point to/from clusters and adjust them accordingly\n  // Edges from/to clusters really points to the first child in the cluster.\n  // TODO: pick optimal child in the cluster to us as link anchor\n  graph.edges().forEach(function (e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(e));\n    log.info('Edge ' + e.v + ' -> ' + e.w + ': ', e, ' ', JSON.stringify(graph.edge(e)));\n\n    // Check if link is either from or to a cluster\n    log.info('Fix', clusterDb, 'ids:', e.v, e.w, 'Translateing: ', clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n\n  graph.edges().forEach(function (e) {\n    log.info('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(e));\n  });\n  log.info('#############################################');\n  log.info('###                Layout                 ###');\n  log.info('#############################################');\n  log.info(graph);\n  dagreLayout(graph);\n  log.info('Graph after layout:', graphlibJson.write(graph));\n  // Move the nodes to the correct place\n  let diff = 0;\n  sortNodesByHierarchy(graph).forEach(function (v) {\n    const node = graph.node(v);\n    log.info('Position ' + v + ': ' + JSON.stringify(graph.node(v)));\n    log.info(\n      'Position ' + v + ': (' + node.x,\n      ',' + node.y,\n      ') width: ',\n      node.width,\n      ' height: ',\n      node.height\n    );\n    if (node && node.clusterNode) {\n      // clusterDb[node.id].node = node;\n\n      positionNode(node);\n    } else {\n      // Non cluster node\n      if (graph.children(v).length > 0) {\n        // A cluster in the non-recursive way\n        // positionCluster(node);\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        positionNode(node);\n      }\n    }\n  });\n\n  // Move the edge labels to the correct place after layout\n  graph.edges().forEach(function (e) {\n    const edge = graph.edge(e);\n    log.info('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(edge), edge);\n\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramtype, graph);\n    positionEdgeLabel(edge, paths);\n  });\n\n  graph.nodes().forEach(function (v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === 'group') {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\n\nexport const render = (elem, graph, markers, diagramtype, id) => {\n  insertMarkers(elem, markers, diagramtype, id);\n  clearNodes();\n  clearEdges();\n  clearClusters();\n  clearGraphlib();\n\n  log.warn('Graph at first:', graphlibJson.write(graph));\n  adjustClustersAndEdges(graph);\n  log.warn('Graph after:', graphlibJson.write(graph));\n  // log.warn('Graph ever  after:', graphlibJson.write(graph.node('A').graph));\n  recursiveRender(elem, graph, diagramtype);\n};\n\n// const shapeDefinitions = {};\n// export const addShape = ({ shapeType: fun }) => {\n//   shapeDefinitions[shapeType] = fun;\n// };\n\n// const arrowDefinitions = {};\n// export const addArrow = ({ arrowType: fun }) => {\n//   arrowDefinitions[arrowType] = fun;\n// };\n"],"names":["CLONE_SYMBOLS_FLAG","clone","value","baseClone","write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","_","graph","v","nodeValue","node","parent","e","edgeValue","edge","w","name","clusterDb","descendants","parents","clear","isDescendant","id","ancenstorId","log","includes","edgeInCluster","clusterId","copy","newGraph","rootId","children","push","forEach","length","data","setNode","setParent","setEdge","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","adjustClustersAndEdges","depth","clusterData","d1","d2","JSON","stringify","removeEdge","specialId","domId","labelStyle","labelText","label","padding","shape","style","edge1","parse","edge2","arrowTypeEnd","fromCluster","toCluster","graphlibJson","extractor","hasChildren","graphSettings","dir","rankdir","clusterGraph","graphlib","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","sorter","result","Object","assign","sorted","sortNodesByHierarchy","rect","shapeSvg","insert","attr","class","useHtmlLabels","evaluate","getConfig","flowchart","htmlLabels","text","labelType","createText","appendChild","createLabel","bbox","getBBox","div","dv","select","getBoundingClientRect","width","height","halfPadding","diff","rx","ry","x","y","rectBox","intersect","point","intersectRect","noteGroup","roundedWithTitle","classes","innerRect","append","divider","shapes","clusterElems","insertCluster","elem","recursiveRender","_elem","diagramtype","parentCluster","clusters","edgePaths","edgeLabels","o","newEl","updateNodeBounds","setNodeElem","insertNode","insertEdgeLabel","dagreLayout","positionNode","paths","insertEdge","positionEdgeLabel","n","type","render","markers","insertMarkers","clearNodes","clearEdges","clearClusters","clearGraphlib"],"sourceRoot":""}